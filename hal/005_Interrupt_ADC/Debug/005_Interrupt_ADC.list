
005_Interrupt_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f6c  08002f6c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f74  08002f74  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000929a  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a29  00000000  00000000  0002936f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007f8  00000000  00000000  0002ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000604  00000000  00000000  0002b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002f9b  00000000  00000000  0002bb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b2e3  00000000  00000000  0002eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d21a1  00000000  00000000  00039e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000272c  00000000  00000000  0010bfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0010e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002efc 	.word	0x08002efc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002efc 	.word	0x08002efc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811b 	bcs.w	800054e <__udivmoddi4+0x28e>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8118 	bls.w	800054e <__udivmoddi4+0x28e>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8106 	bcs.w	8000552 <__udivmoddi4+0x292>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8103 	bls.w	8000552 <__udivmoddi4+0x292>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ec 	beq.w	8000548 <__udivmoddi4+0x288>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f7 	bhi.w	800057c <__udivmoddi4+0x2bc>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 808f 	bne.w	80004ce <__udivmoddi4+0x20e>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80ba 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	4323      	orrs	r3, r4
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb00 5518 	mls	r5, r0, r8, r5
 8000448:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800044c:	fb08 f50e 	mul.w	r5, r8, lr
 8000450:	42a5      	cmp	r5, r4
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f0 	udiv	r3, r4, r0
 8000478:	fb00 4413 	mls	r4, r0, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800049e:	fba0 8302 	umull	r8, r3, r0, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	429c      	cmp	r4, r3
 80004a8:	46c6      	mov	lr, r8
 80004aa:	461d      	mov	r5, r3
 80004ac:	d355      	bcc.n	800055a <__udivmoddi4+0x29a>
 80004ae:	d052      	beq.n	8000556 <__udivmoddi4+0x296>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb9 030e 	subs.w	r3, r9, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	431f      	orrs	r7, r3
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c3 0120 	rsb	r1, r3, #32
 80004d2:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d6:	fa20 f201 	lsr.w	r2, r0, r1
 80004da:	fa25 f101 	lsr.w	r1, r5, r1
 80004de:	409d      	lsls	r5, r3
 80004e0:	432a      	orrs	r2, r5
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1510 	mls	r5, r7, r0, r1
 80004f2:	0c11      	lsrs	r1, r2, #16
 80004f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f8:	fb00 f50e 	mul.w	r5, r0, lr
 80004fc:	428d      	cmp	r5, r1
 80004fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x256>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428d      	cmp	r5, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	1b49      	subs	r1, r1, r5
 8000518:	b292      	uxth	r2, r2
 800051a:	fbb1 f5f7 	udiv	r5, r1, r7
 800051e:	fb07 1115 	mls	r1, r7, r5, r1
 8000522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000526:	fb05 f10e 	mul.w	r1, r5, lr
 800052a:	4291      	cmp	r1, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x280>
 800052e:	eb1c 0202 	adds.w	r2, ip, r2
 8000532:	f105 38ff 	add.w	r8, r5, #4294967295
 8000536:	d216      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000538:	4291      	cmp	r1, r2
 800053a:	d914      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053c:	3d02      	subs	r5, #2
 800053e:	4462      	add	r2, ip
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e739      	b.n	80003bc <__udivmoddi4+0xfc>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e709      	b.n	8000362 <__udivmoddi4+0xa2>
 800054e:	4639      	mov	r1, r7
 8000550:	e6e7      	b.n	8000322 <__udivmoddi4+0x62>
 8000552:	4610      	mov	r0, r2
 8000554:	e6fc      	b.n	8000350 <__udivmoddi4+0x90>
 8000556:	45c1      	cmp	r9, r8
 8000558:	d2aa      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055a:	ebb8 0e02 	subs.w	lr, r8, r2
 800055e:	eb63 050c 	sbc.w	r5, r3, ip
 8000562:	3801      	subs	r0, #1
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4645      	mov	r5, r8
 8000568:	e7ea      	b.n	8000540 <__udivmoddi4+0x280>
 800056a:	4603      	mov	r3, r0
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4640      	mov	r0, r8
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	46d0      	mov	r8, sl
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x124>
 800057c:	4608      	mov	r0, r1
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xd8>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e743      	b.n	800040e <__udivmoddi4+0x14e>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <HAL_Init+0x40>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_Init+0x40>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x40>)
 80005ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 fda7 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 f80e 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f000 f806 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023c00 	.word	0x40023c00

080005d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fdb9 	bl	8001172 <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 fd81 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004
 8000638:	20000000 	.word	0x20000000

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000004 	.word	0x20000004
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000084 	.word	0x20000084

08000674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e033      	b.n	80006f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f831 	bl	80006fa <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d118      	bne.n	80006e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ba:	f023 0302 	bic.w	r3, r3, #2
 80006be:	f043 0202 	orr.w	r2, r3, #2
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fb4c 	bl	8000d64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	f043 0201 	orr.w	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	641a      	str	r2, [r3, #64]	; 0x40
 80006e2:	e001      	b.n	80006e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800071e:	2b01      	cmp	r3, #1
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Start_IT+0x1a>
 8000722:	2302      	movs	r3, #2
 8000724:	e0bd      	b.n	80008a2 <HAL_ADC_Start_IT+0x196>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2201      	movs	r2, #1
 800072a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b01      	cmp	r3, #1
 800073a:	d018      	beq.n	800076e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0201 	orr.w	r2, r2, #1
 800074a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800074c:	4b57      	ldr	r3, [pc, #348]	; (80008ac <HAL_ADC_Start_IT+0x1a0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a57      	ldr	r2, [pc, #348]	; (80008b0 <HAL_ADC_Start_IT+0x1a4>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	0c9a      	lsrs	r2, r3, #18
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000760:	e002      	b.n	8000768 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f9      	bne.n	8000762 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b01      	cmp	r3, #1
 800077a:	f040 8085 	bne.w	8000888 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000786:	f023 0301 	bic.w	r3, r3, #1
 800078a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800079c:	2b00      	cmp	r3, #0
 800079e:	d007      	beq.n	80007b0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007bc:	d106      	bne.n	80007cc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	f023 0206 	bic.w	r2, r3, #6
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	645a      	str	r2, [r3, #68]	; 0x44
 80007ca:	e002      	b.n	80007d2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <HAL_ADC_Start_IT+0x1a8>)
 80007dc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007e6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007f6:	f043 0320 	orr.w	r3, r3, #32
 80007fa:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 031f 	and.w	r3, r3, #31
 8000804:	2b00      	cmp	r3, #0
 8000806:	d12a      	bne.n	800085e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <HAL_ADC_Start_IT+0x1ac>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d015      	beq.n	800083e <HAL_ADC_Start_IT+0x132>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a29      	ldr	r2, [pc, #164]	; (80008bc <HAL_ADC_Start_IT+0x1b0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d105      	bne.n	8000828 <HAL_ADC_Start_IT+0x11c>
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_ADC_Start_IT+0x1a8>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00a      	beq.n	800083e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <HAL_ADC_Start_IT+0x1b4>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d136      	bne.n	80008a0 <HAL_ADC_Start_IT+0x194>
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <HAL_ADC_Start_IT+0x1a8>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	2b00      	cmp	r3, #0
 800083c:	d130      	bne.n	80008a0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000848:	2b00      	cmp	r3, #0
 800084a:	d129      	bne.n	80008a0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	e020      	b.n	80008a0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <HAL_ADC_Start_IT+0x1ac>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d11b      	bne.n	80008a0 <HAL_ADC_Start_IT+0x194>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d114      	bne.n	80008a0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	e00b      	b.n	80008a0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f043 0210 	orr.w	r2, r3, #16
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000898:	f043 0201 	orr.w	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	431bde83 	.word	0x431bde83
 80008b4:	40012300 	.word	0x40012300
 80008b8:	40012000 	.word	0x40012000
 80008bc:	40012100 	.word	0x40012100
 80008c0:	40012200 	.word	0x40012200

080008c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d049      	beq.n	800098e <HAL_ADC_IRQHandler+0xca>
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d046      	beq.n	800098e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	2b00      	cmp	r3, #0
 800090a:	d105      	bne.n	8000918 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d12b      	bne.n	800097e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800092a:	2b00      	cmp	r3, #0
 800092c:	d127      	bne.n	800097e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000946:	2b00      	cmp	r3, #0
 8000948:	d119      	bne.n	800097e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f022 0220 	bic.w	r2, r2, #32
 8000958:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f043 0201 	orr.w	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f001 fa48 	bl	8001e14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f06f 0212 	mvn.w	r2, #18
 800098c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d057      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x190>
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d054      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d139      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d12b      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d124      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11d      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d119      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f043 0201 	orr.w	r2, r3, #1
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 fa89 	bl	8000f5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f06f 020c 	mvn.w	r2, #12
 8000a52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d017      	beq.n	8000a9a <HAL_ADC_IRQHandler+0x1d6>
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d014      	beq.n	8000a9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10d      	bne.n	8000a9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f836 	bl	8000afc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f06f 0201 	mvn.w	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d015      	beq.n	8000adc <HAL_ADC_IRQHandler+0x218>
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d012      	beq.n	8000adc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f043 0202 	orr.w	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f06f 0220 	mvn.w	r2, #32
 8000aca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f81e 	bl	8000b0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f06f 0220 	mvn.w	r2, #32
 8000ada:	601a      	str	r2, [r3, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d101      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x1c>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e105      	b.n	8000d48 <HAL_ADC_ConfigChannel+0x228>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	d925      	bls.n	8000b98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68d9      	ldr	r1, [r3, #12]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	3b1e      	subs	r3, #30
 8000b62:	2207      	movs	r2, #7
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43da      	mvns	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	400a      	ands	r2, r1
 8000b70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68d9      	ldr	r1, [r3, #12]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	4603      	mov	r3, r0
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4403      	add	r3, r0
 8000b8a:	3b1e      	subs	r3, #30
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	e022      	b.n	8000bde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6919      	ldr	r1, [r3, #16]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	2207      	movs	r2, #7
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	400a      	ands	r2, r1
 8000bba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6919      	ldr	r1, [r3, #16]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	4603      	mov	r3, r0
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4403      	add	r3, r0
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d824      	bhi.n	8000c30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3b05      	subs	r3, #5
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	400a      	ands	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b05      	subs	r3, #5
 8000c22:	fa00 f203 	lsl.w	r2, r0, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2e:	e04c      	b.n	8000cca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b0c      	cmp	r3, #12
 8000c36:	d824      	bhi.n	8000c82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	3b23      	subs	r3, #35	; 0x23
 8000c4a:	221f      	movs	r2, #31
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43da      	mvns	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	400a      	ands	r2, r1
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	3b23      	subs	r3, #35	; 0x23
 8000c74:	fa00 f203 	lsl.w	r2, r0, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c80:	e023      	b.n	8000cca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	3b41      	subs	r3, #65	; 0x41
 8000c94:	221f      	movs	r2, #31
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b41      	subs	r3, #65	; 0x41
 8000cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_ADC_ConfigChannel+0x234>)
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_ADC_ConfigChannel+0x238>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d109      	bne.n	8000cec <HAL_ADC_ConfigChannel+0x1cc>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b12      	cmp	r3, #18
 8000cde:	d105      	bne.n	8000cec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_ADC_ConfigChannel+0x238>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d123      	bne.n	8000d3e <HAL_ADC_ConfigChannel+0x21e>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	d003      	beq.n	8000d06 <HAL_ADC_ConfigChannel+0x1e6>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b11      	cmp	r3, #17
 8000d04:	d11b      	bne.n	8000d3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d111      	bne.n	8000d3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_ADC_ConfigChannel+0x23c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_ADC_ConfigChannel+0x240>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	0c9a      	lsrs	r2, r3, #18
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d30:	e002      	b.n	8000d38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f9      	bne.n	8000d32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40012300 	.word	0x40012300
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	431bde83 	.word	0x431bde83

08000d64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d6c:	4b79      	ldr	r3, [pc, #484]	; (8000f54 <ADC_Init+0x1f0>)
 8000d6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	021a      	lsls	r2, r3, #8
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6859      	ldr	r1, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6899      	ldr	r1, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <ADC_Init+0x1f4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d022      	beq.n	8000e42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6899      	ldr	r1, [r3, #8]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6899      	ldr	r1, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	e00f      	b.n	8000e62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0202 	bic.w	r2, r2, #2
 8000e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6899      	ldr	r1, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7e1b      	ldrb	r3, [r3, #24]
 8000e7c:	005a      	lsls	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000eae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	035a      	lsls	r2, r3, #13
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	e007      	b.n	8000ed8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	051a      	lsls	r2, r3, #20
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6899      	ldr	r1, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f1a:	025a      	lsls	r2, r3, #9
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6899      	ldr	r1, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	029a      	lsls	r2, r3, #10
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	609a      	str	r2, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40012300 	.word	0x40012300
 8000f58:	0f000001 	.word	0x0f000001

08000f5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4906      	ldr	r1, [pc, #24]	; (8001008 <__NVIC_EnableIRQ+0x34>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff90 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff2d 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff42 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x308>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x30c>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x330>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d8:	f7ff fff2 	bl	80014c0 <HAL_RCC_GetHCLKFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0a9b      	lsrs	r3, r3, #10
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4903      	ldr	r1, [pc, #12]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08002f30 	.word	0x08002f30

080014fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001500:	f7ff ffde 	bl	80014c0 <HAL_RCC_GetHCLKFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0b5b      	lsrs	r3, r3, #13
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4903      	ldr	r1, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	08002f30 	.word	0x08002f30

08001524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e03f      	b.n	80015b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f837 	bl	80015be <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f931 	bl	80017d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800157c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800158c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800159c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d17c      	bne.n	80016ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_UART_Transmit+0x2c>
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e075      	b.n	80016ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_UART_Transmit+0x3e>
 800160a:	2302      	movs	r3, #2
 800160c:	e06e      	b.n	80016ec <HAL_UART_Transmit+0x11c>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2221      	movs	r2, #33	; 0x21
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001624:	f7ff f81c 	bl	8000660 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	88fa      	ldrh	r2, [r7, #6]
 8001634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800163e:	d108      	bne.n	8001652 <HAL_UART_Transmit+0x82>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d104      	bne.n	8001652 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	e003      	b.n	800165a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001662:	e02a      	b.n	80016ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2200      	movs	r2, #0
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f840 	bl	80016f4 <UART_WaitOnFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e036      	b.n	80016ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10b      	bne.n	800169c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001692:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	3302      	adds	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	e007      	b.n	80016ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1cf      	bne.n	8001664 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2200      	movs	r2, #0
 80016cc:	2140      	movs	r1, #64	; 0x40
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f810 	bl	80016f4 <UART_WaitOnFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e006      	b.n	80016ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016ea:	2302      	movs	r3, #2
  }
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b090      	sub	sp, #64	; 0x40
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001704:	e050      	b.n	80017a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d04c      	beq.n	80017a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800170e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <UART_WaitOnFlagUntilTimeout+0x30>
 8001714:	f7fe ffa4 	bl	8000660 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001720:	429a      	cmp	r2, r3
 8001722:	d241      	bcs.n	80017a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	330c      	adds	r3, #12
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	e853 3f00 	ldrex	r3, [r3]
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	330c      	adds	r3, #12
 8001742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001744:	637a      	str	r2, [r7, #52]	; 0x34
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800174a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800174c:	e841 2300 	strex	r3, r2, [r1]
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e5      	bne.n	8001724 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3314      	adds	r3, #20
 800175e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	e853 3f00 	ldrex	r3, [r3]
 8001766:	613b      	str	r3, [r7, #16]
   return(result);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3314      	adds	r3, #20
 8001776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001778:	623a      	str	r2, [r7, #32]
 800177a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800177c:	69f9      	ldr	r1, [r7, #28]
 800177e:	6a3a      	ldr	r2, [r7, #32]
 8001780:	e841 2300 	strex	r3, r2, [r1]
 8001784:	61bb      	str	r3, [r7, #24]
   return(result);
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e5      	bne.n	8001758 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e00f      	b.n	80017c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4013      	ands	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2300      	movne	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d09f      	beq.n	8001706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3740      	adds	r7, #64	; 0x40
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b0c0      	sub	sp, #256	; 0x100
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80017e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017ec:	68d9      	ldr	r1, [r3, #12]
 80017ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	ea40 0301 	orr.w	r3, r0, r1
 80017f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	431a      	orrs	r2, r3
 8001808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	431a      	orrs	r2, r3
 8001810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4313      	orrs	r3, r2
 8001818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800181c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001828:	f021 010c 	bic.w	r1, r1, #12
 800182c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001836:	430b      	orrs	r3, r1
 8001838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800183a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800184a:	6999      	ldr	r1, [r3, #24]
 800184c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	ea40 0301 	orr.w	r3, r0, r1
 8001856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b91      	ldr	r3, [pc, #580]	; (8001aa4 <UART_SetConfig+0x2d4>)
 8001860:	429a      	cmp	r2, r3
 8001862:	d005      	beq.n	8001870 <UART_SetConfig+0xa0>
 8001864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b8f      	ldr	r3, [pc, #572]	; (8001aa8 <UART_SetConfig+0x2d8>)
 800186c:	429a      	cmp	r2, r3
 800186e:	d104      	bne.n	800187a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001870:	f7ff fe44 	bl	80014fc <HAL_RCC_GetPCLK2Freq>
 8001874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001878:	e003      	b.n	8001882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800187a:	f7ff fe2b 	bl	80014d4 <HAL_RCC_GetPCLK1Freq>
 800187e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800188c:	f040 8110 	bne.w	8001ab0 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001894:	2200      	movs	r2, #0
 8001896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800189a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800189e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80018a2:	4622      	mov	r2, r4
 80018a4:	462b      	mov	r3, r5
 80018a6:	1891      	adds	r1, r2, r2
 80018a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80018aa:	415b      	adcs	r3, r3
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	4604      	mov	r4, r0
 80018b8:	eb12 0804 	adds.w	r8, r2, r4
 80018bc:	460c      	mov	r4, r1
 80018be:	eb43 0904 	adc.w	r9, r3, r4
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d6:	4690      	mov	r8, r2
 80018d8:	4699      	mov	r9, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	eb18 0303 	adds.w	r3, r8, r3
 80018e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80018e4:	460b      	mov	r3, r1
 80018e6:	eb49 0303 	adc.w	r3, r9, r3
 80018ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80018fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001902:	460b      	mov	r3, r1
 8001904:	18db      	adds	r3, r3, r3
 8001906:	653b      	str	r3, [r7, #80]	; 0x50
 8001908:	4613      	mov	r3, r2
 800190a:	eb42 0303 	adc.w	r3, r2, r3
 800190e:	657b      	str	r3, [r7, #84]	; 0x54
 8001910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001918:	f7fe fcba 	bl	8000290 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <UART_SetConfig+0x2dc>)
 8001922:	fba3 2302 	umull	r2, r3, r3, r2
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	011c      	lsls	r4, r3, #4
 800192a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800192e:	2200      	movs	r2, #0
 8001930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800193c:	4642      	mov	r2, r8
 800193e:	464b      	mov	r3, r9
 8001940:	1891      	adds	r1, r2, r2
 8001942:	64b9      	str	r1, [r7, #72]	; 0x48
 8001944:	415b      	adcs	r3, r3
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800194c:	4645      	mov	r5, r8
 800194e:	eb12 0a05 	adds.w	sl, r2, r5
 8001952:	4640      	mov	r0, r8
 8001954:	4649      	mov	r1, r9
 8001956:	460d      	mov	r5, r1
 8001958:	eb43 0b05 	adc.w	fp, r3, r5
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800196c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001970:	4692      	mov	sl, r2
 8001972:	469b      	mov	fp, r3
 8001974:	4603      	mov	r3, r0
 8001976:	eb1a 0303 	adds.w	r3, sl, r3
 800197a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800197e:	460b      	mov	r3, r1
 8001980:	eb4b 0303 	adc.w	r3, fp, r3
 8001984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800199c:	460b      	mov	r3, r1
 800199e:	18db      	adds	r3, r3, r3
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
 80019a2:	4613      	mov	r3, r2
 80019a4:	eb42 0303 	adc.w	r3, r2, r3
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
 80019aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80019b2:	f7fe fc6d 	bl	8000290 <__aeabi_uldivmod>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <UART_SetConfig+0x2dc>)
 80019be:	fba3 2301 	umull	r2, r3, r3, r1
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2264      	movs	r2, #100	; 0x64
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <UART_SetConfig+0x2dc>)
 80019d4:	fba3 2302 	umull	r2, r3, r3, r2
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019e0:	441c      	add	r4, r3
 80019e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80019f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80019f4:	4642      	mov	r2, r8
 80019f6:	464b      	mov	r3, r9
 80019f8:	1891      	adds	r1, r2, r2
 80019fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80019fc:	415b      	adcs	r3, r3
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a04:	4641      	mov	r1, r8
 8001a06:	1851      	adds	r1, r2, r1
 8001a08:	6339      	str	r1, [r7, #48]	; 0x30
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	414b      	adcs	r3, r1
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	00cb      	lsls	r3, r1, #3
 8001a20:	4655      	mov	r5, sl
 8001a22:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a26:	4651      	mov	r1, sl
 8001a28:	00ca      	lsls	r2, r1, #3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4642      	mov	r2, r8
 8001a32:	189b      	adds	r3, r3, r2
 8001a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a38:	464b      	mov	r3, r9
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	eb42 0303 	adc.w	r3, r2, r3
 8001a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001a58:	460b      	mov	r3, r1
 8001a5a:	18db      	adds	r3, r3, r3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5e:	4613      	mov	r3, r2
 8001a60:	eb42 0303 	adc.w	r3, r2, r3
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001a6e:	f7fe fc0f 	bl	8000290 <__aeabi_uldivmod>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <UART_SetConfig+0x2dc>)
 8001a78:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	3332      	adds	r3, #50	; 0x32
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <UART_SetConfig+0x2dc>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	095b      	lsrs	r3, r3, #5
 8001a92:	f003 0207 	and.w	r2, r3, #7
 8001a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4422      	add	r2, r4
 8001a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001aa0:	e10a      	b.n	8001cb8 <UART_SetConfig+0x4e8>
 8001aa2:	bf00      	nop
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40011400 	.word	0x40011400
 8001aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ac2:	4642      	mov	r2, r8
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	1891      	adds	r1, r2, r2
 8001ac8:	6239      	str	r1, [r7, #32]
 8001aca:	415b      	adcs	r3, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ad2:	4641      	mov	r1, r8
 8001ad4:	1854      	adds	r4, r2, r1
 8001ad6:	46cc      	mov	ip, r9
 8001ad8:	eb43 050c 	adc.w	r5, r3, ip
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	00eb      	lsls	r3, r5, #3
 8001ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aea:	00e2      	lsls	r2, r4, #3
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	4640      	mov	r0, r8
 8001af2:	4649      	mov	r1, r9
 8001af4:	4603      	mov	r3, r0
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001afc:	460b      	mov	r3, r1
 8001afe:	eb45 0303 	adc.w	r3, r5, r3
 8001b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b22:	4629      	mov	r1, r5
 8001b24:	008b      	lsls	r3, r1, #2
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001b30:	4601      	mov	r1, r0
 8001b32:	008a      	lsls	r2, r1, #2
 8001b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001b38:	f7fe fbaa 	bl	8000290 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <UART_SetConfig+0x4f4>)
 8001b42:	fba3 2302 	umull	r2, r3, r3, r2
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	011c      	lsls	r4, r3, #4
 8001b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	1891      	adds	r1, r2, r2
 8001b62:	61b9      	str	r1, [r7, #24]
 8001b64:	415b      	adcs	r3, r3
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	1851      	adds	r1, r2, r1
 8001b70:	6139      	str	r1, [r7, #16]
 8001b72:	4649      	mov	r1, r9
 8001b74:	414b      	adcs	r3, r1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b84:	4659      	mov	r1, fp
 8001b86:	00cb      	lsls	r3, r1, #3
 8001b88:	4655      	mov	r5, sl
 8001b8a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001b8e:	4651      	mov	r1, sl
 8001b90:	00ca      	lsls	r2, r1, #3
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	4642      	mov	r2, r8
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	eb42 0303 	adc.w	r3, r2, r3
 8001ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	008b      	lsls	r3, r1, #2
 8001bc8:	4645      	mov	r5, r8
 8001bca:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001bce:	4641      	mov	r1, r8
 8001bd0:	008a      	lsls	r2, r1, #2
 8001bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001bd6:	f7fe fb5b 	bl	8000290 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <UART_SetConfig+0x4f4>)
 8001be2:	fba3 2301 	umull	r2, r3, r3, r1
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2264      	movs	r2, #100	; 0x64
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	3332      	adds	r3, #50	; 0x32
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <UART_SetConfig+0x4f4>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	441c      	add	r4, r3
 8001c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c06:	2200      	movs	r2, #0
 8001c08:	673b      	str	r3, [r7, #112]	; 0x70
 8001c0a:	677a      	str	r2, [r7, #116]	; 0x74
 8001c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001c10:	4642      	mov	r2, r8
 8001c12:	464b      	mov	r3, r9
 8001c14:	1891      	adds	r1, r2, r2
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	415b      	adcs	r3, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c20:	4641      	mov	r1, r8
 8001c22:	1851      	adds	r1, r2, r1
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	4649      	mov	r1, r9
 8001c28:	414b      	adcs	r3, r1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c38:	4659      	mov	r1, fp
 8001c3a:	00cb      	lsls	r3, r1, #3
 8001c3c:	4655      	mov	r5, sl
 8001c3e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001c42:	4651      	mov	r1, sl
 8001c44:	00ca      	lsls	r2, r1, #3
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c52:	464b      	mov	r3, r9
 8001c54:	460a      	mov	r2, r1
 8001c56:	eb42 0303 	adc.w	r3, r2, r3
 8001c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
 8001c66:	667a      	str	r2, [r7, #100]	; 0x64
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001c74:	4649      	mov	r1, r9
 8001c76:	008b      	lsls	r3, r1, #2
 8001c78:	4645      	mov	r5, r8
 8001c7a:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001c7e:	4641      	mov	r1, r8
 8001c80:	008a      	lsls	r2, r1, #2
 8001c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c86:	f7fe fb03 	bl	8000290 <__aeabi_uldivmod>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <UART_SetConfig+0x4f4>)
 8001c90:	fba3 1302 	umull	r1, r3, r3, r2
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	2164      	movs	r1, #100	; 0x64
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	3332      	adds	r3, #50	; 0x32
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <UART_SetConfig+0x4f4>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4422      	add	r2, r4
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc4:	51eb851f 	.word	0x51eb851f

08001cc8 <ADC_PA0_Read>:
extern ADC_HandleTypeDef hadc1;

//static void ADC_PA0_ContinuousConv_Init(void);

uint32_t ADC_PA0_Read(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <ADC_PA0_Read+0x10>)
 8001cce:	f7fe ff09 	bl	8000ae4 <HAL_ADC_GetValue>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000088 	.word	0x20000088

08001cdc <ADC_PA0_Interrupt_Init>:

	HAL_ADC_ConfigChannel(&hadc1, &sconfig);
}

void ADC_PA0_Interrupt_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
	// Configure GPIO PA0 as analog mode
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a31      	ldr	r2, [pc, #196]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef Gpiostruct;

	Gpiostruct.Pin 		= GPIO_PIN_0;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
	Gpiostruct.Mode 	= GPIO_MODE_ANALOG;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
	Gpiostruct.Pull		= GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA,&Gpiostruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4828      	ldr	r0, [pc, #160]	; (8001db4 <ADC_PA0_Interrupt_Init+0xd8>)
 8001d12:	f7ff fa3b 	bl	800118c <HAL_GPIO_Init>

	// Configure ADC for continuous conversion mode

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <ADC_PA0_Interrupt_Init+0xd4>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance 						= ADC1;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <ADC_PA0_Interrupt_Init+0xe0>)
 8001d36:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler 			= ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution				= ADC_RESOLUTION_12B;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode		= ENABLE;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode	= DISABLE;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv			= ADC_SOFTWARE_START;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d5a:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <ADC_PA0_Interrupt_Init+0xe4>)
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion			= 1;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests	= DISABLE;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection				= ADC_EOC_SINGLE_CONV;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d7a:	f7fe fc7b 	bl	8000674 <HAL_ADC_Init>

	// Configure Channel for ADC and link PA0  and ADC1

	ADC_ChannelConfTypeDef	sconfig;

	sconfig.Channel			=	ADC_CHANNEL_0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
	sconfig.Rank			= 	1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
	sconfig.SamplingTime	=	ADC_SAMPLETIME_480CYCLES;
 8001d86:	2307      	movs	r3, #7
 8001d88:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sconfig);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <ADC_PA0_Interrupt_Init+0xdc>)
 8001d92:	f7fe fec5 	bl	8000b20 <HAL_ADC_ConfigChannel>

	// NVIC Set priority and enable IRQ handle

	HAL_NVIC_SetPriority(ADC_IRQn,0,0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2012      	movs	r0, #18
 8001d9c:	f7ff f9bf 	bl	800111e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001da0:	2012      	movs	r0, #18
 8001da2:	f7ff f9d8 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	20000088 	.word	0x20000088
 8001dbc:	40012000 	.word	0x40012000
 8001dc0:	0f000001 	.word	0x0f000001

08001dc4 <ADC_IRQHandler>:


void ADC_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <ADC_IRQHandler+0x10>)
 8001dca:	f7fe fd7b 	bl	80008c4 <HAL_ADC_IRQHandler>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000088 	.word	0x20000088

08001dd8 <main>:
/* GLOBAL VARIABLES */
ADC_HandleTypeDef hadc1;
uint32_t Sensor_Value;

int main(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	HAL_Init();
 8001ddc:	f7fe fbd6 	bl	800058c <HAL_Init>
	UART1_Init();
 8001de0:	f000 f8da 	bl	8001f98 <UART1_Init>
	ADC_PA0_Interrupt_Init();
 8001de4:	f7ff ff7a 	bl	8001cdc <ADC_PA0_Interrupt_Init>

	HAL_ADC_Start_IT(&hadc1);
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <main+0x24>)
 8001dea:	f7fe fc8f 	bl	800070c <HAL_ADC_Start_IT>
	while(1)
	{
		// 3, Get conversion
		printf("Sensor Value is :- %d \n\r",(int)Sensor_Value);
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <main+0x28>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <main+0x2c>)
 8001df6:	f000 fa13 	bl	8002220 <iprintf>
 8001dfa:	e7f8      	b.n	8001dee <main+0x16>
 8001dfc:	20000088 	.word	0x20000088
 8001e00:	200000d0 	.word	0x200000d0
 8001e04:	08002f14 	.word	0x08002f14

08001e08 <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001e0c:	f7fe fc16 	bl	800063c <HAL_IncTick>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	Sensor_Value = ADC_PA0_Read();
 8001e1c:	f7ff ff54 	bl	8001cc8 <ADC_PA0_Read>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e24:	6013      	str	r3, [r2, #0]
//	HAL_ADC_Start_IT(hadc); NOTE enable if single mode is used
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000d0 	.word	0x200000d0

08001e34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e00a      	b.n	8001e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e46:	f3af 8000 	nop.w
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf0      	blt.n	8001e46 <_read+0x12>
  }

  return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f873 	bl	8001f74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf1      	blt.n	8001e80 <_write+0x12>
  }
  return len;
 8001e9c:	687b      	ldr	r3, [r7, #4]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_close>:

int _close(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f000 fa16 	bl	8002368 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	200000d4 	.word	0x200000d4
 8001f70:	20000268 	.word	0x20000268

08001f74 <__io_putchar>:

UART_HandleTypeDef		Uart1;


int __io_putchar(int ch)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart1,(uint8_t*)&ch,1,100);
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	2364      	movs	r3, #100	; 0x64
 8001f80:	2201      	movs	r2, #1
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <__io_putchar+0x20>)
 8001f84:	f7ff fb24 	bl	80015d0 <HAL_UART_Transmit>
	return ch;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200000d8 	.word	0x200000d8

08001f98 <UART1_Init>:


void UART1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <UART1_Init+0xa0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <UART1_Init+0xa0>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <UART1_Init+0xa0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]

	// Configure Clock for UART
	__HAL_RCC_USART1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <UART1_Init+0xa0>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <UART1_Init+0xa0>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <UART1_Init+0xa0>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
 8001fd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fda:	60fb      	str	r3, [r7, #12]
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	613b      	str	r3, [r7, #16]
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
	GpioStruct.Pull			= 	GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GpioStruct);
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4812      	ldr	r0, [pc, #72]	; (800203c <UART1_Init+0xa4>)
 8001ff4:	f7ff f8ca 	bl	800118c <HAL_GPIO_Init>

	// USART2 Configuration


	Uart1.Instance				=	USART1; // USART2 Base Address is given
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <UART1_Init+0xa8>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <UART1_Init+0xac>)
 8001ffc:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART

	Uart1.Init.BaudRate			=	115200;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <UART1_Init+0xa8>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <UART1_Init+0xa8>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <UART1_Init+0xa8>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <UART1_Init+0xa8>)
 8002014:	2208      	movs	r2, #8
 8002016:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <UART1_Init+0xa8>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <UART1_Init+0xa8>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <UART1_Init+0xa8>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <UART1_Init+0xa8>)
 800202c:	f7ff fa7a 	bl	8001524 <HAL_UART_Init>

}
 8002030:	bf00      	nop
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	200000d8 	.word	0x200000d8
 8002044:	40011000 	.word	0x40011000

08002048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800204c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <LoopForever+0x6>)
  ldr r1, =_edata
 8002052:	490d      	ldr	r1, [pc, #52]	; (8002088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <LoopForever+0xe>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002068:	4c0a      	ldr	r4, [pc, #40]	; (8002094 <LoopForever+0x16>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002076:	f000 f97d 	bl	8002374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207a:	f7ff fead 	bl	8001dd8 <main>

0800207e <LoopForever>:

LoopForever:
  b LoopForever
 800207e:	e7fe      	b.n	800207e <LoopForever>
  ldr   r0, =_estack
 8002080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800208c:	08002f7c 	.word	0x08002f7c
  ldr r2, =_sbss
 8002090:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002094:	20000268 	.word	0x20000268

08002098 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <BusFault_Handler>
	...

0800209c <std>:
 800209c:	2300      	movs	r3, #0
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
 80020a2:	e9c0 3300 	strd	r3, r3, [r0]
 80020a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020aa:	6083      	str	r3, [r0, #8]
 80020ac:	8181      	strh	r1, [r0, #12]
 80020ae:	6643      	str	r3, [r0, #100]	; 0x64
 80020b0:	81c2      	strh	r2, [r0, #14]
 80020b2:	6183      	str	r3, [r0, #24]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2208      	movs	r2, #8
 80020b8:	305c      	adds	r0, #92	; 0x5c
 80020ba:	f000 f906 	bl	80022ca <memset>
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <std+0x58>)
 80020c0:	6263      	str	r3, [r4, #36]	; 0x24
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <std+0x5c>)
 80020c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <std+0x60>)
 80020c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <std+0x64>)
 80020cc:	6323      	str	r3, [r4, #48]	; 0x30
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <std+0x68>)
 80020d0:	6224      	str	r4, [r4, #32]
 80020d2:	429c      	cmp	r4, r3
 80020d4:	d006      	beq.n	80020e4 <std+0x48>
 80020d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80020da:	4294      	cmp	r4, r2
 80020dc:	d002      	beq.n	80020e4 <std+0x48>
 80020de:	33d0      	adds	r3, #208	; 0xd0
 80020e0:	429c      	cmp	r4, r3
 80020e2:	d105      	bne.n	80020f0 <std+0x54>
 80020e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ec:	f000 b966 	b.w	80023bc <__retarget_lock_init_recursive>
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	bf00      	nop
 80020f4:	08002245 	.word	0x08002245
 80020f8:	08002267 	.word	0x08002267
 80020fc:	0800229f 	.word	0x0800229f
 8002100:	080022c3 	.word	0x080022c3
 8002104:	2000011c 	.word	0x2000011c

08002108 <stdio_exit_handler>:
 8002108:	4a02      	ldr	r2, [pc, #8]	; (8002114 <stdio_exit_handler+0xc>)
 800210a:	4903      	ldr	r1, [pc, #12]	; (8002118 <stdio_exit_handler+0x10>)
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <stdio_exit_handler+0x14>)
 800210e:	f000 b869 	b.w	80021e4 <_fwalk_sglue>
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c
 8002118:	08002c59 	.word	0x08002c59
 800211c:	20000018 	.word	0x20000018

08002120 <cleanup_stdio>:
 8002120:	6841      	ldr	r1, [r0, #4]
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <cleanup_stdio+0x34>)
 8002124:	4299      	cmp	r1, r3
 8002126:	b510      	push	{r4, lr}
 8002128:	4604      	mov	r4, r0
 800212a:	d001      	beq.n	8002130 <cleanup_stdio+0x10>
 800212c:	f000 fd94 	bl	8002c58 <_fflush_r>
 8002130:	68a1      	ldr	r1, [r4, #8]
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <cleanup_stdio+0x38>)
 8002134:	4299      	cmp	r1, r3
 8002136:	d002      	beq.n	800213e <cleanup_stdio+0x1e>
 8002138:	4620      	mov	r0, r4
 800213a:	f000 fd8d 	bl	8002c58 <_fflush_r>
 800213e:	68e1      	ldr	r1, [r4, #12]
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <cleanup_stdio+0x3c>)
 8002142:	4299      	cmp	r1, r3
 8002144:	d004      	beq.n	8002150 <cleanup_stdio+0x30>
 8002146:	4620      	mov	r0, r4
 8002148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800214c:	f000 bd84 	b.w	8002c58 <_fflush_r>
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop
 8002154:	2000011c 	.word	0x2000011c
 8002158:	20000184 	.word	0x20000184
 800215c:	200001ec 	.word	0x200001ec

08002160 <global_stdio_init.part.0>:
 8002160:	b510      	push	{r4, lr}
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <global_stdio_init.part.0+0x30>)
 8002164:	4c0b      	ldr	r4, [pc, #44]	; (8002194 <global_stdio_init.part.0+0x34>)
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <global_stdio_init.part.0+0x38>)
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4620      	mov	r0, r4
 800216c:	2200      	movs	r2, #0
 800216e:	2104      	movs	r1, #4
 8002170:	f7ff ff94 	bl	800209c <std>
 8002174:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002178:	2201      	movs	r2, #1
 800217a:	2109      	movs	r1, #9
 800217c:	f7ff ff8e 	bl	800209c <std>
 8002180:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002184:	2202      	movs	r2, #2
 8002186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800218a:	2112      	movs	r1, #18
 800218c:	f7ff bf86 	b.w	800209c <std>
 8002190:	20000254 	.word	0x20000254
 8002194:	2000011c 	.word	0x2000011c
 8002198:	08002109 	.word	0x08002109

0800219c <__sfp_lock_acquire>:
 800219c:	4801      	ldr	r0, [pc, #4]	; (80021a4 <__sfp_lock_acquire+0x8>)
 800219e:	f000 b90e 	b.w	80023be <__retarget_lock_acquire_recursive>
 80021a2:	bf00      	nop
 80021a4:	2000025d 	.word	0x2000025d

080021a8 <__sfp_lock_release>:
 80021a8:	4801      	ldr	r0, [pc, #4]	; (80021b0 <__sfp_lock_release+0x8>)
 80021aa:	f000 b909 	b.w	80023c0 <__retarget_lock_release_recursive>
 80021ae:	bf00      	nop
 80021b0:	2000025d 	.word	0x2000025d

080021b4 <__sinit>:
 80021b4:	b510      	push	{r4, lr}
 80021b6:	4604      	mov	r4, r0
 80021b8:	f7ff fff0 	bl	800219c <__sfp_lock_acquire>
 80021bc:	6a23      	ldr	r3, [r4, #32]
 80021be:	b11b      	cbz	r3, 80021c8 <__sinit+0x14>
 80021c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c4:	f7ff bff0 	b.w	80021a8 <__sfp_lock_release>
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__sinit+0x28>)
 80021ca:	6223      	str	r3, [r4, #32]
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__sinit+0x2c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f5      	bne.n	80021c0 <__sinit+0xc>
 80021d4:	f7ff ffc4 	bl	8002160 <global_stdio_init.part.0>
 80021d8:	e7f2      	b.n	80021c0 <__sinit+0xc>
 80021da:	bf00      	nop
 80021dc:	08002121 	.word	0x08002121
 80021e0:	20000254 	.word	0x20000254

080021e4 <_fwalk_sglue>:
 80021e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e8:	4607      	mov	r7, r0
 80021ea:	4688      	mov	r8, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	2600      	movs	r6, #0
 80021f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021f4:	f1b9 0901 	subs.w	r9, r9, #1
 80021f8:	d505      	bpl.n	8002206 <_fwalk_sglue+0x22>
 80021fa:	6824      	ldr	r4, [r4, #0]
 80021fc:	2c00      	cmp	r4, #0
 80021fe:	d1f7      	bne.n	80021f0 <_fwalk_sglue+0xc>
 8002200:	4630      	mov	r0, r6
 8002202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002206:	89ab      	ldrh	r3, [r5, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d907      	bls.n	800221c <_fwalk_sglue+0x38>
 800220c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002210:	3301      	adds	r3, #1
 8002212:	d003      	beq.n	800221c <_fwalk_sglue+0x38>
 8002214:	4629      	mov	r1, r5
 8002216:	4638      	mov	r0, r7
 8002218:	47c0      	blx	r8
 800221a:	4306      	orrs	r6, r0
 800221c:	3568      	adds	r5, #104	; 0x68
 800221e:	e7e9      	b.n	80021f4 <_fwalk_sglue+0x10>

08002220 <iprintf>:
 8002220:	b40f      	push	{r0, r1, r2, r3}
 8002222:	b507      	push	{r0, r1, r2, lr}
 8002224:	4906      	ldr	r1, [pc, #24]	; (8002240 <iprintf+0x20>)
 8002226:	ab04      	add	r3, sp, #16
 8002228:	6808      	ldr	r0, [r1, #0]
 800222a:	f853 2b04 	ldr.w	r2, [r3], #4
 800222e:	6881      	ldr	r1, [r0, #8]
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	f000 f9e5 	bl	8002600 <_vfiprintf_r>
 8002236:	b003      	add	sp, #12
 8002238:	f85d eb04 	ldr.w	lr, [sp], #4
 800223c:	b004      	add	sp, #16
 800223e:	4770      	bx	lr
 8002240:	20000064 	.word	0x20000064

08002244 <__sread>:
 8002244:	b510      	push	{r4, lr}
 8002246:	460c      	mov	r4, r1
 8002248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224c:	f000 f868 	bl	8002320 <_read_r>
 8002250:	2800      	cmp	r0, #0
 8002252:	bfab      	itete	ge
 8002254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002256:	89a3      	ldrhlt	r3, [r4, #12]
 8002258:	181b      	addge	r3, r3, r0
 800225a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800225e:	bfac      	ite	ge
 8002260:	6563      	strge	r3, [r4, #84]	; 0x54
 8002262:	81a3      	strhlt	r3, [r4, #12]
 8002264:	bd10      	pop	{r4, pc}

08002266 <__swrite>:
 8002266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800226a:	461f      	mov	r7, r3
 800226c:	898b      	ldrh	r3, [r1, #12]
 800226e:	05db      	lsls	r3, r3, #23
 8002270:	4605      	mov	r5, r0
 8002272:	460c      	mov	r4, r1
 8002274:	4616      	mov	r6, r2
 8002276:	d505      	bpl.n	8002284 <__swrite+0x1e>
 8002278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227c:	2302      	movs	r3, #2
 800227e:	2200      	movs	r2, #0
 8002280:	f000 f83c 	bl	80022fc <_lseek_r>
 8002284:	89a3      	ldrh	r3, [r4, #12]
 8002286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800228a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228e:	81a3      	strh	r3, [r4, #12]
 8002290:	4632      	mov	r2, r6
 8002292:	463b      	mov	r3, r7
 8002294:	4628      	mov	r0, r5
 8002296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800229a:	f000 b853 	b.w	8002344 <_write_r>

0800229e <__sseek>:
 800229e:	b510      	push	{r4, lr}
 80022a0:	460c      	mov	r4, r1
 80022a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a6:	f000 f829 	bl	80022fc <_lseek_r>
 80022aa:	1c43      	adds	r3, r0, #1
 80022ac:	89a3      	ldrh	r3, [r4, #12]
 80022ae:	bf15      	itete	ne
 80022b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80022b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022ba:	81a3      	strheq	r3, [r4, #12]
 80022bc:	bf18      	it	ne
 80022be:	81a3      	strhne	r3, [r4, #12]
 80022c0:	bd10      	pop	{r4, pc}

080022c2 <__sclose>:
 80022c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c6:	f000 b809 	b.w	80022dc <_close_r>

080022ca <memset>:
 80022ca:	4402      	add	r2, r0
 80022cc:	4603      	mov	r3, r0
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d100      	bne.n	80022d4 <memset+0xa>
 80022d2:	4770      	bx	lr
 80022d4:	f803 1b01 	strb.w	r1, [r3], #1
 80022d8:	e7f9      	b.n	80022ce <memset+0x4>
	...

080022dc <_close_r>:
 80022dc:	b538      	push	{r3, r4, r5, lr}
 80022de:	4d06      	ldr	r5, [pc, #24]	; (80022f8 <_close_r+0x1c>)
 80022e0:	2300      	movs	r3, #0
 80022e2:	4604      	mov	r4, r0
 80022e4:	4608      	mov	r0, r1
 80022e6:	602b      	str	r3, [r5, #0]
 80022e8:	f7ff fddd 	bl	8001ea6 <_close>
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	d102      	bne.n	80022f6 <_close_r+0x1a>
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	b103      	cbz	r3, 80022f6 <_close_r+0x1a>
 80022f4:	6023      	str	r3, [r4, #0]
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
 80022f8:	20000258 	.word	0x20000258

080022fc <_lseek_r>:
 80022fc:	b538      	push	{r3, r4, r5, lr}
 80022fe:	4d07      	ldr	r5, [pc, #28]	; (800231c <_lseek_r+0x20>)
 8002300:	4604      	mov	r4, r0
 8002302:	4608      	mov	r0, r1
 8002304:	4611      	mov	r1, r2
 8002306:	2200      	movs	r2, #0
 8002308:	602a      	str	r2, [r5, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fdef 	bl	8001eee <_lseek>
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	d102      	bne.n	800231a <_lseek_r+0x1e>
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	b103      	cbz	r3, 800231a <_lseek_r+0x1e>
 8002318:	6023      	str	r3, [r4, #0]
 800231a:	bd38      	pop	{r3, r4, r5, pc}
 800231c:	20000258 	.word	0x20000258

08002320 <_read_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4d07      	ldr	r5, [pc, #28]	; (8002340 <_read_r+0x20>)
 8002324:	4604      	mov	r4, r0
 8002326:	4608      	mov	r0, r1
 8002328:	4611      	mov	r1, r2
 800232a:	2200      	movs	r2, #0
 800232c:	602a      	str	r2, [r5, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fd80 	bl	8001e34 <_read>
 8002334:	1c43      	adds	r3, r0, #1
 8002336:	d102      	bne.n	800233e <_read_r+0x1e>
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	b103      	cbz	r3, 800233e <_read_r+0x1e>
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	bd38      	pop	{r3, r4, r5, pc}
 8002340:	20000258 	.word	0x20000258

08002344 <_write_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	4d07      	ldr	r5, [pc, #28]	; (8002364 <_write_r+0x20>)
 8002348:	4604      	mov	r4, r0
 800234a:	4608      	mov	r0, r1
 800234c:	4611      	mov	r1, r2
 800234e:	2200      	movs	r2, #0
 8002350:	602a      	str	r2, [r5, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff fd8b 	bl	8001e6e <_write>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_write_r+0x1e>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_write_r+0x1e>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	20000258 	.word	0x20000258

08002368 <__errno>:
 8002368:	4b01      	ldr	r3, [pc, #4]	; (8002370 <__errno+0x8>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000064 	.word	0x20000064

08002374 <__libc_init_array>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	4d0d      	ldr	r5, [pc, #52]	; (80023ac <__libc_init_array+0x38>)
 8002378:	4c0d      	ldr	r4, [pc, #52]	; (80023b0 <__libc_init_array+0x3c>)
 800237a:	1b64      	subs	r4, r4, r5
 800237c:	10a4      	asrs	r4, r4, #2
 800237e:	2600      	movs	r6, #0
 8002380:	42a6      	cmp	r6, r4
 8002382:	d109      	bne.n	8002398 <__libc_init_array+0x24>
 8002384:	4d0b      	ldr	r5, [pc, #44]	; (80023b4 <__libc_init_array+0x40>)
 8002386:	4c0c      	ldr	r4, [pc, #48]	; (80023b8 <__libc_init_array+0x44>)
 8002388:	f000 fdb8 	bl	8002efc <_init>
 800238c:	1b64      	subs	r4, r4, r5
 800238e:	10a4      	asrs	r4, r4, #2
 8002390:	2600      	movs	r6, #0
 8002392:	42a6      	cmp	r6, r4
 8002394:	d105      	bne.n	80023a2 <__libc_init_array+0x2e>
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	f855 3b04 	ldr.w	r3, [r5], #4
 800239c:	4798      	blx	r3
 800239e:	3601      	adds	r6, #1
 80023a0:	e7ee      	b.n	8002380 <__libc_init_array+0xc>
 80023a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a6:	4798      	blx	r3
 80023a8:	3601      	adds	r6, #1
 80023aa:	e7f2      	b.n	8002392 <__libc_init_array+0x1e>
 80023ac:	08002f74 	.word	0x08002f74
 80023b0:	08002f74 	.word	0x08002f74
 80023b4:	08002f74 	.word	0x08002f74
 80023b8:	08002f78 	.word	0x08002f78

080023bc <__retarget_lock_init_recursive>:
 80023bc:	4770      	bx	lr

080023be <__retarget_lock_acquire_recursive>:
 80023be:	4770      	bx	lr

080023c0 <__retarget_lock_release_recursive>:
 80023c0:	4770      	bx	lr
	...

080023c4 <_free_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4605      	mov	r5, r0
 80023c8:	2900      	cmp	r1, #0
 80023ca:	d041      	beq.n	8002450 <_free_r+0x8c>
 80023cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023d0:	1f0c      	subs	r4, r1, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bfb8      	it	lt
 80023d6:	18e4      	addlt	r4, r4, r3
 80023d8:	f000 f8de 	bl	8002598 <__malloc_lock>
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <_free_r+0x90>)
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	b933      	cbnz	r3, 80023f0 <_free_r+0x2c>
 80023e2:	6063      	str	r3, [r4, #4]
 80023e4:	6014      	str	r4, [r2, #0]
 80023e6:	4628      	mov	r0, r5
 80023e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ec:	f000 b8da 	b.w	80025a4 <__malloc_unlock>
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	d908      	bls.n	8002406 <_free_r+0x42>
 80023f4:	6820      	ldr	r0, [r4, #0]
 80023f6:	1821      	adds	r1, r4, r0
 80023f8:	428b      	cmp	r3, r1
 80023fa:	bf01      	itttt	eq
 80023fc:	6819      	ldreq	r1, [r3, #0]
 80023fe:	685b      	ldreq	r3, [r3, #4]
 8002400:	1809      	addeq	r1, r1, r0
 8002402:	6021      	streq	r1, [r4, #0]
 8002404:	e7ed      	b.n	80023e2 <_free_r+0x1e>
 8002406:	461a      	mov	r2, r3
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b10b      	cbz	r3, 8002410 <_free_r+0x4c>
 800240c:	42a3      	cmp	r3, r4
 800240e:	d9fa      	bls.n	8002406 <_free_r+0x42>
 8002410:	6811      	ldr	r1, [r2, #0]
 8002412:	1850      	adds	r0, r2, r1
 8002414:	42a0      	cmp	r0, r4
 8002416:	d10b      	bne.n	8002430 <_free_r+0x6c>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	4401      	add	r1, r0
 800241c:	1850      	adds	r0, r2, r1
 800241e:	4283      	cmp	r3, r0
 8002420:	6011      	str	r1, [r2, #0]
 8002422:	d1e0      	bne.n	80023e6 <_free_r+0x22>
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	6053      	str	r3, [r2, #4]
 800242a:	4408      	add	r0, r1
 800242c:	6010      	str	r0, [r2, #0]
 800242e:	e7da      	b.n	80023e6 <_free_r+0x22>
 8002430:	d902      	bls.n	8002438 <_free_r+0x74>
 8002432:	230c      	movs	r3, #12
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	e7d6      	b.n	80023e6 <_free_r+0x22>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	1821      	adds	r1, r4, r0
 800243c:	428b      	cmp	r3, r1
 800243e:	bf04      	itt	eq
 8002440:	6819      	ldreq	r1, [r3, #0]
 8002442:	685b      	ldreq	r3, [r3, #4]
 8002444:	6063      	str	r3, [r4, #4]
 8002446:	bf04      	itt	eq
 8002448:	1809      	addeq	r1, r1, r0
 800244a:	6021      	streq	r1, [r4, #0]
 800244c:	6054      	str	r4, [r2, #4]
 800244e:	e7ca      	b.n	80023e6 <_free_r+0x22>
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20000260 	.word	0x20000260

08002458 <sbrk_aligned>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	4e0e      	ldr	r6, [pc, #56]	; (8002494 <sbrk_aligned+0x3c>)
 800245c:	460c      	mov	r4, r1
 800245e:	6831      	ldr	r1, [r6, #0]
 8002460:	4605      	mov	r5, r0
 8002462:	b911      	cbnz	r1, 800246a <sbrk_aligned+0x12>
 8002464:	f000 fcb6 	bl	8002dd4 <_sbrk_r>
 8002468:	6030      	str	r0, [r6, #0]
 800246a:	4621      	mov	r1, r4
 800246c:	4628      	mov	r0, r5
 800246e:	f000 fcb1 	bl	8002dd4 <_sbrk_r>
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d00a      	beq.n	800248c <sbrk_aligned+0x34>
 8002476:	1cc4      	adds	r4, r0, #3
 8002478:	f024 0403 	bic.w	r4, r4, #3
 800247c:	42a0      	cmp	r0, r4
 800247e:	d007      	beq.n	8002490 <sbrk_aligned+0x38>
 8002480:	1a21      	subs	r1, r4, r0
 8002482:	4628      	mov	r0, r5
 8002484:	f000 fca6 	bl	8002dd4 <_sbrk_r>
 8002488:	3001      	adds	r0, #1
 800248a:	d101      	bne.n	8002490 <sbrk_aligned+0x38>
 800248c:	f04f 34ff 	mov.w	r4, #4294967295
 8002490:	4620      	mov	r0, r4
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	20000264 	.word	0x20000264

08002498 <_malloc_r>:
 8002498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800249c:	1ccd      	adds	r5, r1, #3
 800249e:	f025 0503 	bic.w	r5, r5, #3
 80024a2:	3508      	adds	r5, #8
 80024a4:	2d0c      	cmp	r5, #12
 80024a6:	bf38      	it	cc
 80024a8:	250c      	movcc	r5, #12
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	4607      	mov	r7, r0
 80024ae:	db01      	blt.n	80024b4 <_malloc_r+0x1c>
 80024b0:	42a9      	cmp	r1, r5
 80024b2:	d905      	bls.n	80024c0 <_malloc_r+0x28>
 80024b4:	230c      	movs	r3, #12
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	2600      	movs	r6, #0
 80024ba:	4630      	mov	r0, r6
 80024bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002594 <_malloc_r+0xfc>
 80024c4:	f000 f868 	bl	8002598 <__malloc_lock>
 80024c8:	f8d8 3000 	ldr.w	r3, [r8]
 80024cc:	461c      	mov	r4, r3
 80024ce:	bb5c      	cbnz	r4, 8002528 <_malloc_r+0x90>
 80024d0:	4629      	mov	r1, r5
 80024d2:	4638      	mov	r0, r7
 80024d4:	f7ff ffc0 	bl	8002458 <sbrk_aligned>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	4604      	mov	r4, r0
 80024dc:	d155      	bne.n	800258a <_malloc_r+0xf2>
 80024de:	f8d8 4000 	ldr.w	r4, [r8]
 80024e2:	4626      	mov	r6, r4
 80024e4:	2e00      	cmp	r6, #0
 80024e6:	d145      	bne.n	8002574 <_malloc_r+0xdc>
 80024e8:	2c00      	cmp	r4, #0
 80024ea:	d048      	beq.n	800257e <_malloc_r+0xe6>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	4631      	mov	r1, r6
 80024f0:	4638      	mov	r0, r7
 80024f2:	eb04 0903 	add.w	r9, r4, r3
 80024f6:	f000 fc6d 	bl	8002dd4 <_sbrk_r>
 80024fa:	4581      	cmp	r9, r0
 80024fc:	d13f      	bne.n	800257e <_malloc_r+0xe6>
 80024fe:	6821      	ldr	r1, [r4, #0]
 8002500:	1a6d      	subs	r5, r5, r1
 8002502:	4629      	mov	r1, r5
 8002504:	4638      	mov	r0, r7
 8002506:	f7ff ffa7 	bl	8002458 <sbrk_aligned>
 800250a:	3001      	adds	r0, #1
 800250c:	d037      	beq.n	800257e <_malloc_r+0xe6>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	442b      	add	r3, r5
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	f8d8 3000 	ldr.w	r3, [r8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d038      	beq.n	800258e <_malloc_r+0xf6>
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	42a2      	cmp	r2, r4
 8002520:	d12b      	bne.n	800257a <_malloc_r+0xe2>
 8002522:	2200      	movs	r2, #0
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	e00f      	b.n	8002548 <_malloc_r+0xb0>
 8002528:	6822      	ldr	r2, [r4, #0]
 800252a:	1b52      	subs	r2, r2, r5
 800252c:	d41f      	bmi.n	800256e <_malloc_r+0xd6>
 800252e:	2a0b      	cmp	r2, #11
 8002530:	d917      	bls.n	8002562 <_malloc_r+0xca>
 8002532:	1961      	adds	r1, r4, r5
 8002534:	42a3      	cmp	r3, r4
 8002536:	6025      	str	r5, [r4, #0]
 8002538:	bf18      	it	ne
 800253a:	6059      	strne	r1, [r3, #4]
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	bf08      	it	eq
 8002540:	f8c8 1000 	streq.w	r1, [r8]
 8002544:	5162      	str	r2, [r4, r5]
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	4638      	mov	r0, r7
 800254a:	f104 060b 	add.w	r6, r4, #11
 800254e:	f000 f829 	bl	80025a4 <__malloc_unlock>
 8002552:	f026 0607 	bic.w	r6, r6, #7
 8002556:	1d23      	adds	r3, r4, #4
 8002558:	1af2      	subs	r2, r6, r3
 800255a:	d0ae      	beq.n	80024ba <_malloc_r+0x22>
 800255c:	1b9b      	subs	r3, r3, r6
 800255e:	50a3      	str	r3, [r4, r2]
 8002560:	e7ab      	b.n	80024ba <_malloc_r+0x22>
 8002562:	42a3      	cmp	r3, r4
 8002564:	6862      	ldr	r2, [r4, #4]
 8002566:	d1dd      	bne.n	8002524 <_malloc_r+0x8c>
 8002568:	f8c8 2000 	str.w	r2, [r8]
 800256c:	e7ec      	b.n	8002548 <_malloc_r+0xb0>
 800256e:	4623      	mov	r3, r4
 8002570:	6864      	ldr	r4, [r4, #4]
 8002572:	e7ac      	b.n	80024ce <_malloc_r+0x36>
 8002574:	4634      	mov	r4, r6
 8002576:	6876      	ldr	r6, [r6, #4]
 8002578:	e7b4      	b.n	80024e4 <_malloc_r+0x4c>
 800257a:	4613      	mov	r3, r2
 800257c:	e7cc      	b.n	8002518 <_malloc_r+0x80>
 800257e:	230c      	movs	r3, #12
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	4638      	mov	r0, r7
 8002584:	f000 f80e 	bl	80025a4 <__malloc_unlock>
 8002588:	e797      	b.n	80024ba <_malloc_r+0x22>
 800258a:	6025      	str	r5, [r4, #0]
 800258c:	e7dc      	b.n	8002548 <_malloc_r+0xb0>
 800258e:	605b      	str	r3, [r3, #4]
 8002590:	deff      	udf	#255	; 0xff
 8002592:	bf00      	nop
 8002594:	20000260 	.word	0x20000260

08002598 <__malloc_lock>:
 8002598:	4801      	ldr	r0, [pc, #4]	; (80025a0 <__malloc_lock+0x8>)
 800259a:	f7ff bf10 	b.w	80023be <__retarget_lock_acquire_recursive>
 800259e:	bf00      	nop
 80025a0:	2000025c 	.word	0x2000025c

080025a4 <__malloc_unlock>:
 80025a4:	4801      	ldr	r0, [pc, #4]	; (80025ac <__malloc_unlock+0x8>)
 80025a6:	f7ff bf0b 	b.w	80023c0 <__retarget_lock_release_recursive>
 80025aa:	bf00      	nop
 80025ac:	2000025c 	.word	0x2000025c

080025b0 <__sfputc_r>:
 80025b0:	6893      	ldr	r3, [r2, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	b410      	push	{r4}
 80025b8:	6093      	str	r3, [r2, #8]
 80025ba:	da07      	bge.n	80025cc <__sfputc_r+0x1c>
 80025bc:	6994      	ldr	r4, [r2, #24]
 80025be:	42a3      	cmp	r3, r4
 80025c0:	db01      	blt.n	80025c6 <__sfputc_r+0x16>
 80025c2:	290a      	cmp	r1, #10
 80025c4:	d102      	bne.n	80025cc <__sfputc_r+0x1c>
 80025c6:	bc10      	pop	{r4}
 80025c8:	f000 bb6e 	b.w	8002ca8 <__swbuf_r>
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	1c58      	adds	r0, r3, #1
 80025d0:	6010      	str	r0, [r2, #0]
 80025d2:	7019      	strb	r1, [r3, #0]
 80025d4:	4608      	mov	r0, r1
 80025d6:	bc10      	pop	{r4}
 80025d8:	4770      	bx	lr

080025da <__sfputs_r>:
 80025da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025dc:	4606      	mov	r6, r0
 80025de:	460f      	mov	r7, r1
 80025e0:	4614      	mov	r4, r2
 80025e2:	18d5      	adds	r5, r2, r3
 80025e4:	42ac      	cmp	r4, r5
 80025e6:	d101      	bne.n	80025ec <__sfputs_r+0x12>
 80025e8:	2000      	movs	r0, #0
 80025ea:	e007      	b.n	80025fc <__sfputs_r+0x22>
 80025ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025f0:	463a      	mov	r2, r7
 80025f2:	4630      	mov	r0, r6
 80025f4:	f7ff ffdc 	bl	80025b0 <__sfputc_r>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	d1f3      	bne.n	80025e4 <__sfputs_r+0xa>
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002600 <_vfiprintf_r>:
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002604:	460d      	mov	r5, r1
 8002606:	b09d      	sub	sp, #116	; 0x74
 8002608:	4614      	mov	r4, r2
 800260a:	4698      	mov	r8, r3
 800260c:	4606      	mov	r6, r0
 800260e:	b118      	cbz	r0, 8002618 <_vfiprintf_r+0x18>
 8002610:	6a03      	ldr	r3, [r0, #32]
 8002612:	b90b      	cbnz	r3, 8002618 <_vfiprintf_r+0x18>
 8002614:	f7ff fdce 	bl	80021b4 <__sinit>
 8002618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800261a:	07d9      	lsls	r1, r3, #31
 800261c:	d405      	bmi.n	800262a <_vfiprintf_r+0x2a>
 800261e:	89ab      	ldrh	r3, [r5, #12]
 8002620:	059a      	lsls	r2, r3, #22
 8002622:	d402      	bmi.n	800262a <_vfiprintf_r+0x2a>
 8002624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002626:	f7ff feca 	bl	80023be <__retarget_lock_acquire_recursive>
 800262a:	89ab      	ldrh	r3, [r5, #12]
 800262c:	071b      	lsls	r3, r3, #28
 800262e:	d501      	bpl.n	8002634 <_vfiprintf_r+0x34>
 8002630:	692b      	ldr	r3, [r5, #16]
 8002632:	b99b      	cbnz	r3, 800265c <_vfiprintf_r+0x5c>
 8002634:	4629      	mov	r1, r5
 8002636:	4630      	mov	r0, r6
 8002638:	f000 fb74 	bl	8002d24 <__swsetup_r>
 800263c:	b170      	cbz	r0, 800265c <_vfiprintf_r+0x5c>
 800263e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002640:	07dc      	lsls	r4, r3, #31
 8002642:	d504      	bpl.n	800264e <_vfiprintf_r+0x4e>
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	b01d      	add	sp, #116	; 0x74
 800264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264e:	89ab      	ldrh	r3, [r5, #12]
 8002650:	0598      	lsls	r0, r3, #22
 8002652:	d4f7      	bmi.n	8002644 <_vfiprintf_r+0x44>
 8002654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002656:	f7ff feb3 	bl	80023c0 <__retarget_lock_release_recursive>
 800265a:	e7f3      	b.n	8002644 <_vfiprintf_r+0x44>
 800265c:	2300      	movs	r3, #0
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	2320      	movs	r3, #32
 8002662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002666:	f8cd 800c 	str.w	r8, [sp, #12]
 800266a:	2330      	movs	r3, #48	; 0x30
 800266c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002820 <_vfiprintf_r+0x220>
 8002670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002674:	f04f 0901 	mov.w	r9, #1
 8002678:	4623      	mov	r3, r4
 800267a:	469a      	mov	sl, r3
 800267c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002680:	b10a      	cbz	r2, 8002686 <_vfiprintf_r+0x86>
 8002682:	2a25      	cmp	r2, #37	; 0x25
 8002684:	d1f9      	bne.n	800267a <_vfiprintf_r+0x7a>
 8002686:	ebba 0b04 	subs.w	fp, sl, r4
 800268a:	d00b      	beq.n	80026a4 <_vfiprintf_r+0xa4>
 800268c:	465b      	mov	r3, fp
 800268e:	4622      	mov	r2, r4
 8002690:	4629      	mov	r1, r5
 8002692:	4630      	mov	r0, r6
 8002694:	f7ff ffa1 	bl	80025da <__sfputs_r>
 8002698:	3001      	adds	r0, #1
 800269a:	f000 80a9 	beq.w	80027f0 <_vfiprintf_r+0x1f0>
 800269e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a0:	445a      	add	r2, fp
 80026a2:	9209      	str	r2, [sp, #36]	; 0x24
 80026a4:	f89a 3000 	ldrb.w	r3, [sl]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a1 	beq.w	80027f0 <_vfiprintf_r+0x1f0>
 80026ae:	2300      	movs	r3, #0
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026b8:	f10a 0a01 	add.w	sl, sl, #1
 80026bc:	9304      	str	r3, [sp, #16]
 80026be:	9307      	str	r3, [sp, #28]
 80026c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026c4:	931a      	str	r3, [sp, #104]	; 0x68
 80026c6:	4654      	mov	r4, sl
 80026c8:	2205      	movs	r2, #5
 80026ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ce:	4854      	ldr	r0, [pc, #336]	; (8002820 <_vfiprintf_r+0x220>)
 80026d0:	f7fd fd8e 	bl	80001f0 <memchr>
 80026d4:	9a04      	ldr	r2, [sp, #16]
 80026d6:	b9d8      	cbnz	r0, 8002710 <_vfiprintf_r+0x110>
 80026d8:	06d1      	lsls	r1, r2, #27
 80026da:	bf44      	itt	mi
 80026dc:	2320      	movmi	r3, #32
 80026de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026e2:	0713      	lsls	r3, r2, #28
 80026e4:	bf44      	itt	mi
 80026e6:	232b      	movmi	r3, #43	; 0x2b
 80026e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ec:	f89a 3000 	ldrb.w	r3, [sl]
 80026f0:	2b2a      	cmp	r3, #42	; 0x2a
 80026f2:	d015      	beq.n	8002720 <_vfiprintf_r+0x120>
 80026f4:	9a07      	ldr	r2, [sp, #28]
 80026f6:	4654      	mov	r4, sl
 80026f8:	2000      	movs	r0, #0
 80026fa:	f04f 0c0a 	mov.w	ip, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002704:	3b30      	subs	r3, #48	; 0x30
 8002706:	2b09      	cmp	r3, #9
 8002708:	d94d      	bls.n	80027a6 <_vfiprintf_r+0x1a6>
 800270a:	b1b0      	cbz	r0, 800273a <_vfiprintf_r+0x13a>
 800270c:	9207      	str	r2, [sp, #28]
 800270e:	e014      	b.n	800273a <_vfiprintf_r+0x13a>
 8002710:	eba0 0308 	sub.w	r3, r0, r8
 8002714:	fa09 f303 	lsl.w	r3, r9, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	9304      	str	r3, [sp, #16]
 800271c:	46a2      	mov	sl, r4
 800271e:	e7d2      	b.n	80026c6 <_vfiprintf_r+0xc6>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	1d19      	adds	r1, r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	9103      	str	r1, [sp, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bfbb      	ittet	lt
 800272c:	425b      	neglt	r3, r3
 800272e:	f042 0202 	orrlt.w	r2, r2, #2
 8002732:	9307      	strge	r3, [sp, #28]
 8002734:	9307      	strlt	r3, [sp, #28]
 8002736:	bfb8      	it	lt
 8002738:	9204      	strlt	r2, [sp, #16]
 800273a:	7823      	ldrb	r3, [r4, #0]
 800273c:	2b2e      	cmp	r3, #46	; 0x2e
 800273e:	d10c      	bne.n	800275a <_vfiprintf_r+0x15a>
 8002740:	7863      	ldrb	r3, [r4, #1]
 8002742:	2b2a      	cmp	r3, #42	; 0x2a
 8002744:	d134      	bne.n	80027b0 <_vfiprintf_r+0x1b0>
 8002746:	9b03      	ldr	r3, [sp, #12]
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	9203      	str	r2, [sp, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	f04f 33ff 	movlt.w	r3, #4294967295
 8002756:	3402      	adds	r4, #2
 8002758:	9305      	str	r3, [sp, #20]
 800275a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002824 <_vfiprintf_r+0x224>
 800275e:	7821      	ldrb	r1, [r4, #0]
 8002760:	2203      	movs	r2, #3
 8002762:	4650      	mov	r0, sl
 8002764:	f7fd fd44 	bl	80001f0 <memchr>
 8002768:	b138      	cbz	r0, 800277a <_vfiprintf_r+0x17a>
 800276a:	9b04      	ldr	r3, [sp, #16]
 800276c:	eba0 000a 	sub.w	r0, r0, sl
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4082      	lsls	r2, r0
 8002774:	4313      	orrs	r3, r2
 8002776:	3401      	adds	r4, #1
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277e:	482a      	ldr	r0, [pc, #168]	; (8002828 <_vfiprintf_r+0x228>)
 8002780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002784:	2206      	movs	r2, #6
 8002786:	f7fd fd33 	bl	80001f0 <memchr>
 800278a:	2800      	cmp	r0, #0
 800278c:	d03f      	beq.n	800280e <_vfiprintf_r+0x20e>
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <_vfiprintf_r+0x22c>)
 8002790:	bb1b      	cbnz	r3, 80027da <_vfiprintf_r+0x1da>
 8002792:	9b03      	ldr	r3, [sp, #12]
 8002794:	3307      	adds	r3, #7
 8002796:	f023 0307 	bic.w	r3, r3, #7
 800279a:	3308      	adds	r3, #8
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027a0:	443b      	add	r3, r7
 80027a2:	9309      	str	r3, [sp, #36]	; 0x24
 80027a4:	e768      	b.n	8002678 <_vfiprintf_r+0x78>
 80027a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80027aa:	460c      	mov	r4, r1
 80027ac:	2001      	movs	r0, #1
 80027ae:	e7a6      	b.n	80026fe <_vfiprintf_r+0xfe>
 80027b0:	2300      	movs	r3, #0
 80027b2:	3401      	adds	r4, #1
 80027b4:	9305      	str	r3, [sp, #20]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 0c0a 	mov.w	ip, #10
 80027bc:	4620      	mov	r0, r4
 80027be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027c2:	3a30      	subs	r2, #48	; 0x30
 80027c4:	2a09      	cmp	r2, #9
 80027c6:	d903      	bls.n	80027d0 <_vfiprintf_r+0x1d0>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0c6      	beq.n	800275a <_vfiprintf_r+0x15a>
 80027cc:	9105      	str	r1, [sp, #20]
 80027ce:	e7c4      	b.n	800275a <_vfiprintf_r+0x15a>
 80027d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80027d4:	4604      	mov	r4, r0
 80027d6:	2301      	movs	r3, #1
 80027d8:	e7f0      	b.n	80027bc <_vfiprintf_r+0x1bc>
 80027da:	ab03      	add	r3, sp, #12
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	462a      	mov	r2, r5
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_vfiprintf_r+0x230>)
 80027e2:	a904      	add	r1, sp, #16
 80027e4:	4630      	mov	r0, r6
 80027e6:	f3af 8000 	nop.w
 80027ea:	4607      	mov	r7, r0
 80027ec:	1c78      	adds	r0, r7, #1
 80027ee:	d1d6      	bne.n	800279e <_vfiprintf_r+0x19e>
 80027f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f2:	07d9      	lsls	r1, r3, #31
 80027f4:	d405      	bmi.n	8002802 <_vfiprintf_r+0x202>
 80027f6:	89ab      	ldrh	r3, [r5, #12]
 80027f8:	059a      	lsls	r2, r3, #22
 80027fa:	d402      	bmi.n	8002802 <_vfiprintf_r+0x202>
 80027fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027fe:	f7ff fddf 	bl	80023c0 <__retarget_lock_release_recursive>
 8002802:	89ab      	ldrh	r3, [r5, #12]
 8002804:	065b      	lsls	r3, r3, #25
 8002806:	f53f af1d 	bmi.w	8002644 <_vfiprintf_r+0x44>
 800280a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280c:	e71c      	b.n	8002648 <_vfiprintf_r+0x48>
 800280e:	ab03      	add	r3, sp, #12
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	462a      	mov	r2, r5
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <_vfiprintf_r+0x230>)
 8002816:	a904      	add	r1, sp, #16
 8002818:	4630      	mov	r0, r6
 800281a:	f000 f879 	bl	8002910 <_printf_i>
 800281e:	e7e4      	b.n	80027ea <_vfiprintf_r+0x1ea>
 8002820:	08002f38 	.word	0x08002f38
 8002824:	08002f3e 	.word	0x08002f3e
 8002828:	08002f42 	.word	0x08002f42
 800282c:	00000000 	.word	0x00000000
 8002830:	080025db 	.word	0x080025db

08002834 <_printf_common>:
 8002834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002838:	4616      	mov	r6, r2
 800283a:	4699      	mov	r9, r3
 800283c:	688a      	ldr	r2, [r1, #8]
 800283e:	690b      	ldr	r3, [r1, #16]
 8002840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002844:	4293      	cmp	r3, r2
 8002846:	bfb8      	it	lt
 8002848:	4613      	movlt	r3, r2
 800284a:	6033      	str	r3, [r6, #0]
 800284c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002850:	4607      	mov	r7, r0
 8002852:	460c      	mov	r4, r1
 8002854:	b10a      	cbz	r2, 800285a <_printf_common+0x26>
 8002856:	3301      	adds	r3, #1
 8002858:	6033      	str	r3, [r6, #0]
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	0699      	lsls	r1, r3, #26
 800285e:	bf42      	ittt	mi
 8002860:	6833      	ldrmi	r3, [r6, #0]
 8002862:	3302      	addmi	r3, #2
 8002864:	6033      	strmi	r3, [r6, #0]
 8002866:	6825      	ldr	r5, [r4, #0]
 8002868:	f015 0506 	ands.w	r5, r5, #6
 800286c:	d106      	bne.n	800287c <_printf_common+0x48>
 800286e:	f104 0a19 	add.w	sl, r4, #25
 8002872:	68e3      	ldr	r3, [r4, #12]
 8002874:	6832      	ldr	r2, [r6, #0]
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	42ab      	cmp	r3, r5
 800287a:	dc26      	bgt.n	80028ca <_printf_common+0x96>
 800287c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002880:	1e13      	subs	r3, r2, #0
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	bf18      	it	ne
 8002886:	2301      	movne	r3, #1
 8002888:	0692      	lsls	r2, r2, #26
 800288a:	d42b      	bmi.n	80028e4 <_printf_common+0xb0>
 800288c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002890:	4649      	mov	r1, r9
 8002892:	4638      	mov	r0, r7
 8002894:	47c0      	blx	r8
 8002896:	3001      	adds	r0, #1
 8002898:	d01e      	beq.n	80028d8 <_printf_common+0xa4>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	6922      	ldr	r2, [r4, #16]
 800289e:	f003 0306 	and.w	r3, r3, #6
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf02      	ittt	eq
 80028a6:	68e5      	ldreq	r5, [r4, #12]
 80028a8:	6833      	ldreq	r3, [r6, #0]
 80028aa:	1aed      	subeq	r5, r5, r3
 80028ac:	68a3      	ldr	r3, [r4, #8]
 80028ae:	bf0c      	ite	eq
 80028b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028b4:	2500      	movne	r5, #0
 80028b6:	4293      	cmp	r3, r2
 80028b8:	bfc4      	itt	gt
 80028ba:	1a9b      	subgt	r3, r3, r2
 80028bc:	18ed      	addgt	r5, r5, r3
 80028be:	2600      	movs	r6, #0
 80028c0:	341a      	adds	r4, #26
 80028c2:	42b5      	cmp	r5, r6
 80028c4:	d11a      	bne.n	80028fc <_printf_common+0xc8>
 80028c6:	2000      	movs	r0, #0
 80028c8:	e008      	b.n	80028dc <_printf_common+0xa8>
 80028ca:	2301      	movs	r3, #1
 80028cc:	4652      	mov	r2, sl
 80028ce:	4649      	mov	r1, r9
 80028d0:	4638      	mov	r0, r7
 80028d2:	47c0      	blx	r8
 80028d4:	3001      	adds	r0, #1
 80028d6:	d103      	bne.n	80028e0 <_printf_common+0xac>
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e0:	3501      	adds	r5, #1
 80028e2:	e7c6      	b.n	8002872 <_printf_common+0x3e>
 80028e4:	18e1      	adds	r1, r4, r3
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	2030      	movs	r0, #48	; 0x30
 80028ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ee:	4422      	add	r2, r4
 80028f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028f8:	3302      	adds	r3, #2
 80028fa:	e7c7      	b.n	800288c <_printf_common+0x58>
 80028fc:	2301      	movs	r3, #1
 80028fe:	4622      	mov	r2, r4
 8002900:	4649      	mov	r1, r9
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d0e6      	beq.n	80028d8 <_printf_common+0xa4>
 800290a:	3601      	adds	r6, #1
 800290c:	e7d9      	b.n	80028c2 <_printf_common+0x8e>
	...

08002910 <_printf_i>:
 8002910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002914:	7e0f      	ldrb	r7, [r1, #24]
 8002916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002918:	2f78      	cmp	r7, #120	; 0x78
 800291a:	4691      	mov	r9, r2
 800291c:	4680      	mov	r8, r0
 800291e:	460c      	mov	r4, r1
 8002920:	469a      	mov	sl, r3
 8002922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002926:	d807      	bhi.n	8002938 <_printf_i+0x28>
 8002928:	2f62      	cmp	r7, #98	; 0x62
 800292a:	d80a      	bhi.n	8002942 <_printf_i+0x32>
 800292c:	2f00      	cmp	r7, #0
 800292e:	f000 80d4 	beq.w	8002ada <_printf_i+0x1ca>
 8002932:	2f58      	cmp	r7, #88	; 0x58
 8002934:	f000 80c0 	beq.w	8002ab8 <_printf_i+0x1a8>
 8002938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800293c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002940:	e03a      	b.n	80029b8 <_printf_i+0xa8>
 8002942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002946:	2b15      	cmp	r3, #21
 8002948:	d8f6      	bhi.n	8002938 <_printf_i+0x28>
 800294a:	a101      	add	r1, pc, #4	; (adr r1, 8002950 <_printf_i+0x40>)
 800294c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029bd 	.word	0x080029bd
 8002958:	08002939 	.word	0x08002939
 800295c:	08002939 	.word	0x08002939
 8002960:	08002939 	.word	0x08002939
 8002964:	08002939 	.word	0x08002939
 8002968:	080029bd 	.word	0x080029bd
 800296c:	08002939 	.word	0x08002939
 8002970:	08002939 	.word	0x08002939
 8002974:	08002939 	.word	0x08002939
 8002978:	08002939 	.word	0x08002939
 800297c:	08002ac1 	.word	0x08002ac1
 8002980:	080029e9 	.word	0x080029e9
 8002984:	08002a7b 	.word	0x08002a7b
 8002988:	08002939 	.word	0x08002939
 800298c:	08002939 	.word	0x08002939
 8002990:	08002ae3 	.word	0x08002ae3
 8002994:	08002939 	.word	0x08002939
 8002998:	080029e9 	.word	0x080029e9
 800299c:	08002939 	.word	0x08002939
 80029a0:	08002939 	.word	0x08002939
 80029a4:	08002a83 	.word	0x08002a83
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	602a      	str	r2, [r5, #0]
 80029b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029b8:	2301      	movs	r3, #1
 80029ba:	e09f      	b.n	8002afc <_printf_i+0x1ec>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	682b      	ldr	r3, [r5, #0]
 80029c0:	0607      	lsls	r7, r0, #24
 80029c2:	f103 0104 	add.w	r1, r3, #4
 80029c6:	6029      	str	r1, [r5, #0]
 80029c8:	d501      	bpl.n	80029ce <_printf_i+0xbe>
 80029ca:	681e      	ldr	r6, [r3, #0]
 80029cc:	e003      	b.n	80029d6 <_printf_i+0xc6>
 80029ce:	0646      	lsls	r6, r0, #25
 80029d0:	d5fb      	bpl.n	80029ca <_printf_i+0xba>
 80029d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	da03      	bge.n	80029e2 <_printf_i+0xd2>
 80029da:	232d      	movs	r3, #45	; 0x2d
 80029dc:	4276      	negs	r6, r6
 80029de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e2:	485a      	ldr	r0, [pc, #360]	; (8002b4c <_printf_i+0x23c>)
 80029e4:	230a      	movs	r3, #10
 80029e6:	e012      	b.n	8002a0e <_printf_i+0xfe>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	1d19      	adds	r1, r3, #4
 80029ee:	6029      	str	r1, [r5, #0]
 80029f0:	0605      	lsls	r5, r0, #24
 80029f2:	d501      	bpl.n	80029f8 <_printf_i+0xe8>
 80029f4:	681e      	ldr	r6, [r3, #0]
 80029f6:	e002      	b.n	80029fe <_printf_i+0xee>
 80029f8:	0641      	lsls	r1, r0, #25
 80029fa:	d5fb      	bpl.n	80029f4 <_printf_i+0xe4>
 80029fc:	881e      	ldrh	r6, [r3, #0]
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <_printf_i+0x23c>)
 8002a00:	2f6f      	cmp	r7, #111	; 0x6f
 8002a02:	bf0c      	ite	eq
 8002a04:	2308      	moveq	r3, #8
 8002a06:	230a      	movne	r3, #10
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a0e:	6865      	ldr	r5, [r4, #4]
 8002a10:	60a5      	str	r5, [r4, #8]
 8002a12:	2d00      	cmp	r5, #0
 8002a14:	bfa2      	ittt	ge
 8002a16:	6821      	ldrge	r1, [r4, #0]
 8002a18:	f021 0104 	bicge.w	r1, r1, #4
 8002a1c:	6021      	strge	r1, [r4, #0]
 8002a1e:	b90e      	cbnz	r6, 8002a24 <_printf_i+0x114>
 8002a20:	2d00      	cmp	r5, #0
 8002a22:	d04b      	beq.n	8002abc <_printf_i+0x1ac>
 8002a24:	4615      	mov	r5, r2
 8002a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8002a2e:	5dc7      	ldrb	r7, [r0, r7]
 8002a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a34:	4637      	mov	r7, r6
 8002a36:	42bb      	cmp	r3, r7
 8002a38:	460e      	mov	r6, r1
 8002a3a:	d9f4      	bls.n	8002a26 <_printf_i+0x116>
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d10b      	bne.n	8002a58 <_printf_i+0x148>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	07de      	lsls	r6, r3, #31
 8002a44:	d508      	bpl.n	8002a58 <_printf_i+0x148>
 8002a46:	6923      	ldr	r3, [r4, #16]
 8002a48:	6861      	ldr	r1, [r4, #4]
 8002a4a:	4299      	cmp	r1, r3
 8002a4c:	bfde      	ittt	le
 8002a4e:	2330      	movle	r3, #48	; 0x30
 8002a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a58:	1b52      	subs	r2, r2, r5
 8002a5a:	6122      	str	r2, [r4, #16]
 8002a5c:	f8cd a000 	str.w	sl, [sp]
 8002a60:	464b      	mov	r3, r9
 8002a62:	aa03      	add	r2, sp, #12
 8002a64:	4621      	mov	r1, r4
 8002a66:	4640      	mov	r0, r8
 8002a68:	f7ff fee4 	bl	8002834 <_printf_common>
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d14a      	bne.n	8002b06 <_printf_i+0x1f6>
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	b004      	add	sp, #16
 8002a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	4833      	ldr	r0, [pc, #204]	; (8002b50 <_printf_i+0x240>)
 8002a84:	2778      	movs	r7, #120	; 0x78
 8002a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	6829      	ldr	r1, [r5, #0]
 8002a8e:	061f      	lsls	r7, r3, #24
 8002a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a94:	d402      	bmi.n	8002a9c <_printf_i+0x18c>
 8002a96:	065f      	lsls	r7, r3, #25
 8002a98:	bf48      	it	mi
 8002a9a:	b2b6      	uxthmi	r6, r6
 8002a9c:	07df      	lsls	r7, r3, #31
 8002a9e:	bf48      	it	mi
 8002aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8002aa4:	6029      	str	r1, [r5, #0]
 8002aa6:	bf48      	it	mi
 8002aa8:	6023      	strmi	r3, [r4, #0]
 8002aaa:	b91e      	cbnz	r6, 8002ab4 <_printf_i+0x1a4>
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	f023 0320 	bic.w	r3, r3, #32
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	e7a7      	b.n	8002a08 <_printf_i+0xf8>
 8002ab8:	4824      	ldr	r0, [pc, #144]	; (8002b4c <_printf_i+0x23c>)
 8002aba:	e7e4      	b.n	8002a86 <_printf_i+0x176>
 8002abc:	4615      	mov	r5, r2
 8002abe:	e7bd      	b.n	8002a3c <_printf_i+0x12c>
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	6826      	ldr	r6, [r4, #0]
 8002ac4:	6961      	ldr	r1, [r4, #20]
 8002ac6:	1d18      	adds	r0, r3, #4
 8002ac8:	6028      	str	r0, [r5, #0]
 8002aca:	0635      	lsls	r5, r6, #24
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	d501      	bpl.n	8002ad4 <_printf_i+0x1c4>
 8002ad0:	6019      	str	r1, [r3, #0]
 8002ad2:	e002      	b.n	8002ada <_printf_i+0x1ca>
 8002ad4:	0670      	lsls	r0, r6, #25
 8002ad6:	d5fb      	bpl.n	8002ad0 <_printf_i+0x1c0>
 8002ad8:	8019      	strh	r1, [r3, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	6123      	str	r3, [r4, #16]
 8002ade:	4615      	mov	r5, r2
 8002ae0:	e7bc      	b.n	8002a5c <_printf_i+0x14c>
 8002ae2:	682b      	ldr	r3, [r5, #0]
 8002ae4:	1d1a      	adds	r2, r3, #4
 8002ae6:	602a      	str	r2, [r5, #0]
 8002ae8:	681d      	ldr	r5, [r3, #0]
 8002aea:	6862      	ldr	r2, [r4, #4]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4628      	mov	r0, r5
 8002af0:	f7fd fb7e 	bl	80001f0 <memchr>
 8002af4:	b108      	cbz	r0, 8002afa <_printf_i+0x1ea>
 8002af6:	1b40      	subs	r0, r0, r5
 8002af8:	6060      	str	r0, [r4, #4]
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	6123      	str	r3, [r4, #16]
 8002afe:	2300      	movs	r3, #0
 8002b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b04:	e7aa      	b.n	8002a5c <_printf_i+0x14c>
 8002b06:	6923      	ldr	r3, [r4, #16]
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	47d0      	blx	sl
 8002b10:	3001      	adds	r0, #1
 8002b12:	d0ad      	beq.n	8002a70 <_printf_i+0x160>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	079b      	lsls	r3, r3, #30
 8002b18:	d413      	bmi.n	8002b42 <_printf_i+0x232>
 8002b1a:	68e0      	ldr	r0, [r4, #12]
 8002b1c:	9b03      	ldr	r3, [sp, #12]
 8002b1e:	4298      	cmp	r0, r3
 8002b20:	bfb8      	it	lt
 8002b22:	4618      	movlt	r0, r3
 8002b24:	e7a6      	b.n	8002a74 <_printf_i+0x164>
 8002b26:	2301      	movs	r3, #1
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	47d0      	blx	sl
 8002b30:	3001      	adds	r0, #1
 8002b32:	d09d      	beq.n	8002a70 <_printf_i+0x160>
 8002b34:	3501      	adds	r5, #1
 8002b36:	68e3      	ldr	r3, [r4, #12]
 8002b38:	9903      	ldr	r1, [sp, #12]
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	42ab      	cmp	r3, r5
 8002b3e:	dcf2      	bgt.n	8002b26 <_printf_i+0x216>
 8002b40:	e7eb      	b.n	8002b1a <_printf_i+0x20a>
 8002b42:	2500      	movs	r5, #0
 8002b44:	f104 0619 	add.w	r6, r4, #25
 8002b48:	e7f5      	b.n	8002b36 <_printf_i+0x226>
 8002b4a:	bf00      	nop
 8002b4c:	08002f49 	.word	0x08002f49
 8002b50:	08002f5a 	.word	0x08002f5a

08002b54 <__sflush_r>:
 8002b54:	898a      	ldrh	r2, [r1, #12]
 8002b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b58:	4605      	mov	r5, r0
 8002b5a:	0710      	lsls	r0, r2, #28
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	d457      	bmi.n	8002c10 <__sflush_r+0xbc>
 8002b60:	684b      	ldr	r3, [r1, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	dc04      	bgt.n	8002b70 <__sflush_r+0x1c>
 8002b66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dc01      	bgt.n	8002b70 <__sflush_r+0x1c>
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b72:	2e00      	cmp	r6, #0
 8002b74:	d0fa      	beq.n	8002b6c <__sflush_r+0x18>
 8002b76:	2300      	movs	r3, #0
 8002b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b7c:	682f      	ldr	r7, [r5, #0]
 8002b7e:	6a21      	ldr	r1, [r4, #32]
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	d032      	beq.n	8002bea <__sflush_r+0x96>
 8002b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	075a      	lsls	r2, r3, #29
 8002b8a:	d505      	bpl.n	8002b98 <__sflush_r+0x44>
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	1ac0      	subs	r0, r0, r3
 8002b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b92:	b10b      	cbz	r3, 8002b98 <__sflush_r+0x44>
 8002b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b96:	1ac0      	subs	r0, r0, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b9e:	6a21      	ldr	r1, [r4, #32]
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	47b0      	blx	r6
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	d106      	bne.n	8002bb8 <__sflush_r+0x64>
 8002baa:	6829      	ldr	r1, [r5, #0]
 8002bac:	291d      	cmp	r1, #29
 8002bae:	d82b      	bhi.n	8002c08 <__sflush_r+0xb4>
 8002bb0:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <__sflush_r+0x100>)
 8002bb2:	410a      	asrs	r2, r1
 8002bb4:	07d6      	lsls	r6, r2, #31
 8002bb6:	d427      	bmi.n	8002c08 <__sflush_r+0xb4>
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6062      	str	r2, [r4, #4]
 8002bbc:	04d9      	lsls	r1, r3, #19
 8002bbe:	6922      	ldr	r2, [r4, #16]
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	d504      	bpl.n	8002bce <__sflush_r+0x7a>
 8002bc4:	1c42      	adds	r2, r0, #1
 8002bc6:	d101      	bne.n	8002bcc <__sflush_r+0x78>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b903      	cbnz	r3, 8002bce <__sflush_r+0x7a>
 8002bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8002bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bd0:	602f      	str	r7, [r5, #0]
 8002bd2:	2900      	cmp	r1, #0
 8002bd4:	d0ca      	beq.n	8002b6c <__sflush_r+0x18>
 8002bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bda:	4299      	cmp	r1, r3
 8002bdc:	d002      	beq.n	8002be4 <__sflush_r+0x90>
 8002bde:	4628      	mov	r0, r5
 8002be0:	f7ff fbf0 	bl	80023c4 <_free_r>
 8002be4:	2000      	movs	r0, #0
 8002be6:	6360      	str	r0, [r4, #52]	; 0x34
 8002be8:	e7c1      	b.n	8002b6e <__sflush_r+0x1a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	4628      	mov	r0, r5
 8002bee:	47b0      	blx	r6
 8002bf0:	1c41      	adds	r1, r0, #1
 8002bf2:	d1c8      	bne.n	8002b86 <__sflush_r+0x32>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0c5      	beq.n	8002b86 <__sflush_r+0x32>
 8002bfa:	2b1d      	cmp	r3, #29
 8002bfc:	d001      	beq.n	8002c02 <__sflush_r+0xae>
 8002bfe:	2b16      	cmp	r3, #22
 8002c00:	d101      	bne.n	8002c06 <__sflush_r+0xb2>
 8002c02:	602f      	str	r7, [r5, #0]
 8002c04:	e7b2      	b.n	8002b6c <__sflush_r+0x18>
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	e7ae      	b.n	8002b6e <__sflush_r+0x1a>
 8002c10:	690f      	ldr	r7, [r1, #16]
 8002c12:	2f00      	cmp	r7, #0
 8002c14:	d0aa      	beq.n	8002b6c <__sflush_r+0x18>
 8002c16:	0793      	lsls	r3, r2, #30
 8002c18:	680e      	ldr	r6, [r1, #0]
 8002c1a:	bf08      	it	eq
 8002c1c:	694b      	ldreq	r3, [r1, #20]
 8002c1e:	600f      	str	r7, [r1, #0]
 8002c20:	bf18      	it	ne
 8002c22:	2300      	movne	r3, #0
 8002c24:	1bf6      	subs	r6, r6, r7
 8002c26:	608b      	str	r3, [r1, #8]
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	dd9f      	ble.n	8002b6c <__sflush_r+0x18>
 8002c2c:	6a21      	ldr	r1, [r4, #32]
 8002c2e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002c32:	4633      	mov	r3, r6
 8002c34:	463a      	mov	r2, r7
 8002c36:	4628      	mov	r0, r5
 8002c38:	47e0      	blx	ip
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	dc06      	bgt.n	8002c4c <__sflush_r+0xf8>
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c44:	81a3      	strh	r3, [r4, #12]
 8002c46:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4a:	e790      	b.n	8002b6e <__sflush_r+0x1a>
 8002c4c:	4407      	add	r7, r0
 8002c4e:	1a36      	subs	r6, r6, r0
 8002c50:	e7ea      	b.n	8002c28 <__sflush_r+0xd4>
 8002c52:	bf00      	nop
 8002c54:	dfbffffe 	.word	0xdfbffffe

08002c58 <_fflush_r>:
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	690b      	ldr	r3, [r1, #16]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	b913      	cbnz	r3, 8002c68 <_fflush_r+0x10>
 8002c62:	2500      	movs	r5, #0
 8002c64:	4628      	mov	r0, r5
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	b118      	cbz	r0, 8002c72 <_fflush_r+0x1a>
 8002c6a:	6a03      	ldr	r3, [r0, #32]
 8002c6c:	b90b      	cbnz	r3, 8002c72 <_fflush_r+0x1a>
 8002c6e:	f7ff faa1 	bl	80021b4 <__sinit>
 8002c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f3      	beq.n	8002c62 <_fflush_r+0xa>
 8002c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c7c:	07d0      	lsls	r0, r2, #31
 8002c7e:	d404      	bmi.n	8002c8a <_fflush_r+0x32>
 8002c80:	0599      	lsls	r1, r3, #22
 8002c82:	d402      	bmi.n	8002c8a <_fflush_r+0x32>
 8002c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c86:	f7ff fb9a 	bl	80023be <__retarget_lock_acquire_recursive>
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	f7ff ff61 	bl	8002b54 <__sflush_r>
 8002c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c94:	07da      	lsls	r2, r3, #31
 8002c96:	4605      	mov	r5, r0
 8002c98:	d4e4      	bmi.n	8002c64 <_fflush_r+0xc>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	059b      	lsls	r3, r3, #22
 8002c9e:	d4e1      	bmi.n	8002c64 <_fflush_r+0xc>
 8002ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ca2:	f7ff fb8d 	bl	80023c0 <__retarget_lock_release_recursive>
 8002ca6:	e7dd      	b.n	8002c64 <_fflush_r+0xc>

08002ca8 <__swbuf_r>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	460e      	mov	r6, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	4605      	mov	r5, r0
 8002cb0:	b118      	cbz	r0, 8002cba <__swbuf_r+0x12>
 8002cb2:	6a03      	ldr	r3, [r0, #32]
 8002cb4:	b90b      	cbnz	r3, 8002cba <__swbuf_r+0x12>
 8002cb6:	f7ff fa7d 	bl	80021b4 <__sinit>
 8002cba:	69a3      	ldr	r3, [r4, #24]
 8002cbc:	60a3      	str	r3, [r4, #8]
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	071a      	lsls	r2, r3, #28
 8002cc2:	d525      	bpl.n	8002d10 <__swbuf_r+0x68>
 8002cc4:	6923      	ldr	r3, [r4, #16]
 8002cc6:	b31b      	cbz	r3, 8002d10 <__swbuf_r+0x68>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	6922      	ldr	r2, [r4, #16]
 8002ccc:	1a98      	subs	r0, r3, r2
 8002cce:	6963      	ldr	r3, [r4, #20]
 8002cd0:	b2f6      	uxtb	r6, r6
 8002cd2:	4283      	cmp	r3, r0
 8002cd4:	4637      	mov	r7, r6
 8002cd6:	dc04      	bgt.n	8002ce2 <__swbuf_r+0x3a>
 8002cd8:	4621      	mov	r1, r4
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f7ff ffbc 	bl	8002c58 <_fflush_r>
 8002ce0:	b9e0      	cbnz	r0, 8002d1c <__swbuf_r+0x74>
 8002ce2:	68a3      	ldr	r3, [r4, #8]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60a3      	str	r3, [r4, #8]
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	6022      	str	r2, [r4, #0]
 8002cee:	701e      	strb	r6, [r3, #0]
 8002cf0:	6962      	ldr	r2, [r4, #20]
 8002cf2:	1c43      	adds	r3, r0, #1
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d004      	beq.n	8002d02 <__swbuf_r+0x5a>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	07db      	lsls	r3, r3, #31
 8002cfc:	d506      	bpl.n	8002d0c <__swbuf_r+0x64>
 8002cfe:	2e0a      	cmp	r6, #10
 8002d00:	d104      	bne.n	8002d0c <__swbuf_r+0x64>
 8002d02:	4621      	mov	r1, r4
 8002d04:	4628      	mov	r0, r5
 8002d06:	f7ff ffa7 	bl	8002c58 <_fflush_r>
 8002d0a:	b938      	cbnz	r0, 8002d1c <__swbuf_r+0x74>
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d10:	4621      	mov	r1, r4
 8002d12:	4628      	mov	r0, r5
 8002d14:	f000 f806 	bl	8002d24 <__swsetup_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d0d5      	beq.n	8002cc8 <__swbuf_r+0x20>
 8002d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d20:	e7f4      	b.n	8002d0c <__swbuf_r+0x64>
	...

08002d24 <__swsetup_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <__swsetup_r+0xac>)
 8002d28:	4605      	mov	r5, r0
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	b118      	cbz	r0, 8002d38 <__swsetup_r+0x14>
 8002d30:	6a03      	ldr	r3, [r0, #32]
 8002d32:	b90b      	cbnz	r3, 8002d38 <__swsetup_r+0x14>
 8002d34:	f7ff fa3e 	bl	80021b4 <__sinit>
 8002d38:	89a3      	ldrh	r3, [r4, #12]
 8002d3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d3e:	0718      	lsls	r0, r3, #28
 8002d40:	d422      	bmi.n	8002d88 <__swsetup_r+0x64>
 8002d42:	06d9      	lsls	r1, r3, #27
 8002d44:	d407      	bmi.n	8002d56 <__swsetup_r+0x32>
 8002d46:	2309      	movs	r3, #9
 8002d48:	602b      	str	r3, [r5, #0]
 8002d4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	e034      	b.n	8002dc0 <__swsetup_r+0x9c>
 8002d56:	0758      	lsls	r0, r3, #29
 8002d58:	d512      	bpl.n	8002d80 <__swsetup_r+0x5c>
 8002d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d5c:	b141      	cbz	r1, 8002d70 <__swsetup_r+0x4c>
 8002d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d62:	4299      	cmp	r1, r3
 8002d64:	d002      	beq.n	8002d6c <__swsetup_r+0x48>
 8002d66:	4628      	mov	r0, r5
 8002d68:	f7ff fb2c 	bl	80023c4 <_free_r>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6363      	str	r3, [r4, #52]	; 0x34
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d76:	81a3      	strh	r3, [r4, #12]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6923      	ldr	r3, [r4, #16]
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	81a3      	strh	r3, [r4, #12]
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	b94b      	cbnz	r3, 8002da0 <__swsetup_r+0x7c>
 8002d8c:	89a3      	ldrh	r3, [r4, #12]
 8002d8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d003      	beq.n	8002da0 <__swsetup_r+0x7c>
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f850 	bl	8002e40 <__smakebuf_r>
 8002da0:	89a0      	ldrh	r0, [r4, #12]
 8002da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002da6:	f010 0301 	ands.w	r3, r0, #1
 8002daa:	d00a      	beq.n	8002dc2 <__swsetup_r+0x9e>
 8002dac:	2300      	movs	r3, #0
 8002dae:	60a3      	str	r3, [r4, #8]
 8002db0:	6963      	ldr	r3, [r4, #20]
 8002db2:	425b      	negs	r3, r3
 8002db4:	61a3      	str	r3, [r4, #24]
 8002db6:	6923      	ldr	r3, [r4, #16]
 8002db8:	b943      	cbnz	r3, 8002dcc <__swsetup_r+0xa8>
 8002dba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002dbe:	d1c4      	bne.n	8002d4a <__swsetup_r+0x26>
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
 8002dc2:	0781      	lsls	r1, r0, #30
 8002dc4:	bf58      	it	pl
 8002dc6:	6963      	ldrpl	r3, [r4, #20]
 8002dc8:	60a3      	str	r3, [r4, #8]
 8002dca:	e7f4      	b.n	8002db6 <__swsetup_r+0x92>
 8002dcc:	2000      	movs	r0, #0
 8002dce:	e7f7      	b.n	8002dc0 <__swsetup_r+0x9c>
 8002dd0:	20000064 	.word	0x20000064

08002dd4 <_sbrk_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	4d06      	ldr	r5, [pc, #24]	; (8002df0 <_sbrk_r+0x1c>)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4604      	mov	r4, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	602b      	str	r3, [r5, #0]
 8002de0:	f7ff f892 	bl	8001f08 <_sbrk>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d102      	bne.n	8002dee <_sbrk_r+0x1a>
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	b103      	cbz	r3, 8002dee <_sbrk_r+0x1a>
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	20000258 	.word	0x20000258

08002df4 <__swhatbuf_r>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	460c      	mov	r4, r1
 8002df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfc:	2900      	cmp	r1, #0
 8002dfe:	b096      	sub	sp, #88	; 0x58
 8002e00:	4615      	mov	r5, r2
 8002e02:	461e      	mov	r6, r3
 8002e04:	da0d      	bge.n	8002e22 <__swhatbuf_r+0x2e>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	bf0c      	ite	eq
 8002e12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e16:	2340      	movne	r3, #64	; 0x40
 8002e18:	2000      	movs	r0, #0
 8002e1a:	6031      	str	r1, [r6, #0]
 8002e1c:	602b      	str	r3, [r5, #0]
 8002e1e:	b016      	add	sp, #88	; 0x58
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	466a      	mov	r2, sp
 8002e24:	f000 f848 	bl	8002eb8 <_fstat_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	dbec      	blt.n	8002e06 <__swhatbuf_r+0x12>
 8002e2c:	9901      	ldr	r1, [sp, #4]
 8002e2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e36:	4259      	negs	r1, r3
 8002e38:	4159      	adcs	r1, r3
 8002e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3e:	e7eb      	b.n	8002e18 <__swhatbuf_r+0x24>

08002e40 <__smakebuf_r>:
 8002e40:	898b      	ldrh	r3, [r1, #12]
 8002e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e44:	079d      	lsls	r5, r3, #30
 8002e46:	4606      	mov	r6, r0
 8002e48:	460c      	mov	r4, r1
 8002e4a:	d507      	bpl.n	8002e5c <__smakebuf_r+0x1c>
 8002e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	6123      	str	r3, [r4, #16]
 8002e54:	2301      	movs	r3, #1
 8002e56:	6163      	str	r3, [r4, #20]
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	ab01      	add	r3, sp, #4
 8002e5e:	466a      	mov	r2, sp
 8002e60:	f7ff ffc8 	bl	8002df4 <__swhatbuf_r>
 8002e64:	9900      	ldr	r1, [sp, #0]
 8002e66:	4605      	mov	r5, r0
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f7ff fb15 	bl	8002498 <_malloc_r>
 8002e6e:	b948      	cbnz	r0, 8002e84 <__smakebuf_r+0x44>
 8002e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e74:	059a      	lsls	r2, r3, #22
 8002e76:	d4ef      	bmi.n	8002e58 <__smakebuf_r+0x18>
 8002e78:	f023 0303 	bic.w	r3, r3, #3
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	81a3      	strh	r3, [r4, #12]
 8002e82:	e7e3      	b.n	8002e4c <__smakebuf_r+0xc>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	6020      	str	r0, [r4, #0]
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	81a3      	strh	r3, [r4, #12]
 8002e8e:	9b00      	ldr	r3, [sp, #0]
 8002e90:	6163      	str	r3, [r4, #20]
 8002e92:	9b01      	ldr	r3, [sp, #4]
 8002e94:	6120      	str	r0, [r4, #16]
 8002e96:	b15b      	cbz	r3, 8002eb0 <__smakebuf_r+0x70>
 8002e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f81d 	bl	8002edc <_isatty_r>
 8002ea2:	b128      	cbz	r0, 8002eb0 <__smakebuf_r+0x70>
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	431d      	orrs	r5, r3
 8002eb4:	81a5      	strh	r5, [r4, #12]
 8002eb6:	e7cf      	b.n	8002e58 <__smakebuf_r+0x18>

08002eb8 <_fstat_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4d07      	ldr	r5, [pc, #28]	; (8002ed8 <_fstat_r+0x20>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	f7fe fff9 	bl	8001ebc <_fstat>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d102      	bne.n	8002ed4 <_fstat_r+0x1c>
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	b103      	cbz	r3, 8002ed4 <_fstat_r+0x1c>
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000258 	.word	0x20000258

08002edc <_isatty_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4d06      	ldr	r5, [pc, #24]	; (8002ef8 <_isatty_r+0x1c>)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	f7fe fff7 	bl	8001eda <_isatty>
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	d102      	bne.n	8002ef6 <_isatty_r+0x1a>
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	b103      	cbz	r3, 8002ef6 <_isatty_r+0x1a>
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20000258 	.word	0x20000258

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
