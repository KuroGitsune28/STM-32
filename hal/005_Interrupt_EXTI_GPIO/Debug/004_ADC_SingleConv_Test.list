
004_ADC_SingleConv_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d94  08002d94  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d9c  08002d9c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000844b  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001756  00000000  00000000  00028520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000750  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000580  00000000  00000000  0002a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002daf  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a379  00000000  00000000  0002d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1eeb  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002478  00000000  00000000  0010995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d24 	.word	0x08002d24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002d24 	.word	0x08002d24

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811b 	bcs.w	800054e <__udivmoddi4+0x28e>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8118 	bls.w	800054e <__udivmoddi4+0x28e>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8106 	bcs.w	8000552 <__udivmoddi4+0x292>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8103 	bls.w	8000552 <__udivmoddi4+0x292>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ec 	beq.w	8000548 <__udivmoddi4+0x288>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f7 	bhi.w	800057c <__udivmoddi4+0x2bc>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 808f 	bne.w	80004ce <__udivmoddi4+0x20e>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80ba 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	4323      	orrs	r3, r4
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb00 5518 	mls	r5, r0, r8, r5
 8000448:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800044c:	fb08 f50e 	mul.w	r5, r8, lr
 8000450:	42a5      	cmp	r5, r4
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f0 	udiv	r3, r4, r0
 8000478:	fb00 4413 	mls	r4, r0, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800049e:	fba0 8302 	umull	r8, r3, r0, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	429c      	cmp	r4, r3
 80004a8:	46c6      	mov	lr, r8
 80004aa:	461d      	mov	r5, r3
 80004ac:	d355      	bcc.n	800055a <__udivmoddi4+0x29a>
 80004ae:	d052      	beq.n	8000556 <__udivmoddi4+0x296>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb9 030e 	subs.w	r3, r9, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	431f      	orrs	r7, r3
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c3 0120 	rsb	r1, r3, #32
 80004d2:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d6:	fa20 f201 	lsr.w	r2, r0, r1
 80004da:	fa25 f101 	lsr.w	r1, r5, r1
 80004de:	409d      	lsls	r5, r3
 80004e0:	432a      	orrs	r2, r5
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1510 	mls	r5, r7, r0, r1
 80004f2:	0c11      	lsrs	r1, r2, #16
 80004f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f8:	fb00 f50e 	mul.w	r5, r0, lr
 80004fc:	428d      	cmp	r5, r1
 80004fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x256>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428d      	cmp	r5, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	1b49      	subs	r1, r1, r5
 8000518:	b292      	uxth	r2, r2
 800051a:	fbb1 f5f7 	udiv	r5, r1, r7
 800051e:	fb07 1115 	mls	r1, r7, r5, r1
 8000522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000526:	fb05 f10e 	mul.w	r1, r5, lr
 800052a:	4291      	cmp	r1, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x280>
 800052e:	eb1c 0202 	adds.w	r2, ip, r2
 8000532:	f105 38ff 	add.w	r8, r5, #4294967295
 8000536:	d216      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000538:	4291      	cmp	r1, r2
 800053a:	d914      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053c:	3d02      	subs	r5, #2
 800053e:	4462      	add	r2, ip
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e739      	b.n	80003bc <__udivmoddi4+0xfc>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e709      	b.n	8000362 <__udivmoddi4+0xa2>
 800054e:	4639      	mov	r1, r7
 8000550:	e6e7      	b.n	8000322 <__udivmoddi4+0x62>
 8000552:	4610      	mov	r0, r2
 8000554:	e6fc      	b.n	8000350 <__udivmoddi4+0x90>
 8000556:	45c1      	cmp	r9, r8
 8000558:	d2aa      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055a:	ebb8 0e02 	subs.w	lr, r8, r2
 800055e:	eb63 050c 	sbc.w	r5, r3, ip
 8000562:	3801      	subs	r0, #1
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4645      	mov	r5, r8
 8000568:	e7ea      	b.n	8000540 <__udivmoddi4+0x280>
 800056a:	4603      	mov	r3, r0
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4640      	mov	r0, r8
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	46d0      	mov	r8, sl
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x124>
 800057c:	4608      	mov	r0, r1
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xd8>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e743      	b.n	800040e <__udivmoddi4+0x14e>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <HAL_Init+0x40>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_Init+0x40>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x40>)
 80005ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 fce1 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 f80e 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f000 f806 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023c00 	.word	0x40023c00

080005d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fce5 	bl	8000fca <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 fcbb 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004
 8000638:	20000000 	.word	0x20000000

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000004 	.word	0x20000004
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000084 	.word	0x20000084

08000674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e033      	b.n	80006f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f831 	bl	80006fa <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d118      	bne.n	80006e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ba:	f023 0302 	bic.w	r3, r3, #2
 80006be:	f043 0202 	orr.w	r2, r3, #2
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 faac 	bl	8000c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	f043 0201 	orr.w	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	641a      	str	r2, [r3, #64]	; 0x40
 80006e2:	e001      	b.n	80006e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800071e:	2b01      	cmp	r3, #1
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Start+0x1a>
 8000722:	2302      	movs	r3, #2
 8000724:	e0b2      	b.n	800088c <HAL_ADC_Start+0x180>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2201      	movs	r2, #1
 800072a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b01      	cmp	r3, #1
 800073a:	d018      	beq.n	800076e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f042 0201 	orr.w	r2, r2, #1
 800074a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800074c:	4b52      	ldr	r3, [pc, #328]	; (8000898 <HAL_ADC_Start+0x18c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a52      	ldr	r2, [pc, #328]	; (800089c <HAL_ADC_Start+0x190>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	0c9a      	lsrs	r2, r3, #18
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000760:	e002      	b.n	8000768 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	3b01      	subs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f9      	bne.n	8000762 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b01      	cmp	r3, #1
 800077a:	d17a      	bne.n	8000872 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800079a:	2b00      	cmp	r3, #0
 800079c:	d007      	beq.n	80007ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ba:	d106      	bne.n	80007ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	f023 0206 	bic.w	r2, r3, #6
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	645a      	str	r2, [r3, #68]	; 0x44
 80007c8:	e002      	b.n	80007d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_ADC_Start+0x194>)
 80007da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f003 031f 	and.w	r3, r3, #31
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d12a      	bne.n	8000848 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a2b      	ldr	r2, [pc, #172]	; (80008a4 <HAL_ADC_Start+0x198>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d015      	beq.n	8000828 <HAL_ADC_Start+0x11c>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <HAL_ADC_Start+0x19c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d105      	bne.n	8000812 <HAL_ADC_Start+0x106>
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <HAL_ADC_Start+0x194>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00a      	beq.n	8000828 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <HAL_ADC_Start+0x1a0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d136      	bne.n	800088a <HAL_ADC_Start+0x17e>
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <HAL_ADC_Start+0x194>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	2b00      	cmp	r3, #0
 8000826:	d130      	bne.n	800088a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d129      	bne.n	800088a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	e020      	b.n	800088a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <HAL_ADC_Start+0x198>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d11b      	bne.n	800088a <HAL_ADC_Start+0x17e>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d114      	bne.n	800088a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	e00b      	b.n	800088a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f043 0210 	orr.w	r2, r3, #16
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	40012300 	.word	0x40012300
 80008a4:	40012000 	.word	0x40012000
 80008a8:	40012100 	.word	0x40012100
 80008ac:	40012200 	.word	0x40012200

080008b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008cc:	d113      	bne.n	80008f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008dc:	d10b      	bne.n	80008f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f043 0220 	orr.w	r2, r3, #32
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e063      	b.n	80009be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80008f6:	f7ff feb3 	bl	8000660 <HAL_GetTick>
 80008fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008fc:	e021      	b.n	8000942 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d01d      	beq.n	8000942 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d007      	beq.n	800091c <HAL_ADC_PollForConversion+0x6c>
 800090c:	f7ff fea8 	bl	8000660 <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d212      	bcs.n	8000942 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b02      	cmp	r3, #2
 8000928:	d00b      	beq.n	8000942 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f043 0204 	orr.w	r2, r3, #4
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e03d      	b.n	80009be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b02      	cmp	r3, #2
 800094e:	d1d6      	bne.n	80008fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f06f 0212 	mvn.w	r2, #18
 8000958:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d123      	bne.n	80009bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000978:	2b00      	cmp	r3, #0
 800097a:	d11f      	bne.n	80009bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000994:	2b00      	cmp	r3, #0
 8000996:	d111      	bne.n	80009bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f043 0201 	orr.w	r2, r3, #1
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d101      	bne.n	80009fc <HAL_ADC_ConfigChannel+0x1c>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e105      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x228>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b09      	cmp	r3, #9
 8000a0a:	d925      	bls.n	8000a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b1e      	subs	r3, #30
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	400a      	ands	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4403      	add	r3, r0
 8000a4a:	3b1e      	subs	r3, #30
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	e022      	b.n	8000a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6919      	ldr	r1, [r3, #16]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	400a      	ands	r2, r1
 8000a7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6919      	ldr	r1, [r3, #16]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4403      	add	r3, r0
 8000a94:	409a      	lsls	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d824      	bhi.n	8000af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3b05      	subs	r3, #5
 8000ab8:	221f      	movs	r2, #31
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b05      	subs	r3, #5
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	e04c      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d824      	bhi.n	8000b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	3b23      	subs	r3, #35	; 0x23
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43da      	mvns	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	3b23      	subs	r3, #35	; 0x23
 8000b34:	fa00 f203 	lsl.w	r2, r0, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b40:	e023      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	3b41      	subs	r3, #65	; 0x41
 8000b54:	221f      	movs	r2, #31
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	400a      	ands	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b41      	subs	r3, #65	; 0x41
 8000b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_ADC_ConfigChannel+0x234>)
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d105      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d123      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b10      	cmp	r3, #16
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b11      	cmp	r3, #17
 8000bc4:	d11b      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d111      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_ConfigChannel+0x23c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_ADC_ConfigChannel+0x240>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	0c9a      	lsrs	r2, r3, #18
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf0:	e002      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40012300 	.word	0x40012300
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	431bde83 	.word	0x431bde83

08000c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c2c:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <ADC_Init+0x1f0>)
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	021a      	lsls	r2, r3, #8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <ADC_Init+0x1f4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d022      	beq.n	8000d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6899      	ldr	r1, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e00f      	b.n	8000d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0202 	bic.w	r2, r2, #2
 8000d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e1b      	ldrb	r3, [r3, #24]
 8000d3c:	005a      	lsls	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01b      	beq.n	8000d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	035a      	lsls	r2, r3, #13
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	e007      	b.n	8000d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	051a      	lsls	r2, r3, #20
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dda:	025a      	lsls	r2, r3, #9
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6899      	ldr	r1, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	029a      	lsls	r2, r3, #10
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40012300 	.word	0x40012300
 8000e18:	0f000001 	.word	0x0f000001

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff90 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff49 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e16b      	b.n	80012d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 815a 	bne.w	80012d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80b4 	beq.w	80012d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_GPIO_Init+0x308>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a5e      	ldr	r2, [pc, #376]	; (80012ec <HAL_GPIO_Init+0x308>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_GPIO_Init+0x308>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a5a      	ldr	r2, [pc, #360]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x310>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x21a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x216>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x324>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x212>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x328>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x20e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x20a>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00e      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011ee:	2308      	movs	r3, #8
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x228>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x228>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x228>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121c:	4934      	ldr	r1, [pc, #208]	; (80012f0 <HAL_GPIO_Init+0x30c>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <HAL_GPIO_Init+0x330>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a31      	ldr	r2, [pc, #196]	; (8001314 <HAL_GPIO_Init+0x330>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x330>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x330>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_GPIO_Init+0x330>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_GPIO_Init+0x330>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x330>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_GPIO_Init+0x330>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f ae90 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40021c00 	.word	0x40021c00
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_RCC_GetHCLKFreq+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000008 	.word	0x20000008

0800132c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001330:	f7ff fff2 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	0a9b      	lsrs	r3, r3, #10
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	08002d58 	.word	0x08002d58

08001354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001358:	f7ff ffde 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	0b5b      	lsrs	r3, r3, #13
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4903      	ldr	r1, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	08002d58 	.word	0x08002d58

0800137c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e03f      	b.n	800140e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f837 	bl	8001416 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2224      	movs	r2, #36	; 0x24
 80013ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f931 	bl	8001628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2220      	movs	r2, #32
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2220      	movs	r2, #32
 8001408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b20      	cmp	r3, #32
 8001446:	d17c      	bne.n	8001542 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_UART_Transmit+0x2c>
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e075      	b.n	8001544 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_UART_Transmit+0x3e>
 8001462:	2302      	movs	r3, #2
 8001464:	e06e      	b.n	8001544 <HAL_UART_Transmit+0x11c>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2221      	movs	r2, #33	; 0x21
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800147c:	f7ff f8f0 	bl	8000660 <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001496:	d108      	bne.n	80014aa <HAL_UART_Transmit+0x82>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d104      	bne.n	80014aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e003      	b.n	80014b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014ba:	e02a      	b.n	8001512 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2200      	movs	r2, #0
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f840 	bl	800154c <UART_WaitOnFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e036      	b.n	8001544 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	3302      	adds	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	e007      	b.n	8001504 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1cf      	bne.n	80014bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2200      	movs	r2, #0
 8001524:	2140      	movs	r1, #64	; 0x40
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f810 	bl	800154c <UART_WaitOnFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e006      	b.n	8001544 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001542:	2302      	movs	r3, #2
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	; 0x40
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800155c:	e050      	b.n	8001600 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800155e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d04c      	beq.n	8001600 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <UART_WaitOnFlagUntilTimeout+0x30>
 800156c:	f7ff f878 	bl	8000660 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001578:	429a      	cmp	r2, r3
 800157a:	d241      	bcs.n	8001600 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	330c      	adds	r3, #12
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	e853 3f00 	ldrex	r3, [r3]
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	330c      	adds	r3, #12
 800159a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800159c:	637a      	str	r2, [r7, #52]	; 0x34
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015a4:	e841 2300 	strex	r3, r2, [r1]
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e5      	bne.n	800157c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3314      	adds	r3, #20
 80015b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	e853 3f00 	ldrex	r3, [r3]
 80015be:	613b      	str	r3, [r7, #16]
   return(result);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3314      	adds	r3, #20
 80015ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015d0:	623a      	str	r2, [r7, #32]
 80015d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	6a3a      	ldr	r2, [r7, #32]
 80015d8:	e841 2300 	strex	r3, r2, [r1]
 80015dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e5      	bne.n	80015b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e00f      	b.n	8001620 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4013      	ands	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	429a      	cmp	r2, r3
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	429a      	cmp	r2, r3
 800161c:	d09f      	beq.n	800155e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3740      	adds	r7, #64	; 0x40
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b0c0      	sub	sp, #256	; 0x100
 800162e:	af00      	add	r7, sp, #0
 8001630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	ea40 0301 	orr.w	r3, r0, r1
 8001650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	431a      	orrs	r2, r3
 8001660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	431a      	orrs	r2, r3
 8001668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001680:	f021 010c 	bic.w	r1, r1, #12
 8001684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800168e:	430b      	orrs	r3, r1
 8001690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800169e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a2:	6999      	ldr	r1, [r3, #24]
 80016a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	ea40 0301 	orr.w	r3, r0, r1
 80016ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b91      	ldr	r3, [pc, #580]	; (80018fc <UART_SetConfig+0x2d4>)
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d005      	beq.n	80016c8 <UART_SetConfig+0xa0>
 80016bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <UART_SetConfig+0x2d8>)
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d104      	bne.n	80016d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016c8:	f7ff fe44 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80016cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80016d0:	e003      	b.n	80016da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80016d2:	f7ff fe2b 	bl	800132c <HAL_RCC_GetPCLK1Freq>
 80016d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e4:	f040 8110 	bne.w	8001908 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016fa:	4622      	mov	r2, r4
 80016fc:	462b      	mov	r3, r5
 80016fe:	1891      	adds	r1, r2, r2
 8001700:	65b9      	str	r1, [r7, #88]	; 0x58
 8001702:	415b      	adcs	r3, r3
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	4604      	mov	r4, r0
 8001710:	eb12 0804 	adds.w	r8, r2, r4
 8001714:	460c      	mov	r4, r1
 8001716:	eb43 0904 	adc.w	r9, r3, r4
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800172a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800172e:	4690      	mov	r8, r2
 8001730:	4699      	mov	r9, r3
 8001732:	4603      	mov	r3, r0
 8001734:	eb18 0303 	adds.w	r3, r8, r3
 8001738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800173c:	460b      	mov	r3, r1
 800173e:	eb49 0303 	adc.w	r3, r9, r3
 8001742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001752:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800175a:	460b      	mov	r3, r1
 800175c:	18db      	adds	r3, r3, r3
 800175e:	653b      	str	r3, [r7, #80]	; 0x50
 8001760:	4613      	mov	r3, r2
 8001762:	eb42 0303 	adc.w	r3, r2, r3
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
 8001768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800176c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001770:	f7fe fd8e 	bl	8000290 <__aeabi_uldivmod>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <UART_SetConfig+0x2dc>)
 800177a:	fba3 2302 	umull	r2, r3, r3, r2
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	011c      	lsls	r4, r3, #4
 8001782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001786:	2200      	movs	r2, #0
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800178c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001794:	4642      	mov	r2, r8
 8001796:	464b      	mov	r3, r9
 8001798:	1891      	adds	r1, r2, r2
 800179a:	64b9      	str	r1, [r7, #72]	; 0x48
 800179c:	415b      	adcs	r3, r3
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017a4:	4645      	mov	r5, r8
 80017a6:	eb12 0a05 	adds.w	sl, r2, r5
 80017aa:	4640      	mov	r0, r8
 80017ac:	4649      	mov	r1, r9
 80017ae:	460d      	mov	r5, r1
 80017b0:	eb43 0b05 	adc.w	fp, r3, r5
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017c8:	4692      	mov	sl, r2
 80017ca:	469b      	mov	fp, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	eb1a 0303 	adds.w	r3, sl, r3
 80017d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017d6:	460b      	mov	r3, r1
 80017d8:	eb4b 0303 	adc.w	r3, fp, r3
 80017dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80017ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80017f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80017f4:	460b      	mov	r3, r1
 80017f6:	18db      	adds	r3, r3, r3
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
 80017fa:	4613      	mov	r3, r2
 80017fc:	eb42 0303 	adc.w	r3, r2, r3
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
 8001802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800180a:	f7fe fd41 	bl	8000290 <__aeabi_uldivmod>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4611      	mov	r1, r2
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <UART_SetConfig+0x2dc>)
 8001816:	fba3 2301 	umull	r2, r3, r3, r1
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2264      	movs	r2, #100	; 0x64
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	1acb      	subs	r3, r1, r3
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <UART_SetConfig+0x2dc>)
 800182c:	fba3 2302 	umull	r2, r3, r3, r2
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001838:	441c      	add	r4, r3
 800183a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800183e:	2200      	movs	r2, #0
 8001840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800184c:	4642      	mov	r2, r8
 800184e:	464b      	mov	r3, r9
 8001850:	1891      	adds	r1, r2, r2
 8001852:	63b9      	str	r1, [r7, #56]	; 0x38
 8001854:	415b      	adcs	r3, r3
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800185c:	4641      	mov	r1, r8
 800185e:	1851      	adds	r1, r2, r1
 8001860:	6339      	str	r1, [r7, #48]	; 0x30
 8001862:	4649      	mov	r1, r9
 8001864:	414b      	adcs	r3, r1
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001874:	4659      	mov	r1, fp
 8001876:	00cb      	lsls	r3, r1, #3
 8001878:	4655      	mov	r5, sl
 800187a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800187e:	4651      	mov	r1, sl
 8001880:	00ca      	lsls	r2, r1, #3
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	4603      	mov	r3, r0
 8001888:	4642      	mov	r2, r8
 800188a:	189b      	adds	r3, r3, r2
 800188c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001890:	464b      	mov	r3, r9
 8001892:	460a      	mov	r2, r1
 8001894:	eb42 0303 	adc.w	r3, r2, r3
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800189c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80018ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80018b0:	460b      	mov	r3, r1
 80018b2:	18db      	adds	r3, r3, r3
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b6:	4613      	mov	r3, r2
 80018b8:	eb42 0303 	adc.w	r3, r2, r3
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80018c6:	f7fe fce3 	bl	8000290 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <UART_SetConfig+0x2dc>)
 80018d0:	fba3 1302 	umull	r1, r3, r3, r2
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	2164      	movs	r1, #100	; 0x64
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	3332      	adds	r3, #50	; 0x32
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <UART_SetConfig+0x2dc>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	f003 0207 	and.w	r2, r3, #7
 80018ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4422      	add	r2, r4
 80018f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80018f8:	e10a      	b.n	8001b10 <UART_SetConfig+0x4e8>
 80018fa:	bf00      	nop
 80018fc:	40011000 	.word	0x40011000
 8001900:	40011400 	.word	0x40011400
 8001904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800190c:	2200      	movs	r2, #0
 800190e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800191a:	4642      	mov	r2, r8
 800191c:	464b      	mov	r3, r9
 800191e:	1891      	adds	r1, r2, r2
 8001920:	6239      	str	r1, [r7, #32]
 8001922:	415b      	adcs	r3, r3
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800192a:	4641      	mov	r1, r8
 800192c:	1854      	adds	r4, r2, r1
 800192e:	46cc      	mov	ip, r9
 8001930:	eb43 050c 	adc.w	r5, r3, ip
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4640      	mov	r0, r8
 800194a:	4649      	mov	r1, r9
 800194c:	4603      	mov	r3, r0
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001954:	460b      	mov	r3, r1
 8001956:	eb45 0303 	adc.w	r3, r5, r3
 800195a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800195e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800196a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800197a:	4629      	mov	r1, r5
 800197c:	008b      	lsls	r3, r1, #2
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	4604      	mov	r4, r0
 8001984:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001988:	4601      	mov	r1, r0
 800198a:	008a      	lsls	r2, r1, #2
 800198c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001990:	f7fe fc7e 	bl	8000290 <__aeabi_uldivmod>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4b60      	ldr	r3, [pc, #384]	; (8001b1c <UART_SetConfig+0x4f4>)
 800199a:	fba3 2302 	umull	r2, r3, r3, r2
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	011c      	lsls	r4, r3, #4
 80019a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80019b4:	4642      	mov	r2, r8
 80019b6:	464b      	mov	r3, r9
 80019b8:	1891      	adds	r1, r2, r2
 80019ba:	61b9      	str	r1, [r7, #24]
 80019bc:	415b      	adcs	r3, r3
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019c4:	4641      	mov	r1, r8
 80019c6:	1851      	adds	r1, r2, r1
 80019c8:	6139      	str	r1, [r7, #16]
 80019ca:	4649      	mov	r1, r9
 80019cc:	414b      	adcs	r3, r1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019dc:	4659      	mov	r1, fp
 80019de:	00cb      	lsls	r3, r1, #3
 80019e0:	4655      	mov	r5, sl
 80019e2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80019e6:	4651      	mov	r1, sl
 80019e8:	00ca      	lsls	r2, r1, #3
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	4642      	mov	r2, r8
 80019f2:	189b      	adds	r3, r3, r2
 80019f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019f8:	464b      	mov	r3, r9
 80019fa:	460a      	mov	r2, r1
 80019fc:	eb42 0303 	adc.w	r3, r2, r3
 8001a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	008b      	lsls	r3, r1, #2
 8001a20:	4645      	mov	r5, r8
 8001a22:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001a26:	4641      	mov	r1, r8
 8001a28:	008a      	lsls	r2, r1, #2
 8001a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a2e:	f7fe fc2f 	bl	8000290 <__aeabi_uldivmod>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <UART_SetConfig+0x4f4>)
 8001a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	1acb      	subs	r3, r1, r3
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	3332      	adds	r3, #50	; 0x32
 8001a4c:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <UART_SetConfig+0x4f4>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a58:	441c      	add	r4, r3
 8001a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a5e:	2200      	movs	r2, #0
 8001a60:	673b      	str	r3, [r7, #112]	; 0x70
 8001a62:	677a      	str	r2, [r7, #116]	; 0x74
 8001a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001a68:	4642      	mov	r2, r8
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	1891      	adds	r1, r2, r2
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	415b      	adcs	r3, r3
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a78:	4641      	mov	r1, r8
 8001a7a:	1851      	adds	r1, r2, r1
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	4649      	mov	r1, r9
 8001a80:	414b      	adcs	r3, r1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001a90:	4659      	mov	r1, fp
 8001a92:	00cb      	lsls	r3, r1, #3
 8001a94:	4655      	mov	r5, sl
 8001a96:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	00ca      	lsls	r2, r1, #3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	189b      	adds	r3, r3, r2
 8001aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aaa:	464b      	mov	r3, r9
 8001aac:	460a      	mov	r2, r1
 8001aae:	eb42 0303 	adc.w	r3, r2, r3
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	663b      	str	r3, [r7, #96]	; 0x60
 8001abe:	667a      	str	r2, [r7, #100]	; 0x64
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001acc:	4649      	mov	r1, r9
 8001ace:	008b      	lsls	r3, r1, #2
 8001ad0:	4645      	mov	r5, r8
 8001ad2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001ad6:	4641      	mov	r1, r8
 8001ad8:	008a      	lsls	r2, r1, #2
 8001ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ade:	f7fe fbd7 	bl	8000290 <__aeabi_uldivmod>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <UART_SetConfig+0x4f4>)
 8001ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	2164      	movs	r1, #100	; 0x64
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	3332      	adds	r3, #50	; 0x32
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <UART_SetConfig+0x4f4>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	095b      	lsrs	r3, r3, #5
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4422      	add	r2, r4
 8001b0e:	609a      	str	r2, [r3, #8]
}
 8001b10:	bf00      	nop
 8001b12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	51eb851f 	.word	0x51eb851f

08001b20 <ADC_PA0_Read>:
extern ADC_HandleTypeDef hadc1;

//static void ADC_PA0_ContinuousConv_Init(void);

uint32_t ADC_PA0_Read(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <ADC_PA0_Read+0x10>)
 8001b26:	f7fe ff4e 	bl	80009c6 <HAL_ADC_GetValue>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000088 	.word	0x20000088

08001b34 <ADC_PA0_SingleConv_Init>:
//	HAL_ADC_Start(&hadc1);
//}


void ADC_PA0_SingleConv_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
	// Configure GPIO PA0 as analog mode
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef Gpiostruct;

	Gpiostruct.Pin 		= GPIO_PIN_0;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
	Gpiostruct.Mode 	= GPIO_MODE_ANALOG;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
	Gpiostruct.Pull		= GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA,&Gpiostruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4824      	ldr	r0, [pc, #144]	; (8001bfc <ADC_PA0_SingleConv_Init+0xc8>)
 8001b6a:	f7ff fa3b 	bl	8000fe4 <HAL_GPIO_Init>

	// Configure ADC for continuous conversion mode

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <ADC_PA0_SingleConv_Init+0xc4>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance 						= ADC1;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <ADC_PA0_SingleConv_Init+0xd0>)
 8001b8e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler 			= ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution				= ADC_RESOLUTION_12B;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode		= DISABLE;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode	= DISABLE;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv			= ADC_SOFTWARE_START;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <ADC_PA0_SingleConv_Init+0xd4>)
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion			= 1;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests	= DISABLE;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection				= ADC_EOC_SINGLE_CONV;
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bd2:	f7fe fd4f 	bl	8000674 <HAL_ADC_Init>

	// Configure Channel for ADC and link PA0  and ADC1

	ADC_ChannelConfTypeDef	sconfig;

	sconfig.Channel			=	ADC_CHANNEL_0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
	sconfig.Rank			= 	1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
	sconfig.SamplingTime	=	ADC_SAMPLETIME_480CYCLES;
 8001bde:	2307      	movs	r3, #7
 8001be0:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sconfig);
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <ADC_PA0_SingleConv_Init+0xcc>)
 8001bea:	f7fe fef9 	bl	80009e0 <HAL_ADC_ConfigChannel>
}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	; 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	20000088 	.word	0x20000088
 8001c04:	40012000 	.word	0x40012000
 8001c08:	0f000001 	.word	0x0f000001

08001c0c <main>:
/* GLOBAL VARIABLES */
ADC_HandleTypeDef hadc1;
uint32_t Sensor_Value;

int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	HAL_Init();
 8001c10:	f7fe fcbc 	bl	800058c <HAL_Init>
	UART1_Init();
 8001c14:	f000 f8d4 	bl	8001dc0 <UART1_Init>
	ADC_PA0_SingleConv_Init();
 8001c18:	f7ff ff8c 	bl	8001b34 <ADC_PA0_SingleConv_Init>
	while(1)
	{
		// 1. Start ADC
		// In single conversion mode and will stop after converting once
		// so start again and again
		HAL_ADC_Start(&hadc1);
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <main+0x38>)
 8001c1e:	f7fe fd75 	bl	800070c <HAL_ADC_Start>

		// 2. Poll for Conversion
		HAL_ADC_PollForConversion(&hadc1, 1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <main+0x38>)
 8001c26:	f7fe fe43 	bl	80008b0 <HAL_ADC_PollForConversion>

		// 3, Get conversion
		Sensor_Value = ADC_PA0_Read();
 8001c2a:	f7ff ff79 	bl	8001b20 <ADC_PA0_Read>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <main+0x3c>)
 8001c32:	6013      	str	r3, [r2, #0]
		printf("Sensor Value is :- %d \n\r",(int)Sensor_Value);
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <main+0x3c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <main+0x40>)
 8001c3c:	f000 fa04 	bl	8002048 <iprintf>
		HAL_ADC_Start(&hadc1);
 8001c40:	e7ec      	b.n	8001c1c <main+0x10>
 8001c42:	bf00      	nop
 8001c44:	20000088 	.word	0x20000088
 8001c48:	200000d0 	.word	0x200000d0
 8001c4c:	08002d3c 	.word	0x08002d3c

08001c50 <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001c54:	f7fe fcf2 	bl	800063c <HAL_IncTick>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
  }

  return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f873 	bl	8001d9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
  }
  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f000 fa16 	bl	8002190 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20020000 	.word	0x20020000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	200000d4 	.word	0x200000d4
 8001d98:	20000268 	.word	0x20000268

08001d9c <__io_putchar>:

UART_HandleTypeDef		Uart1;


int __io_putchar(int ch)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart1,(uint8_t*)&ch,1,100);
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	2201      	movs	r2, #1
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <__io_putchar+0x20>)
 8001dac:	f7ff fb3c 	bl	8001428 <HAL_UART_Transmit>
	return ch;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200000d8 	.word	0x200000d8

08001dc0 <UART1_Init>:


void UART1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <UART1_Init+0xa0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <UART1_Init+0xa0>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <UART1_Init+0xa0>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

	// Configure Clock for UART
	__HAL_RCC_USART1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <UART1_Init+0xa0>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <UART1_Init+0xa0>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <UART1_Init+0xa0>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
 8001dfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e02:	60fb      	str	r3, [r7, #12]
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
	GpioStruct.Pull			= 	GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GpioStruct);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <UART1_Init+0xa4>)
 8001e1c:	f7ff f8e2 	bl	8000fe4 <HAL_GPIO_Init>

	// USART2 Configuration


	Uart1.Instance				=	USART1; // USART2 Base Address is given
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <UART1_Init+0xa8>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <UART1_Init+0xac>)
 8001e24:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART

	Uart1.Init.BaudRate			=	115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <UART1_Init+0xa8>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <UART1_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <UART1_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <UART1_Init+0xa8>)
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <UART1_Init+0xa8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <UART1_Init+0xa8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <UART1_Init+0xa8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <UART1_Init+0xa8>)
 8001e54:	f7ff fa92 	bl	800137c <HAL_UART_Init>

}
 8001e58:	bf00      	nop
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	200000d8 	.word	0x200000d8
 8001e6c:	40011000 	.word	0x40011000

08001e70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e78:	480c      	ldr	r0, [pc, #48]	; (8001eac <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7a:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <LoopForever+0xe>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e90:	4c0a      	ldr	r4, [pc, #40]	; (8001ebc <LoopForever+0x16>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e9e:	f000 f97d 	bl	800219c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ea2:	f7ff feb3 	bl	8001c0c <main>

08001ea6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
  ldr   r0, =_estack
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001eb4:	08002da4 	.word	0x08002da4
  ldr r2, =_sbss
 8001eb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ebc:	20000268 	.word	0x20000268

08001ec0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <std>:
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	4604      	mov	r4, r0
 8001eca:	e9c0 3300 	strd	r3, r3, [r0]
 8001ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ed2:	6083      	str	r3, [r0, #8]
 8001ed4:	8181      	strh	r1, [r0, #12]
 8001ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ed8:	81c2      	strh	r2, [r0, #14]
 8001eda:	6183      	str	r3, [r0, #24]
 8001edc:	4619      	mov	r1, r3
 8001ede:	2208      	movs	r2, #8
 8001ee0:	305c      	adds	r0, #92	; 0x5c
 8001ee2:	f000 f906 	bl	80020f2 <memset>
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <std+0x58>)
 8001ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <std+0x5c>)
 8001eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <std+0x60>)
 8001ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <std+0x64>)
 8001ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <std+0x68>)
 8001ef8:	6224      	str	r4, [r4, #32]
 8001efa:	429c      	cmp	r4, r3
 8001efc:	d006      	beq.n	8001f0c <std+0x48>
 8001efe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001f02:	4294      	cmp	r4, r2
 8001f04:	d002      	beq.n	8001f0c <std+0x48>
 8001f06:	33d0      	adds	r3, #208	; 0xd0
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	d105      	bne.n	8001f18 <std+0x54>
 8001f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f14:	f000 b966 	b.w	80021e4 <__retarget_lock_init_recursive>
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	0800206d 	.word	0x0800206d
 8001f20:	0800208f 	.word	0x0800208f
 8001f24:	080020c7 	.word	0x080020c7
 8001f28:	080020eb 	.word	0x080020eb
 8001f2c:	2000011c 	.word	0x2000011c

08001f30 <stdio_exit_handler>:
 8001f30:	4a02      	ldr	r2, [pc, #8]	; (8001f3c <stdio_exit_handler+0xc>)
 8001f32:	4903      	ldr	r1, [pc, #12]	; (8001f40 <stdio_exit_handler+0x10>)
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <stdio_exit_handler+0x14>)
 8001f36:	f000 b869 	b.w	800200c <_fwalk_sglue>
 8001f3a:	bf00      	nop
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	08002a81 	.word	0x08002a81
 8001f44:	20000018 	.word	0x20000018

08001f48 <cleanup_stdio>:
 8001f48:	6841      	ldr	r1, [r0, #4]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <cleanup_stdio+0x34>)
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	b510      	push	{r4, lr}
 8001f50:	4604      	mov	r4, r0
 8001f52:	d001      	beq.n	8001f58 <cleanup_stdio+0x10>
 8001f54:	f000 fd94 	bl	8002a80 <_fflush_r>
 8001f58:	68a1      	ldr	r1, [r4, #8]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <cleanup_stdio+0x38>)
 8001f5c:	4299      	cmp	r1, r3
 8001f5e:	d002      	beq.n	8001f66 <cleanup_stdio+0x1e>
 8001f60:	4620      	mov	r0, r4
 8001f62:	f000 fd8d 	bl	8002a80 <_fflush_r>
 8001f66:	68e1      	ldr	r1, [r4, #12]
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <cleanup_stdio+0x3c>)
 8001f6a:	4299      	cmp	r1, r3
 8001f6c:	d004      	beq.n	8001f78 <cleanup_stdio+0x30>
 8001f6e:	4620      	mov	r0, r4
 8001f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f74:	f000 bd84 	b.w	8002a80 <_fflush_r>
 8001f78:	bd10      	pop	{r4, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000011c 	.word	0x2000011c
 8001f80:	20000184 	.word	0x20000184
 8001f84:	200001ec 	.word	0x200001ec

08001f88 <global_stdio_init.part.0>:
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <global_stdio_init.part.0+0x30>)
 8001f8c:	4c0b      	ldr	r4, [pc, #44]	; (8001fbc <global_stdio_init.part.0+0x34>)
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <global_stdio_init.part.0+0x38>)
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	4620      	mov	r0, r4
 8001f94:	2200      	movs	r2, #0
 8001f96:	2104      	movs	r1, #4
 8001f98:	f7ff ff94 	bl	8001ec4 <std>
 8001f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2109      	movs	r1, #9
 8001fa4:	f7ff ff8e 	bl	8001ec4 <std>
 8001fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001fac:	2202      	movs	r2, #2
 8001fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb2:	2112      	movs	r1, #18
 8001fb4:	f7ff bf86 	b.w	8001ec4 <std>
 8001fb8:	20000254 	.word	0x20000254
 8001fbc:	2000011c 	.word	0x2000011c
 8001fc0:	08001f31 	.word	0x08001f31

08001fc4 <__sfp_lock_acquire>:
 8001fc4:	4801      	ldr	r0, [pc, #4]	; (8001fcc <__sfp_lock_acquire+0x8>)
 8001fc6:	f000 b90e 	b.w	80021e6 <__retarget_lock_acquire_recursive>
 8001fca:	bf00      	nop
 8001fcc:	2000025d 	.word	0x2000025d

08001fd0 <__sfp_lock_release>:
 8001fd0:	4801      	ldr	r0, [pc, #4]	; (8001fd8 <__sfp_lock_release+0x8>)
 8001fd2:	f000 b909 	b.w	80021e8 <__retarget_lock_release_recursive>
 8001fd6:	bf00      	nop
 8001fd8:	2000025d 	.word	0x2000025d

08001fdc <__sinit>:
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4604      	mov	r4, r0
 8001fe0:	f7ff fff0 	bl	8001fc4 <__sfp_lock_acquire>
 8001fe4:	6a23      	ldr	r3, [r4, #32]
 8001fe6:	b11b      	cbz	r3, 8001ff0 <__sinit+0x14>
 8001fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fec:	f7ff bff0 	b.w	8001fd0 <__sfp_lock_release>
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__sinit+0x28>)
 8001ff2:	6223      	str	r3, [r4, #32]
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__sinit+0x2c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f5      	bne.n	8001fe8 <__sinit+0xc>
 8001ffc:	f7ff ffc4 	bl	8001f88 <global_stdio_init.part.0>
 8002000:	e7f2      	b.n	8001fe8 <__sinit+0xc>
 8002002:	bf00      	nop
 8002004:	08001f49 	.word	0x08001f49
 8002008:	20000254 	.word	0x20000254

0800200c <_fwalk_sglue>:
 800200c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002010:	4607      	mov	r7, r0
 8002012:	4688      	mov	r8, r1
 8002014:	4614      	mov	r4, r2
 8002016:	2600      	movs	r6, #0
 8002018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800201c:	f1b9 0901 	subs.w	r9, r9, #1
 8002020:	d505      	bpl.n	800202e <_fwalk_sglue+0x22>
 8002022:	6824      	ldr	r4, [r4, #0]
 8002024:	2c00      	cmp	r4, #0
 8002026:	d1f7      	bne.n	8002018 <_fwalk_sglue+0xc>
 8002028:	4630      	mov	r0, r6
 800202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800202e:	89ab      	ldrh	r3, [r5, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d907      	bls.n	8002044 <_fwalk_sglue+0x38>
 8002034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002038:	3301      	adds	r3, #1
 800203a:	d003      	beq.n	8002044 <_fwalk_sglue+0x38>
 800203c:	4629      	mov	r1, r5
 800203e:	4638      	mov	r0, r7
 8002040:	47c0      	blx	r8
 8002042:	4306      	orrs	r6, r0
 8002044:	3568      	adds	r5, #104	; 0x68
 8002046:	e7e9      	b.n	800201c <_fwalk_sglue+0x10>

08002048 <iprintf>:
 8002048:	b40f      	push	{r0, r1, r2, r3}
 800204a:	b507      	push	{r0, r1, r2, lr}
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <iprintf+0x20>)
 800204e:	ab04      	add	r3, sp, #16
 8002050:	6808      	ldr	r0, [r1, #0]
 8002052:	f853 2b04 	ldr.w	r2, [r3], #4
 8002056:	6881      	ldr	r1, [r0, #8]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f000 f9e5 	bl	8002428 <_vfiprintf_r>
 800205e:	b003      	add	sp, #12
 8002060:	f85d eb04 	ldr.w	lr, [sp], #4
 8002064:	b004      	add	sp, #16
 8002066:	4770      	bx	lr
 8002068:	20000064 	.word	0x20000064

0800206c <__sread>:
 800206c:	b510      	push	{r4, lr}
 800206e:	460c      	mov	r4, r1
 8002070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002074:	f000 f868 	bl	8002148 <_read_r>
 8002078:	2800      	cmp	r0, #0
 800207a:	bfab      	itete	ge
 800207c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800207e:	89a3      	ldrhlt	r3, [r4, #12]
 8002080:	181b      	addge	r3, r3, r0
 8002082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002086:	bfac      	ite	ge
 8002088:	6563      	strge	r3, [r4, #84]	; 0x54
 800208a:	81a3      	strhlt	r3, [r4, #12]
 800208c:	bd10      	pop	{r4, pc}

0800208e <__swrite>:
 800208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002092:	461f      	mov	r7, r3
 8002094:	898b      	ldrh	r3, [r1, #12]
 8002096:	05db      	lsls	r3, r3, #23
 8002098:	4605      	mov	r5, r0
 800209a:	460c      	mov	r4, r1
 800209c:	4616      	mov	r6, r2
 800209e:	d505      	bpl.n	80020ac <__swrite+0x1e>
 80020a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a4:	2302      	movs	r3, #2
 80020a6:	2200      	movs	r2, #0
 80020a8:	f000 f83c 	bl	8002124 <_lseek_r>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b6:	81a3      	strh	r3, [r4, #12]
 80020b8:	4632      	mov	r2, r6
 80020ba:	463b      	mov	r3, r7
 80020bc:	4628      	mov	r0, r5
 80020be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020c2:	f000 b853 	b.w	800216c <_write_r>

080020c6 <__sseek>:
 80020c6:	b510      	push	{r4, lr}
 80020c8:	460c      	mov	r4, r1
 80020ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ce:	f000 f829 	bl	8002124 <_lseek_r>
 80020d2:	1c43      	adds	r3, r0, #1
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	bf15      	itete	ne
 80020d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80020da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020e2:	81a3      	strheq	r3, [r4, #12]
 80020e4:	bf18      	it	ne
 80020e6:	81a3      	strhne	r3, [r4, #12]
 80020e8:	bd10      	pop	{r4, pc}

080020ea <__sclose>:
 80020ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ee:	f000 b809 	b.w	8002104 <_close_r>

080020f2 <memset>:
 80020f2:	4402      	add	r2, r0
 80020f4:	4603      	mov	r3, r0
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d100      	bne.n	80020fc <memset+0xa>
 80020fa:	4770      	bx	lr
 80020fc:	f803 1b01 	strb.w	r1, [r3], #1
 8002100:	e7f9      	b.n	80020f6 <memset+0x4>
	...

08002104 <_close_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4d06      	ldr	r5, [pc, #24]	; (8002120 <_close_r+0x1c>)
 8002108:	2300      	movs	r3, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	602b      	str	r3, [r5, #0]
 8002110:	f7ff fddd 	bl	8001cce <_close>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d102      	bne.n	800211e <_close_r+0x1a>
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	b103      	cbz	r3, 800211e <_close_r+0x1a>
 800211c:	6023      	str	r3, [r4, #0]
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	20000258 	.word	0x20000258

08002124 <_lseek_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4d07      	ldr	r5, [pc, #28]	; (8002144 <_lseek_r+0x20>)
 8002128:	4604      	mov	r4, r0
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	2200      	movs	r2, #0
 8002130:	602a      	str	r2, [r5, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff fdef 	bl	8001d16 <_lseek>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_lseek_r+0x1e>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	b103      	cbz	r3, 8002142 <_lseek_r+0x1e>
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	20000258 	.word	0x20000258

08002148 <_read_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4d07      	ldr	r5, [pc, #28]	; (8002168 <_read_r+0x20>)
 800214c:	4604      	mov	r4, r0
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	2200      	movs	r2, #0
 8002154:	602a      	str	r2, [r5, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fd80 	bl	8001c5c <_read>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_read_r+0x1e>
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	b103      	cbz	r3, 8002166 <_read_r+0x1e>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	20000258 	.word	0x20000258

0800216c <_write_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4d07      	ldr	r5, [pc, #28]	; (800218c <_write_r+0x20>)
 8002170:	4604      	mov	r4, r0
 8002172:	4608      	mov	r0, r1
 8002174:	4611      	mov	r1, r2
 8002176:	2200      	movs	r2, #0
 8002178:	602a      	str	r2, [r5, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	f7ff fd8b 	bl	8001c96 <_write>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d102      	bne.n	800218a <_write_r+0x1e>
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	b103      	cbz	r3, 800218a <_write_r+0x1e>
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	bd38      	pop	{r3, r4, r5, pc}
 800218c:	20000258 	.word	0x20000258

08002190 <__errno>:
 8002190:	4b01      	ldr	r3, [pc, #4]	; (8002198 <__errno+0x8>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000064 	.word	0x20000064

0800219c <__libc_init_array>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	4d0d      	ldr	r5, [pc, #52]	; (80021d4 <__libc_init_array+0x38>)
 80021a0:	4c0d      	ldr	r4, [pc, #52]	; (80021d8 <__libc_init_array+0x3c>)
 80021a2:	1b64      	subs	r4, r4, r5
 80021a4:	10a4      	asrs	r4, r4, #2
 80021a6:	2600      	movs	r6, #0
 80021a8:	42a6      	cmp	r6, r4
 80021aa:	d109      	bne.n	80021c0 <__libc_init_array+0x24>
 80021ac:	4d0b      	ldr	r5, [pc, #44]	; (80021dc <__libc_init_array+0x40>)
 80021ae:	4c0c      	ldr	r4, [pc, #48]	; (80021e0 <__libc_init_array+0x44>)
 80021b0:	f000 fdb8 	bl	8002d24 <_init>
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	2600      	movs	r6, #0
 80021ba:	42a6      	cmp	r6, r4
 80021bc:	d105      	bne.n	80021ca <__libc_init_array+0x2e>
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c4:	4798      	blx	r3
 80021c6:	3601      	adds	r6, #1
 80021c8:	e7ee      	b.n	80021a8 <__libc_init_array+0xc>
 80021ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ce:	4798      	blx	r3
 80021d0:	3601      	adds	r6, #1
 80021d2:	e7f2      	b.n	80021ba <__libc_init_array+0x1e>
 80021d4:	08002d9c 	.word	0x08002d9c
 80021d8:	08002d9c 	.word	0x08002d9c
 80021dc:	08002d9c 	.word	0x08002d9c
 80021e0:	08002da0 	.word	0x08002da0

080021e4 <__retarget_lock_init_recursive>:
 80021e4:	4770      	bx	lr

080021e6 <__retarget_lock_acquire_recursive>:
 80021e6:	4770      	bx	lr

080021e8 <__retarget_lock_release_recursive>:
 80021e8:	4770      	bx	lr
	...

080021ec <_free_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4605      	mov	r5, r0
 80021f0:	2900      	cmp	r1, #0
 80021f2:	d041      	beq.n	8002278 <_free_r+0x8c>
 80021f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021f8:	1f0c      	subs	r4, r1, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bfb8      	it	lt
 80021fe:	18e4      	addlt	r4, r4, r3
 8002200:	f000 f8de 	bl	80023c0 <__malloc_lock>
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <_free_r+0x90>)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	b933      	cbnz	r3, 8002218 <_free_r+0x2c>
 800220a:	6063      	str	r3, [r4, #4]
 800220c:	6014      	str	r4, [r2, #0]
 800220e:	4628      	mov	r0, r5
 8002210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002214:	f000 b8da 	b.w	80023cc <__malloc_unlock>
 8002218:	42a3      	cmp	r3, r4
 800221a:	d908      	bls.n	800222e <_free_r+0x42>
 800221c:	6820      	ldr	r0, [r4, #0]
 800221e:	1821      	adds	r1, r4, r0
 8002220:	428b      	cmp	r3, r1
 8002222:	bf01      	itttt	eq
 8002224:	6819      	ldreq	r1, [r3, #0]
 8002226:	685b      	ldreq	r3, [r3, #4]
 8002228:	1809      	addeq	r1, r1, r0
 800222a:	6021      	streq	r1, [r4, #0]
 800222c:	e7ed      	b.n	800220a <_free_r+0x1e>
 800222e:	461a      	mov	r2, r3
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	b10b      	cbz	r3, 8002238 <_free_r+0x4c>
 8002234:	42a3      	cmp	r3, r4
 8002236:	d9fa      	bls.n	800222e <_free_r+0x42>
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	1850      	adds	r0, r2, r1
 800223c:	42a0      	cmp	r0, r4
 800223e:	d10b      	bne.n	8002258 <_free_r+0x6c>
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	4401      	add	r1, r0
 8002244:	1850      	adds	r0, r2, r1
 8002246:	4283      	cmp	r3, r0
 8002248:	6011      	str	r1, [r2, #0]
 800224a:	d1e0      	bne.n	800220e <_free_r+0x22>
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	6053      	str	r3, [r2, #4]
 8002252:	4408      	add	r0, r1
 8002254:	6010      	str	r0, [r2, #0]
 8002256:	e7da      	b.n	800220e <_free_r+0x22>
 8002258:	d902      	bls.n	8002260 <_free_r+0x74>
 800225a:	230c      	movs	r3, #12
 800225c:	602b      	str	r3, [r5, #0]
 800225e:	e7d6      	b.n	800220e <_free_r+0x22>
 8002260:	6820      	ldr	r0, [r4, #0]
 8002262:	1821      	adds	r1, r4, r0
 8002264:	428b      	cmp	r3, r1
 8002266:	bf04      	itt	eq
 8002268:	6819      	ldreq	r1, [r3, #0]
 800226a:	685b      	ldreq	r3, [r3, #4]
 800226c:	6063      	str	r3, [r4, #4]
 800226e:	bf04      	itt	eq
 8002270:	1809      	addeq	r1, r1, r0
 8002272:	6021      	streq	r1, [r4, #0]
 8002274:	6054      	str	r4, [r2, #4]
 8002276:	e7ca      	b.n	800220e <_free_r+0x22>
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	bf00      	nop
 800227c:	20000260 	.word	0x20000260

08002280 <sbrk_aligned>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4e0e      	ldr	r6, [pc, #56]	; (80022bc <sbrk_aligned+0x3c>)
 8002284:	460c      	mov	r4, r1
 8002286:	6831      	ldr	r1, [r6, #0]
 8002288:	4605      	mov	r5, r0
 800228a:	b911      	cbnz	r1, 8002292 <sbrk_aligned+0x12>
 800228c:	f000 fcb6 	bl	8002bfc <_sbrk_r>
 8002290:	6030      	str	r0, [r6, #0]
 8002292:	4621      	mov	r1, r4
 8002294:	4628      	mov	r0, r5
 8002296:	f000 fcb1 	bl	8002bfc <_sbrk_r>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	d00a      	beq.n	80022b4 <sbrk_aligned+0x34>
 800229e:	1cc4      	adds	r4, r0, #3
 80022a0:	f024 0403 	bic.w	r4, r4, #3
 80022a4:	42a0      	cmp	r0, r4
 80022a6:	d007      	beq.n	80022b8 <sbrk_aligned+0x38>
 80022a8:	1a21      	subs	r1, r4, r0
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 fca6 	bl	8002bfc <_sbrk_r>
 80022b0:	3001      	adds	r0, #1
 80022b2:	d101      	bne.n	80022b8 <sbrk_aligned+0x38>
 80022b4:	f04f 34ff 	mov.w	r4, #4294967295
 80022b8:	4620      	mov	r0, r4
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
 80022bc:	20000264 	.word	0x20000264

080022c0 <_malloc_r>:
 80022c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022c4:	1ccd      	adds	r5, r1, #3
 80022c6:	f025 0503 	bic.w	r5, r5, #3
 80022ca:	3508      	adds	r5, #8
 80022cc:	2d0c      	cmp	r5, #12
 80022ce:	bf38      	it	cc
 80022d0:	250c      	movcc	r5, #12
 80022d2:	2d00      	cmp	r5, #0
 80022d4:	4607      	mov	r7, r0
 80022d6:	db01      	blt.n	80022dc <_malloc_r+0x1c>
 80022d8:	42a9      	cmp	r1, r5
 80022da:	d905      	bls.n	80022e8 <_malloc_r+0x28>
 80022dc:	230c      	movs	r3, #12
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	2600      	movs	r6, #0
 80022e2:	4630      	mov	r0, r6
 80022e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023bc <_malloc_r+0xfc>
 80022ec:	f000 f868 	bl	80023c0 <__malloc_lock>
 80022f0:	f8d8 3000 	ldr.w	r3, [r8]
 80022f4:	461c      	mov	r4, r3
 80022f6:	bb5c      	cbnz	r4, 8002350 <_malloc_r+0x90>
 80022f8:	4629      	mov	r1, r5
 80022fa:	4638      	mov	r0, r7
 80022fc:	f7ff ffc0 	bl	8002280 <sbrk_aligned>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	4604      	mov	r4, r0
 8002304:	d155      	bne.n	80023b2 <_malloc_r+0xf2>
 8002306:	f8d8 4000 	ldr.w	r4, [r8]
 800230a:	4626      	mov	r6, r4
 800230c:	2e00      	cmp	r6, #0
 800230e:	d145      	bne.n	800239c <_malloc_r+0xdc>
 8002310:	2c00      	cmp	r4, #0
 8002312:	d048      	beq.n	80023a6 <_malloc_r+0xe6>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	4631      	mov	r1, r6
 8002318:	4638      	mov	r0, r7
 800231a:	eb04 0903 	add.w	r9, r4, r3
 800231e:	f000 fc6d 	bl	8002bfc <_sbrk_r>
 8002322:	4581      	cmp	r9, r0
 8002324:	d13f      	bne.n	80023a6 <_malloc_r+0xe6>
 8002326:	6821      	ldr	r1, [r4, #0]
 8002328:	1a6d      	subs	r5, r5, r1
 800232a:	4629      	mov	r1, r5
 800232c:	4638      	mov	r0, r7
 800232e:	f7ff ffa7 	bl	8002280 <sbrk_aligned>
 8002332:	3001      	adds	r0, #1
 8002334:	d037      	beq.n	80023a6 <_malloc_r+0xe6>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	442b      	add	r3, r5
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	f8d8 3000 	ldr.w	r3, [r8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d038      	beq.n	80023b6 <_malloc_r+0xf6>
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	42a2      	cmp	r2, r4
 8002348:	d12b      	bne.n	80023a2 <_malloc_r+0xe2>
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	e00f      	b.n	8002370 <_malloc_r+0xb0>
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	1b52      	subs	r2, r2, r5
 8002354:	d41f      	bmi.n	8002396 <_malloc_r+0xd6>
 8002356:	2a0b      	cmp	r2, #11
 8002358:	d917      	bls.n	800238a <_malloc_r+0xca>
 800235a:	1961      	adds	r1, r4, r5
 800235c:	42a3      	cmp	r3, r4
 800235e:	6025      	str	r5, [r4, #0]
 8002360:	bf18      	it	ne
 8002362:	6059      	strne	r1, [r3, #4]
 8002364:	6863      	ldr	r3, [r4, #4]
 8002366:	bf08      	it	eq
 8002368:	f8c8 1000 	streq.w	r1, [r8]
 800236c:	5162      	str	r2, [r4, r5]
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	4638      	mov	r0, r7
 8002372:	f104 060b 	add.w	r6, r4, #11
 8002376:	f000 f829 	bl	80023cc <__malloc_unlock>
 800237a:	f026 0607 	bic.w	r6, r6, #7
 800237e:	1d23      	adds	r3, r4, #4
 8002380:	1af2      	subs	r2, r6, r3
 8002382:	d0ae      	beq.n	80022e2 <_malloc_r+0x22>
 8002384:	1b9b      	subs	r3, r3, r6
 8002386:	50a3      	str	r3, [r4, r2]
 8002388:	e7ab      	b.n	80022e2 <_malloc_r+0x22>
 800238a:	42a3      	cmp	r3, r4
 800238c:	6862      	ldr	r2, [r4, #4]
 800238e:	d1dd      	bne.n	800234c <_malloc_r+0x8c>
 8002390:	f8c8 2000 	str.w	r2, [r8]
 8002394:	e7ec      	b.n	8002370 <_malloc_r+0xb0>
 8002396:	4623      	mov	r3, r4
 8002398:	6864      	ldr	r4, [r4, #4]
 800239a:	e7ac      	b.n	80022f6 <_malloc_r+0x36>
 800239c:	4634      	mov	r4, r6
 800239e:	6876      	ldr	r6, [r6, #4]
 80023a0:	e7b4      	b.n	800230c <_malloc_r+0x4c>
 80023a2:	4613      	mov	r3, r2
 80023a4:	e7cc      	b.n	8002340 <_malloc_r+0x80>
 80023a6:	230c      	movs	r3, #12
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4638      	mov	r0, r7
 80023ac:	f000 f80e 	bl	80023cc <__malloc_unlock>
 80023b0:	e797      	b.n	80022e2 <_malloc_r+0x22>
 80023b2:	6025      	str	r5, [r4, #0]
 80023b4:	e7dc      	b.n	8002370 <_malloc_r+0xb0>
 80023b6:	605b      	str	r3, [r3, #4]
 80023b8:	deff      	udf	#255	; 0xff
 80023ba:	bf00      	nop
 80023bc:	20000260 	.word	0x20000260

080023c0 <__malloc_lock>:
 80023c0:	4801      	ldr	r0, [pc, #4]	; (80023c8 <__malloc_lock+0x8>)
 80023c2:	f7ff bf10 	b.w	80021e6 <__retarget_lock_acquire_recursive>
 80023c6:	bf00      	nop
 80023c8:	2000025c 	.word	0x2000025c

080023cc <__malloc_unlock>:
 80023cc:	4801      	ldr	r0, [pc, #4]	; (80023d4 <__malloc_unlock+0x8>)
 80023ce:	f7ff bf0b 	b.w	80021e8 <__retarget_lock_release_recursive>
 80023d2:	bf00      	nop
 80023d4:	2000025c 	.word	0x2000025c

080023d8 <__sfputc_r>:
 80023d8:	6893      	ldr	r3, [r2, #8]
 80023da:	3b01      	subs	r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	b410      	push	{r4}
 80023e0:	6093      	str	r3, [r2, #8]
 80023e2:	da07      	bge.n	80023f4 <__sfputc_r+0x1c>
 80023e4:	6994      	ldr	r4, [r2, #24]
 80023e6:	42a3      	cmp	r3, r4
 80023e8:	db01      	blt.n	80023ee <__sfputc_r+0x16>
 80023ea:	290a      	cmp	r1, #10
 80023ec:	d102      	bne.n	80023f4 <__sfputc_r+0x1c>
 80023ee:	bc10      	pop	{r4}
 80023f0:	f000 bb6e 	b.w	8002ad0 <__swbuf_r>
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	1c58      	adds	r0, r3, #1
 80023f8:	6010      	str	r0, [r2, #0]
 80023fa:	7019      	strb	r1, [r3, #0]
 80023fc:	4608      	mov	r0, r1
 80023fe:	bc10      	pop	{r4}
 8002400:	4770      	bx	lr

08002402 <__sfputs_r>:
 8002402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002404:	4606      	mov	r6, r0
 8002406:	460f      	mov	r7, r1
 8002408:	4614      	mov	r4, r2
 800240a:	18d5      	adds	r5, r2, r3
 800240c:	42ac      	cmp	r4, r5
 800240e:	d101      	bne.n	8002414 <__sfputs_r+0x12>
 8002410:	2000      	movs	r0, #0
 8002412:	e007      	b.n	8002424 <__sfputs_r+0x22>
 8002414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002418:	463a      	mov	r2, r7
 800241a:	4630      	mov	r0, r6
 800241c:	f7ff ffdc 	bl	80023d8 <__sfputc_r>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	d1f3      	bne.n	800240c <__sfputs_r+0xa>
 8002424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002428 <_vfiprintf_r>:
 8002428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	460d      	mov	r5, r1
 800242e:	b09d      	sub	sp, #116	; 0x74
 8002430:	4614      	mov	r4, r2
 8002432:	4698      	mov	r8, r3
 8002434:	4606      	mov	r6, r0
 8002436:	b118      	cbz	r0, 8002440 <_vfiprintf_r+0x18>
 8002438:	6a03      	ldr	r3, [r0, #32]
 800243a:	b90b      	cbnz	r3, 8002440 <_vfiprintf_r+0x18>
 800243c:	f7ff fdce 	bl	8001fdc <__sinit>
 8002440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002442:	07d9      	lsls	r1, r3, #31
 8002444:	d405      	bmi.n	8002452 <_vfiprintf_r+0x2a>
 8002446:	89ab      	ldrh	r3, [r5, #12]
 8002448:	059a      	lsls	r2, r3, #22
 800244a:	d402      	bmi.n	8002452 <_vfiprintf_r+0x2a>
 800244c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800244e:	f7ff feca 	bl	80021e6 <__retarget_lock_acquire_recursive>
 8002452:	89ab      	ldrh	r3, [r5, #12]
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	d501      	bpl.n	800245c <_vfiprintf_r+0x34>
 8002458:	692b      	ldr	r3, [r5, #16]
 800245a:	b99b      	cbnz	r3, 8002484 <_vfiprintf_r+0x5c>
 800245c:	4629      	mov	r1, r5
 800245e:	4630      	mov	r0, r6
 8002460:	f000 fb74 	bl	8002b4c <__swsetup_r>
 8002464:	b170      	cbz	r0, 8002484 <_vfiprintf_r+0x5c>
 8002466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002468:	07dc      	lsls	r4, r3, #31
 800246a:	d504      	bpl.n	8002476 <_vfiprintf_r+0x4e>
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	b01d      	add	sp, #116	; 0x74
 8002472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002476:	89ab      	ldrh	r3, [r5, #12]
 8002478:	0598      	lsls	r0, r3, #22
 800247a:	d4f7      	bmi.n	800246c <_vfiprintf_r+0x44>
 800247c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800247e:	f7ff feb3 	bl	80021e8 <__retarget_lock_release_recursive>
 8002482:	e7f3      	b.n	800246c <_vfiprintf_r+0x44>
 8002484:	2300      	movs	r3, #0
 8002486:	9309      	str	r3, [sp, #36]	; 0x24
 8002488:	2320      	movs	r3, #32
 800248a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800248e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002492:	2330      	movs	r3, #48	; 0x30
 8002494:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002648 <_vfiprintf_r+0x220>
 8002498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800249c:	f04f 0901 	mov.w	r9, #1
 80024a0:	4623      	mov	r3, r4
 80024a2:	469a      	mov	sl, r3
 80024a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024a8:	b10a      	cbz	r2, 80024ae <_vfiprintf_r+0x86>
 80024aa:	2a25      	cmp	r2, #37	; 0x25
 80024ac:	d1f9      	bne.n	80024a2 <_vfiprintf_r+0x7a>
 80024ae:	ebba 0b04 	subs.w	fp, sl, r4
 80024b2:	d00b      	beq.n	80024cc <_vfiprintf_r+0xa4>
 80024b4:	465b      	mov	r3, fp
 80024b6:	4622      	mov	r2, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	4630      	mov	r0, r6
 80024bc:	f7ff ffa1 	bl	8002402 <__sfputs_r>
 80024c0:	3001      	adds	r0, #1
 80024c2:	f000 80a9 	beq.w	8002618 <_vfiprintf_r+0x1f0>
 80024c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024c8:	445a      	add	r2, fp
 80024ca:	9209      	str	r2, [sp, #36]	; 0x24
 80024cc:	f89a 3000 	ldrb.w	r3, [sl]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a1 	beq.w	8002618 <_vfiprintf_r+0x1f0>
 80024d6:	2300      	movs	r3, #0
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024e0:	f10a 0a01 	add.w	sl, sl, #1
 80024e4:	9304      	str	r3, [sp, #16]
 80024e6:	9307      	str	r3, [sp, #28]
 80024e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024ec:	931a      	str	r3, [sp, #104]	; 0x68
 80024ee:	4654      	mov	r4, sl
 80024f0:	2205      	movs	r2, #5
 80024f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f6:	4854      	ldr	r0, [pc, #336]	; (8002648 <_vfiprintf_r+0x220>)
 80024f8:	f7fd fe7a 	bl	80001f0 <memchr>
 80024fc:	9a04      	ldr	r2, [sp, #16]
 80024fe:	b9d8      	cbnz	r0, 8002538 <_vfiprintf_r+0x110>
 8002500:	06d1      	lsls	r1, r2, #27
 8002502:	bf44      	itt	mi
 8002504:	2320      	movmi	r3, #32
 8002506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800250a:	0713      	lsls	r3, r2, #28
 800250c:	bf44      	itt	mi
 800250e:	232b      	movmi	r3, #43	; 0x2b
 8002510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002514:	f89a 3000 	ldrb.w	r3, [sl]
 8002518:	2b2a      	cmp	r3, #42	; 0x2a
 800251a:	d015      	beq.n	8002548 <_vfiprintf_r+0x120>
 800251c:	9a07      	ldr	r2, [sp, #28]
 800251e:	4654      	mov	r4, sl
 8002520:	2000      	movs	r0, #0
 8002522:	f04f 0c0a 	mov.w	ip, #10
 8002526:	4621      	mov	r1, r4
 8002528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800252c:	3b30      	subs	r3, #48	; 0x30
 800252e:	2b09      	cmp	r3, #9
 8002530:	d94d      	bls.n	80025ce <_vfiprintf_r+0x1a6>
 8002532:	b1b0      	cbz	r0, 8002562 <_vfiprintf_r+0x13a>
 8002534:	9207      	str	r2, [sp, #28]
 8002536:	e014      	b.n	8002562 <_vfiprintf_r+0x13a>
 8002538:	eba0 0308 	sub.w	r3, r0, r8
 800253c:	fa09 f303 	lsl.w	r3, r9, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	9304      	str	r3, [sp, #16]
 8002544:	46a2      	mov	sl, r4
 8002546:	e7d2      	b.n	80024ee <_vfiprintf_r+0xc6>
 8002548:	9b03      	ldr	r3, [sp, #12]
 800254a:	1d19      	adds	r1, r3, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	9103      	str	r1, [sp, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	bfbb      	ittet	lt
 8002554:	425b      	neglt	r3, r3
 8002556:	f042 0202 	orrlt.w	r2, r2, #2
 800255a:	9307      	strge	r3, [sp, #28]
 800255c:	9307      	strlt	r3, [sp, #28]
 800255e:	bfb8      	it	lt
 8002560:	9204      	strlt	r2, [sp, #16]
 8002562:	7823      	ldrb	r3, [r4, #0]
 8002564:	2b2e      	cmp	r3, #46	; 0x2e
 8002566:	d10c      	bne.n	8002582 <_vfiprintf_r+0x15a>
 8002568:	7863      	ldrb	r3, [r4, #1]
 800256a:	2b2a      	cmp	r3, #42	; 0x2a
 800256c:	d134      	bne.n	80025d8 <_vfiprintf_r+0x1b0>
 800256e:	9b03      	ldr	r3, [sp, #12]
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	9203      	str	r2, [sp, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	bfb8      	it	lt
 800257a:	f04f 33ff 	movlt.w	r3, #4294967295
 800257e:	3402      	adds	r4, #2
 8002580:	9305      	str	r3, [sp, #20]
 8002582:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800264c <_vfiprintf_r+0x224>
 8002586:	7821      	ldrb	r1, [r4, #0]
 8002588:	2203      	movs	r2, #3
 800258a:	4650      	mov	r0, sl
 800258c:	f7fd fe30 	bl	80001f0 <memchr>
 8002590:	b138      	cbz	r0, 80025a2 <_vfiprintf_r+0x17a>
 8002592:	9b04      	ldr	r3, [sp, #16]
 8002594:	eba0 000a 	sub.w	r0, r0, sl
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	4082      	lsls	r2, r0
 800259c:	4313      	orrs	r3, r2
 800259e:	3401      	adds	r4, #1
 80025a0:	9304      	str	r3, [sp, #16]
 80025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a6:	482a      	ldr	r0, [pc, #168]	; (8002650 <_vfiprintf_r+0x228>)
 80025a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025ac:	2206      	movs	r2, #6
 80025ae:	f7fd fe1f 	bl	80001f0 <memchr>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d03f      	beq.n	8002636 <_vfiprintf_r+0x20e>
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <_vfiprintf_r+0x22c>)
 80025b8:	bb1b      	cbnz	r3, 8002602 <_vfiprintf_r+0x1da>
 80025ba:	9b03      	ldr	r3, [sp, #12]
 80025bc:	3307      	adds	r3, #7
 80025be:	f023 0307 	bic.w	r3, r3, #7
 80025c2:	3308      	adds	r3, #8
 80025c4:	9303      	str	r3, [sp, #12]
 80025c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025c8:	443b      	add	r3, r7
 80025ca:	9309      	str	r3, [sp, #36]	; 0x24
 80025cc:	e768      	b.n	80024a0 <_vfiprintf_r+0x78>
 80025ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80025d2:	460c      	mov	r4, r1
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7a6      	b.n	8002526 <_vfiprintf_r+0xfe>
 80025d8:	2300      	movs	r3, #0
 80025da:	3401      	adds	r4, #1
 80025dc:	9305      	str	r3, [sp, #20]
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0c0a 	mov.w	ip, #10
 80025e4:	4620      	mov	r0, r4
 80025e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025ea:	3a30      	subs	r2, #48	; 0x30
 80025ec:	2a09      	cmp	r2, #9
 80025ee:	d903      	bls.n	80025f8 <_vfiprintf_r+0x1d0>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0c6      	beq.n	8002582 <_vfiprintf_r+0x15a>
 80025f4:	9105      	str	r1, [sp, #20]
 80025f6:	e7c4      	b.n	8002582 <_vfiprintf_r+0x15a>
 80025f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80025fc:	4604      	mov	r4, r0
 80025fe:	2301      	movs	r3, #1
 8002600:	e7f0      	b.n	80025e4 <_vfiprintf_r+0x1bc>
 8002602:	ab03      	add	r3, sp, #12
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	462a      	mov	r2, r5
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <_vfiprintf_r+0x230>)
 800260a:	a904      	add	r1, sp, #16
 800260c:	4630      	mov	r0, r6
 800260e:	f3af 8000 	nop.w
 8002612:	4607      	mov	r7, r0
 8002614:	1c78      	adds	r0, r7, #1
 8002616:	d1d6      	bne.n	80025c6 <_vfiprintf_r+0x19e>
 8002618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800261a:	07d9      	lsls	r1, r3, #31
 800261c:	d405      	bmi.n	800262a <_vfiprintf_r+0x202>
 800261e:	89ab      	ldrh	r3, [r5, #12]
 8002620:	059a      	lsls	r2, r3, #22
 8002622:	d402      	bmi.n	800262a <_vfiprintf_r+0x202>
 8002624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002626:	f7ff fddf 	bl	80021e8 <__retarget_lock_release_recursive>
 800262a:	89ab      	ldrh	r3, [r5, #12]
 800262c:	065b      	lsls	r3, r3, #25
 800262e:	f53f af1d 	bmi.w	800246c <_vfiprintf_r+0x44>
 8002632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002634:	e71c      	b.n	8002470 <_vfiprintf_r+0x48>
 8002636:	ab03      	add	r3, sp, #12
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	462a      	mov	r2, r5
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <_vfiprintf_r+0x230>)
 800263e:	a904      	add	r1, sp, #16
 8002640:	4630      	mov	r0, r6
 8002642:	f000 f879 	bl	8002738 <_printf_i>
 8002646:	e7e4      	b.n	8002612 <_vfiprintf_r+0x1ea>
 8002648:	08002d60 	.word	0x08002d60
 800264c:	08002d66 	.word	0x08002d66
 8002650:	08002d6a 	.word	0x08002d6a
 8002654:	00000000 	.word	0x00000000
 8002658:	08002403 	.word	0x08002403

0800265c <_printf_common>:
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002660:	4616      	mov	r6, r2
 8002662:	4699      	mov	r9, r3
 8002664:	688a      	ldr	r2, [r1, #8]
 8002666:	690b      	ldr	r3, [r1, #16]
 8002668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800266c:	4293      	cmp	r3, r2
 800266e:	bfb8      	it	lt
 8002670:	4613      	movlt	r3, r2
 8002672:	6033      	str	r3, [r6, #0]
 8002674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002678:	4607      	mov	r7, r0
 800267a:	460c      	mov	r4, r1
 800267c:	b10a      	cbz	r2, 8002682 <_printf_common+0x26>
 800267e:	3301      	adds	r3, #1
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	0699      	lsls	r1, r3, #26
 8002686:	bf42      	ittt	mi
 8002688:	6833      	ldrmi	r3, [r6, #0]
 800268a:	3302      	addmi	r3, #2
 800268c:	6033      	strmi	r3, [r6, #0]
 800268e:	6825      	ldr	r5, [r4, #0]
 8002690:	f015 0506 	ands.w	r5, r5, #6
 8002694:	d106      	bne.n	80026a4 <_printf_common+0x48>
 8002696:	f104 0a19 	add.w	sl, r4, #25
 800269a:	68e3      	ldr	r3, [r4, #12]
 800269c:	6832      	ldr	r2, [r6, #0]
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	42ab      	cmp	r3, r5
 80026a2:	dc26      	bgt.n	80026f2 <_printf_common+0x96>
 80026a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026a8:	1e13      	subs	r3, r2, #0
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	bf18      	it	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	0692      	lsls	r2, r2, #26
 80026b2:	d42b      	bmi.n	800270c <_printf_common+0xb0>
 80026b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026b8:	4649      	mov	r1, r9
 80026ba:	4638      	mov	r0, r7
 80026bc:	47c0      	blx	r8
 80026be:	3001      	adds	r0, #1
 80026c0:	d01e      	beq.n	8002700 <_printf_common+0xa4>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	6922      	ldr	r2, [r4, #16]
 80026c6:	f003 0306 	and.w	r3, r3, #6
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	bf02      	ittt	eq
 80026ce:	68e5      	ldreq	r5, [r4, #12]
 80026d0:	6833      	ldreq	r3, [r6, #0]
 80026d2:	1aed      	subeq	r5, r5, r3
 80026d4:	68a3      	ldr	r3, [r4, #8]
 80026d6:	bf0c      	ite	eq
 80026d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026dc:	2500      	movne	r5, #0
 80026de:	4293      	cmp	r3, r2
 80026e0:	bfc4      	itt	gt
 80026e2:	1a9b      	subgt	r3, r3, r2
 80026e4:	18ed      	addgt	r5, r5, r3
 80026e6:	2600      	movs	r6, #0
 80026e8:	341a      	adds	r4, #26
 80026ea:	42b5      	cmp	r5, r6
 80026ec:	d11a      	bne.n	8002724 <_printf_common+0xc8>
 80026ee:	2000      	movs	r0, #0
 80026f0:	e008      	b.n	8002704 <_printf_common+0xa8>
 80026f2:	2301      	movs	r3, #1
 80026f4:	4652      	mov	r2, sl
 80026f6:	4649      	mov	r1, r9
 80026f8:	4638      	mov	r0, r7
 80026fa:	47c0      	blx	r8
 80026fc:	3001      	adds	r0, #1
 80026fe:	d103      	bne.n	8002708 <_printf_common+0xac>
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002708:	3501      	adds	r5, #1
 800270a:	e7c6      	b.n	800269a <_printf_common+0x3e>
 800270c:	18e1      	adds	r1, r4, r3
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	2030      	movs	r0, #48	; 0x30
 8002712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002716:	4422      	add	r2, r4
 8002718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800271c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002720:	3302      	adds	r3, #2
 8002722:	e7c7      	b.n	80026b4 <_printf_common+0x58>
 8002724:	2301      	movs	r3, #1
 8002726:	4622      	mov	r2, r4
 8002728:	4649      	mov	r1, r9
 800272a:	4638      	mov	r0, r7
 800272c:	47c0      	blx	r8
 800272e:	3001      	adds	r0, #1
 8002730:	d0e6      	beq.n	8002700 <_printf_common+0xa4>
 8002732:	3601      	adds	r6, #1
 8002734:	e7d9      	b.n	80026ea <_printf_common+0x8e>
	...

08002738 <_printf_i>:
 8002738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800273c:	7e0f      	ldrb	r7, [r1, #24]
 800273e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002740:	2f78      	cmp	r7, #120	; 0x78
 8002742:	4691      	mov	r9, r2
 8002744:	4680      	mov	r8, r0
 8002746:	460c      	mov	r4, r1
 8002748:	469a      	mov	sl, r3
 800274a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800274e:	d807      	bhi.n	8002760 <_printf_i+0x28>
 8002750:	2f62      	cmp	r7, #98	; 0x62
 8002752:	d80a      	bhi.n	800276a <_printf_i+0x32>
 8002754:	2f00      	cmp	r7, #0
 8002756:	f000 80d4 	beq.w	8002902 <_printf_i+0x1ca>
 800275a:	2f58      	cmp	r7, #88	; 0x58
 800275c:	f000 80c0 	beq.w	80028e0 <_printf_i+0x1a8>
 8002760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002768:	e03a      	b.n	80027e0 <_printf_i+0xa8>
 800276a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800276e:	2b15      	cmp	r3, #21
 8002770:	d8f6      	bhi.n	8002760 <_printf_i+0x28>
 8002772:	a101      	add	r1, pc, #4	; (adr r1, 8002778 <_printf_i+0x40>)
 8002774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002778:	080027d1 	.word	0x080027d1
 800277c:	080027e5 	.word	0x080027e5
 8002780:	08002761 	.word	0x08002761
 8002784:	08002761 	.word	0x08002761
 8002788:	08002761 	.word	0x08002761
 800278c:	08002761 	.word	0x08002761
 8002790:	080027e5 	.word	0x080027e5
 8002794:	08002761 	.word	0x08002761
 8002798:	08002761 	.word	0x08002761
 800279c:	08002761 	.word	0x08002761
 80027a0:	08002761 	.word	0x08002761
 80027a4:	080028e9 	.word	0x080028e9
 80027a8:	08002811 	.word	0x08002811
 80027ac:	080028a3 	.word	0x080028a3
 80027b0:	08002761 	.word	0x08002761
 80027b4:	08002761 	.word	0x08002761
 80027b8:	0800290b 	.word	0x0800290b
 80027bc:	08002761 	.word	0x08002761
 80027c0:	08002811 	.word	0x08002811
 80027c4:	08002761 	.word	0x08002761
 80027c8:	08002761 	.word	0x08002761
 80027cc:	080028ab 	.word	0x080028ab
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	602a      	str	r2, [r5, #0]
 80027d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027e0:	2301      	movs	r3, #1
 80027e2:	e09f      	b.n	8002924 <_printf_i+0x1ec>
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	0607      	lsls	r7, r0, #24
 80027ea:	f103 0104 	add.w	r1, r3, #4
 80027ee:	6029      	str	r1, [r5, #0]
 80027f0:	d501      	bpl.n	80027f6 <_printf_i+0xbe>
 80027f2:	681e      	ldr	r6, [r3, #0]
 80027f4:	e003      	b.n	80027fe <_printf_i+0xc6>
 80027f6:	0646      	lsls	r6, r0, #25
 80027f8:	d5fb      	bpl.n	80027f2 <_printf_i+0xba>
 80027fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80027fe:	2e00      	cmp	r6, #0
 8002800:	da03      	bge.n	800280a <_printf_i+0xd2>
 8002802:	232d      	movs	r3, #45	; 0x2d
 8002804:	4276      	negs	r6, r6
 8002806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800280a:	485a      	ldr	r0, [pc, #360]	; (8002974 <_printf_i+0x23c>)
 800280c:	230a      	movs	r3, #10
 800280e:	e012      	b.n	8002836 <_printf_i+0xfe>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	1d19      	adds	r1, r3, #4
 8002816:	6029      	str	r1, [r5, #0]
 8002818:	0605      	lsls	r5, r0, #24
 800281a:	d501      	bpl.n	8002820 <_printf_i+0xe8>
 800281c:	681e      	ldr	r6, [r3, #0]
 800281e:	e002      	b.n	8002826 <_printf_i+0xee>
 8002820:	0641      	lsls	r1, r0, #25
 8002822:	d5fb      	bpl.n	800281c <_printf_i+0xe4>
 8002824:	881e      	ldrh	r6, [r3, #0]
 8002826:	4853      	ldr	r0, [pc, #332]	; (8002974 <_printf_i+0x23c>)
 8002828:	2f6f      	cmp	r7, #111	; 0x6f
 800282a:	bf0c      	ite	eq
 800282c:	2308      	moveq	r3, #8
 800282e:	230a      	movne	r3, #10
 8002830:	2100      	movs	r1, #0
 8002832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002836:	6865      	ldr	r5, [r4, #4]
 8002838:	60a5      	str	r5, [r4, #8]
 800283a:	2d00      	cmp	r5, #0
 800283c:	bfa2      	ittt	ge
 800283e:	6821      	ldrge	r1, [r4, #0]
 8002840:	f021 0104 	bicge.w	r1, r1, #4
 8002844:	6021      	strge	r1, [r4, #0]
 8002846:	b90e      	cbnz	r6, 800284c <_printf_i+0x114>
 8002848:	2d00      	cmp	r5, #0
 800284a:	d04b      	beq.n	80028e4 <_printf_i+0x1ac>
 800284c:	4615      	mov	r5, r2
 800284e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002852:	fb03 6711 	mls	r7, r3, r1, r6
 8002856:	5dc7      	ldrb	r7, [r0, r7]
 8002858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800285c:	4637      	mov	r7, r6
 800285e:	42bb      	cmp	r3, r7
 8002860:	460e      	mov	r6, r1
 8002862:	d9f4      	bls.n	800284e <_printf_i+0x116>
 8002864:	2b08      	cmp	r3, #8
 8002866:	d10b      	bne.n	8002880 <_printf_i+0x148>
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	07de      	lsls	r6, r3, #31
 800286c:	d508      	bpl.n	8002880 <_printf_i+0x148>
 800286e:	6923      	ldr	r3, [r4, #16]
 8002870:	6861      	ldr	r1, [r4, #4]
 8002872:	4299      	cmp	r1, r3
 8002874:	bfde      	ittt	le
 8002876:	2330      	movle	r3, #48	; 0x30
 8002878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800287c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002880:	1b52      	subs	r2, r2, r5
 8002882:	6122      	str	r2, [r4, #16]
 8002884:	f8cd a000 	str.w	sl, [sp]
 8002888:	464b      	mov	r3, r9
 800288a:	aa03      	add	r2, sp, #12
 800288c:	4621      	mov	r1, r4
 800288e:	4640      	mov	r0, r8
 8002890:	f7ff fee4 	bl	800265c <_printf_common>
 8002894:	3001      	adds	r0, #1
 8002896:	d14a      	bne.n	800292e <_printf_i+0x1f6>
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	b004      	add	sp, #16
 800289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	f043 0320 	orr.w	r3, r3, #32
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	4833      	ldr	r0, [pc, #204]	; (8002978 <_printf_i+0x240>)
 80028ac:	2778      	movs	r7, #120	; 0x78
 80028ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	6829      	ldr	r1, [r5, #0]
 80028b6:	061f      	lsls	r7, r3, #24
 80028b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80028bc:	d402      	bmi.n	80028c4 <_printf_i+0x18c>
 80028be:	065f      	lsls	r7, r3, #25
 80028c0:	bf48      	it	mi
 80028c2:	b2b6      	uxthmi	r6, r6
 80028c4:	07df      	lsls	r7, r3, #31
 80028c6:	bf48      	it	mi
 80028c8:	f043 0320 	orrmi.w	r3, r3, #32
 80028cc:	6029      	str	r1, [r5, #0]
 80028ce:	bf48      	it	mi
 80028d0:	6023      	strmi	r3, [r4, #0]
 80028d2:	b91e      	cbnz	r6, 80028dc <_printf_i+0x1a4>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f023 0320 	bic.w	r3, r3, #32
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	2310      	movs	r3, #16
 80028de:	e7a7      	b.n	8002830 <_printf_i+0xf8>
 80028e0:	4824      	ldr	r0, [pc, #144]	; (8002974 <_printf_i+0x23c>)
 80028e2:	e7e4      	b.n	80028ae <_printf_i+0x176>
 80028e4:	4615      	mov	r5, r2
 80028e6:	e7bd      	b.n	8002864 <_printf_i+0x12c>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	6826      	ldr	r6, [r4, #0]
 80028ec:	6961      	ldr	r1, [r4, #20]
 80028ee:	1d18      	adds	r0, r3, #4
 80028f0:	6028      	str	r0, [r5, #0]
 80028f2:	0635      	lsls	r5, r6, #24
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	d501      	bpl.n	80028fc <_printf_i+0x1c4>
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	e002      	b.n	8002902 <_printf_i+0x1ca>
 80028fc:	0670      	lsls	r0, r6, #25
 80028fe:	d5fb      	bpl.n	80028f8 <_printf_i+0x1c0>
 8002900:	8019      	strh	r1, [r3, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	6123      	str	r3, [r4, #16]
 8002906:	4615      	mov	r5, r2
 8002908:	e7bc      	b.n	8002884 <_printf_i+0x14c>
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	1d1a      	adds	r2, r3, #4
 800290e:	602a      	str	r2, [r5, #0]
 8002910:	681d      	ldr	r5, [r3, #0]
 8002912:	6862      	ldr	r2, [r4, #4]
 8002914:	2100      	movs	r1, #0
 8002916:	4628      	mov	r0, r5
 8002918:	f7fd fc6a 	bl	80001f0 <memchr>
 800291c:	b108      	cbz	r0, 8002922 <_printf_i+0x1ea>
 800291e:	1b40      	subs	r0, r0, r5
 8002920:	6060      	str	r0, [r4, #4]
 8002922:	6863      	ldr	r3, [r4, #4]
 8002924:	6123      	str	r3, [r4, #16]
 8002926:	2300      	movs	r3, #0
 8002928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800292c:	e7aa      	b.n	8002884 <_printf_i+0x14c>
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	462a      	mov	r2, r5
 8002932:	4649      	mov	r1, r9
 8002934:	4640      	mov	r0, r8
 8002936:	47d0      	blx	sl
 8002938:	3001      	adds	r0, #1
 800293a:	d0ad      	beq.n	8002898 <_printf_i+0x160>
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	079b      	lsls	r3, r3, #30
 8002940:	d413      	bmi.n	800296a <_printf_i+0x232>
 8002942:	68e0      	ldr	r0, [r4, #12]
 8002944:	9b03      	ldr	r3, [sp, #12]
 8002946:	4298      	cmp	r0, r3
 8002948:	bfb8      	it	lt
 800294a:	4618      	movlt	r0, r3
 800294c:	e7a6      	b.n	800289c <_printf_i+0x164>
 800294e:	2301      	movs	r3, #1
 8002950:	4632      	mov	r2, r6
 8002952:	4649      	mov	r1, r9
 8002954:	4640      	mov	r0, r8
 8002956:	47d0      	blx	sl
 8002958:	3001      	adds	r0, #1
 800295a:	d09d      	beq.n	8002898 <_printf_i+0x160>
 800295c:	3501      	adds	r5, #1
 800295e:	68e3      	ldr	r3, [r4, #12]
 8002960:	9903      	ldr	r1, [sp, #12]
 8002962:	1a5b      	subs	r3, r3, r1
 8002964:	42ab      	cmp	r3, r5
 8002966:	dcf2      	bgt.n	800294e <_printf_i+0x216>
 8002968:	e7eb      	b.n	8002942 <_printf_i+0x20a>
 800296a:	2500      	movs	r5, #0
 800296c:	f104 0619 	add.w	r6, r4, #25
 8002970:	e7f5      	b.n	800295e <_printf_i+0x226>
 8002972:	bf00      	nop
 8002974:	08002d71 	.word	0x08002d71
 8002978:	08002d82 	.word	0x08002d82

0800297c <__sflush_r>:
 800297c:	898a      	ldrh	r2, [r1, #12]
 800297e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002980:	4605      	mov	r5, r0
 8002982:	0710      	lsls	r0, r2, #28
 8002984:	460c      	mov	r4, r1
 8002986:	d457      	bmi.n	8002a38 <__sflush_r+0xbc>
 8002988:	684b      	ldr	r3, [r1, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dc04      	bgt.n	8002998 <__sflush_r+0x1c>
 800298e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	dc01      	bgt.n	8002998 <__sflush_r+0x1c>
 8002994:	2000      	movs	r0, #0
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800299a:	2e00      	cmp	r6, #0
 800299c:	d0fa      	beq.n	8002994 <__sflush_r+0x18>
 800299e:	2300      	movs	r3, #0
 80029a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029a4:	682f      	ldr	r7, [r5, #0]
 80029a6:	6a21      	ldr	r1, [r4, #32]
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	d032      	beq.n	8002a12 <__sflush_r+0x96>
 80029ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	075a      	lsls	r2, r3, #29
 80029b2:	d505      	bpl.n	80029c0 <__sflush_r+0x44>
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	1ac0      	subs	r0, r0, r3
 80029b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029ba:	b10b      	cbz	r3, 80029c0 <__sflush_r+0x44>
 80029bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029be:	1ac0      	subs	r0, r0, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029c6:	6a21      	ldr	r1, [r4, #32]
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b0      	blx	r6
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	d106      	bne.n	80029e0 <__sflush_r+0x64>
 80029d2:	6829      	ldr	r1, [r5, #0]
 80029d4:	291d      	cmp	r1, #29
 80029d6:	d82b      	bhi.n	8002a30 <__sflush_r+0xb4>
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <__sflush_r+0x100>)
 80029da:	410a      	asrs	r2, r1
 80029dc:	07d6      	lsls	r6, r2, #31
 80029de:	d427      	bmi.n	8002a30 <__sflush_r+0xb4>
 80029e0:	2200      	movs	r2, #0
 80029e2:	6062      	str	r2, [r4, #4]
 80029e4:	04d9      	lsls	r1, r3, #19
 80029e6:	6922      	ldr	r2, [r4, #16]
 80029e8:	6022      	str	r2, [r4, #0]
 80029ea:	d504      	bpl.n	80029f6 <__sflush_r+0x7a>
 80029ec:	1c42      	adds	r2, r0, #1
 80029ee:	d101      	bne.n	80029f4 <__sflush_r+0x78>
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	b903      	cbnz	r3, 80029f6 <__sflush_r+0x7a>
 80029f4:	6560      	str	r0, [r4, #84]	; 0x54
 80029f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029f8:	602f      	str	r7, [r5, #0]
 80029fa:	2900      	cmp	r1, #0
 80029fc:	d0ca      	beq.n	8002994 <__sflush_r+0x18>
 80029fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a02:	4299      	cmp	r1, r3
 8002a04:	d002      	beq.n	8002a0c <__sflush_r+0x90>
 8002a06:	4628      	mov	r0, r5
 8002a08:	f7ff fbf0 	bl	80021ec <_free_r>
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a10:	e7c1      	b.n	8002996 <__sflush_r+0x1a>
 8002a12:	2301      	movs	r3, #1
 8002a14:	4628      	mov	r0, r5
 8002a16:	47b0      	blx	r6
 8002a18:	1c41      	adds	r1, r0, #1
 8002a1a:	d1c8      	bne.n	80029ae <__sflush_r+0x32>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0c5      	beq.n	80029ae <__sflush_r+0x32>
 8002a22:	2b1d      	cmp	r3, #29
 8002a24:	d001      	beq.n	8002a2a <__sflush_r+0xae>
 8002a26:	2b16      	cmp	r3, #22
 8002a28:	d101      	bne.n	8002a2e <__sflush_r+0xb2>
 8002a2a:	602f      	str	r7, [r5, #0]
 8002a2c:	e7b2      	b.n	8002994 <__sflush_r+0x18>
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	e7ae      	b.n	8002996 <__sflush_r+0x1a>
 8002a38:	690f      	ldr	r7, [r1, #16]
 8002a3a:	2f00      	cmp	r7, #0
 8002a3c:	d0aa      	beq.n	8002994 <__sflush_r+0x18>
 8002a3e:	0793      	lsls	r3, r2, #30
 8002a40:	680e      	ldr	r6, [r1, #0]
 8002a42:	bf08      	it	eq
 8002a44:	694b      	ldreq	r3, [r1, #20]
 8002a46:	600f      	str	r7, [r1, #0]
 8002a48:	bf18      	it	ne
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	1bf6      	subs	r6, r6, r7
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	2e00      	cmp	r6, #0
 8002a52:	dd9f      	ble.n	8002994 <__sflush_r+0x18>
 8002a54:	6a21      	ldr	r1, [r4, #32]
 8002a56:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a5a:	4633      	mov	r3, r6
 8002a5c:	463a      	mov	r2, r7
 8002a5e:	4628      	mov	r0, r5
 8002a60:	47e0      	blx	ip
 8002a62:	2800      	cmp	r0, #0
 8002a64:	dc06      	bgt.n	8002a74 <__sflush_r+0xf8>
 8002a66:	89a3      	ldrh	r3, [r4, #12]
 8002a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a6c:	81a3      	strh	r3, [r4, #12]
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a72:	e790      	b.n	8002996 <__sflush_r+0x1a>
 8002a74:	4407      	add	r7, r0
 8002a76:	1a36      	subs	r6, r6, r0
 8002a78:	e7ea      	b.n	8002a50 <__sflush_r+0xd4>
 8002a7a:	bf00      	nop
 8002a7c:	dfbffffe 	.word	0xdfbffffe

08002a80 <_fflush_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	4605      	mov	r5, r0
 8002a86:	460c      	mov	r4, r1
 8002a88:	b913      	cbnz	r3, 8002a90 <_fflush_r+0x10>
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
 8002a90:	b118      	cbz	r0, 8002a9a <_fflush_r+0x1a>
 8002a92:	6a03      	ldr	r3, [r0, #32]
 8002a94:	b90b      	cbnz	r3, 8002a9a <_fflush_r+0x1a>
 8002a96:	f7ff faa1 	bl	8001fdc <__sinit>
 8002a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f3      	beq.n	8002a8a <_fflush_r+0xa>
 8002aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002aa4:	07d0      	lsls	r0, r2, #31
 8002aa6:	d404      	bmi.n	8002ab2 <_fflush_r+0x32>
 8002aa8:	0599      	lsls	r1, r3, #22
 8002aaa:	d402      	bmi.n	8002ab2 <_fflush_r+0x32>
 8002aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aae:	f7ff fb9a 	bl	80021e6 <__retarget_lock_acquire_recursive>
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	f7ff ff61 	bl	800297c <__sflush_r>
 8002aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002abc:	07da      	lsls	r2, r3, #31
 8002abe:	4605      	mov	r5, r0
 8002ac0:	d4e4      	bmi.n	8002a8c <_fflush_r+0xc>
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	059b      	lsls	r3, r3, #22
 8002ac6:	d4e1      	bmi.n	8002a8c <_fflush_r+0xc>
 8002ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aca:	f7ff fb8d 	bl	80021e8 <__retarget_lock_release_recursive>
 8002ace:	e7dd      	b.n	8002a8c <_fflush_r+0xc>

08002ad0 <__swbuf_r>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	460e      	mov	r6, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	b118      	cbz	r0, 8002ae2 <__swbuf_r+0x12>
 8002ada:	6a03      	ldr	r3, [r0, #32]
 8002adc:	b90b      	cbnz	r3, 8002ae2 <__swbuf_r+0x12>
 8002ade:	f7ff fa7d 	bl	8001fdc <__sinit>
 8002ae2:	69a3      	ldr	r3, [r4, #24]
 8002ae4:	60a3      	str	r3, [r4, #8]
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	071a      	lsls	r2, r3, #28
 8002aea:	d525      	bpl.n	8002b38 <__swbuf_r+0x68>
 8002aec:	6923      	ldr	r3, [r4, #16]
 8002aee:	b31b      	cbz	r3, 8002b38 <__swbuf_r+0x68>
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	6922      	ldr	r2, [r4, #16]
 8002af4:	1a98      	subs	r0, r3, r2
 8002af6:	6963      	ldr	r3, [r4, #20]
 8002af8:	b2f6      	uxtb	r6, r6
 8002afa:	4283      	cmp	r3, r0
 8002afc:	4637      	mov	r7, r6
 8002afe:	dc04      	bgt.n	8002b0a <__swbuf_r+0x3a>
 8002b00:	4621      	mov	r1, r4
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7ff ffbc 	bl	8002a80 <_fflush_r>
 8002b08:	b9e0      	cbnz	r0, 8002b44 <__swbuf_r+0x74>
 8002b0a:	68a3      	ldr	r3, [r4, #8]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60a3      	str	r3, [r4, #8]
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	6022      	str	r2, [r4, #0]
 8002b16:	701e      	strb	r6, [r3, #0]
 8002b18:	6962      	ldr	r2, [r4, #20]
 8002b1a:	1c43      	adds	r3, r0, #1
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d004      	beq.n	8002b2a <__swbuf_r+0x5a>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	07db      	lsls	r3, r3, #31
 8002b24:	d506      	bpl.n	8002b34 <__swbuf_r+0x64>
 8002b26:	2e0a      	cmp	r6, #10
 8002b28:	d104      	bne.n	8002b34 <__swbuf_r+0x64>
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7ff ffa7 	bl	8002a80 <_fflush_r>
 8002b32:	b938      	cbnz	r0, 8002b44 <__swbuf_r+0x74>
 8002b34:	4638      	mov	r0, r7
 8002b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b38:	4621      	mov	r1, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f000 f806 	bl	8002b4c <__swsetup_r>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d0d5      	beq.n	8002af0 <__swbuf_r+0x20>
 8002b44:	f04f 37ff 	mov.w	r7, #4294967295
 8002b48:	e7f4      	b.n	8002b34 <__swbuf_r+0x64>
	...

08002b4c <__swsetup_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <__swsetup_r+0xac>)
 8002b50:	4605      	mov	r5, r0
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	460c      	mov	r4, r1
 8002b56:	b118      	cbz	r0, 8002b60 <__swsetup_r+0x14>
 8002b58:	6a03      	ldr	r3, [r0, #32]
 8002b5a:	b90b      	cbnz	r3, 8002b60 <__swsetup_r+0x14>
 8002b5c:	f7ff fa3e 	bl	8001fdc <__sinit>
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b66:	0718      	lsls	r0, r3, #28
 8002b68:	d422      	bmi.n	8002bb0 <__swsetup_r+0x64>
 8002b6a:	06d9      	lsls	r1, r3, #27
 8002b6c:	d407      	bmi.n	8002b7e <__swsetup_r+0x32>
 8002b6e:	2309      	movs	r3, #9
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b76:	81a3      	strh	r3, [r4, #12]
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	e034      	b.n	8002be8 <__swsetup_r+0x9c>
 8002b7e:	0758      	lsls	r0, r3, #29
 8002b80:	d512      	bpl.n	8002ba8 <__swsetup_r+0x5c>
 8002b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b84:	b141      	cbz	r1, 8002b98 <__swsetup_r+0x4c>
 8002b86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b8a:	4299      	cmp	r1, r3
 8002b8c:	d002      	beq.n	8002b94 <__swsetup_r+0x48>
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7ff fb2c 	bl	80021ec <_free_r>
 8002b94:	2300      	movs	r3, #0
 8002b96:	6363      	str	r3, [r4, #52]	; 0x34
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	6063      	str	r3, [r4, #4]
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	81a3      	strh	r3, [r4, #12]
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	b94b      	cbnz	r3, 8002bc8 <__swsetup_r+0x7c>
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbe:	d003      	beq.n	8002bc8 <__swsetup_r+0x7c>
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 f850 	bl	8002c68 <__smakebuf_r>
 8002bc8:	89a0      	ldrh	r0, [r4, #12]
 8002bca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bce:	f010 0301 	ands.w	r3, r0, #1
 8002bd2:	d00a      	beq.n	8002bea <__swsetup_r+0x9e>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60a3      	str	r3, [r4, #8]
 8002bd8:	6963      	ldr	r3, [r4, #20]
 8002bda:	425b      	negs	r3, r3
 8002bdc:	61a3      	str	r3, [r4, #24]
 8002bde:	6923      	ldr	r3, [r4, #16]
 8002be0:	b943      	cbnz	r3, 8002bf4 <__swsetup_r+0xa8>
 8002be2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002be6:	d1c4      	bne.n	8002b72 <__swsetup_r+0x26>
 8002be8:	bd38      	pop	{r3, r4, r5, pc}
 8002bea:	0781      	lsls	r1, r0, #30
 8002bec:	bf58      	it	pl
 8002bee:	6963      	ldrpl	r3, [r4, #20]
 8002bf0:	60a3      	str	r3, [r4, #8]
 8002bf2:	e7f4      	b.n	8002bde <__swsetup_r+0x92>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e7f7      	b.n	8002be8 <__swsetup_r+0x9c>
 8002bf8:	20000064 	.word	0x20000064

08002bfc <_sbrk_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4d06      	ldr	r5, [pc, #24]	; (8002c18 <_sbrk_r+0x1c>)
 8002c00:	2300      	movs	r3, #0
 8002c02:	4604      	mov	r4, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	f7ff f892 	bl	8001d30 <_sbrk>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_sbrk_r+0x1a>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_sbrk_r+0x1a>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	20000258 	.word	0x20000258

08002c1c <__swhatbuf_r>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	460c      	mov	r4, r1
 8002c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c24:	2900      	cmp	r1, #0
 8002c26:	b096      	sub	sp, #88	; 0x58
 8002c28:	4615      	mov	r5, r2
 8002c2a:	461e      	mov	r6, r3
 8002c2c:	da0d      	bge.n	8002c4a <__swhatbuf_r+0x2e>
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	bf0c      	ite	eq
 8002c3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002c3e:	2340      	movne	r3, #64	; 0x40
 8002c40:	2000      	movs	r0, #0
 8002c42:	6031      	str	r1, [r6, #0]
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	b016      	add	sp, #88	; 0x58
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	466a      	mov	r2, sp
 8002c4c:	f000 f848 	bl	8002ce0 <_fstat_r>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	dbec      	blt.n	8002c2e <__swhatbuf_r+0x12>
 8002c54:	9901      	ldr	r1, [sp, #4]
 8002c56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002c5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002c5e:	4259      	negs	r1, r3
 8002c60:	4159      	adcs	r1, r3
 8002c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c66:	e7eb      	b.n	8002c40 <__swhatbuf_r+0x24>

08002c68 <__smakebuf_r>:
 8002c68:	898b      	ldrh	r3, [r1, #12]
 8002c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c6c:	079d      	lsls	r5, r3, #30
 8002c6e:	4606      	mov	r6, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	d507      	bpl.n	8002c84 <__smakebuf_r+0x1c>
 8002c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	6123      	str	r3, [r4, #16]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6163      	str	r3, [r4, #20]
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	ab01      	add	r3, sp, #4
 8002c86:	466a      	mov	r2, sp
 8002c88:	f7ff ffc8 	bl	8002c1c <__swhatbuf_r>
 8002c8c:	9900      	ldr	r1, [sp, #0]
 8002c8e:	4605      	mov	r5, r0
 8002c90:	4630      	mov	r0, r6
 8002c92:	f7ff fb15 	bl	80022c0 <_malloc_r>
 8002c96:	b948      	cbnz	r0, 8002cac <__smakebuf_r+0x44>
 8002c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c9c:	059a      	lsls	r2, r3, #22
 8002c9e:	d4ef      	bmi.n	8002c80 <__smakebuf_r+0x18>
 8002ca0:	f023 0303 	bic.w	r3, r3, #3
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	e7e3      	b.n	8002c74 <__smakebuf_r+0xc>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	6020      	str	r0, [r4, #0]
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	81a3      	strh	r3, [r4, #12]
 8002cb6:	9b00      	ldr	r3, [sp, #0]
 8002cb8:	6163      	str	r3, [r4, #20]
 8002cba:	9b01      	ldr	r3, [sp, #4]
 8002cbc:	6120      	str	r0, [r4, #16]
 8002cbe:	b15b      	cbz	r3, 8002cd8 <__smakebuf_r+0x70>
 8002cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f000 f81d 	bl	8002d04 <_isatty_r>
 8002cca:	b128      	cbz	r0, 8002cd8 <__smakebuf_r+0x70>
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	81a3      	strh	r3, [r4, #12]
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	431d      	orrs	r5, r3
 8002cdc:	81a5      	strh	r5, [r4, #12]
 8002cde:	e7cf      	b.n	8002c80 <__smakebuf_r+0x18>

08002ce0 <_fstat_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	4d07      	ldr	r5, [pc, #28]	; (8002d00 <_fstat_r+0x20>)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	f7fe fff9 	bl	8001ce4 <_fstat>
 8002cf2:	1c43      	adds	r3, r0, #1
 8002cf4:	d102      	bne.n	8002cfc <_fstat_r+0x1c>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	b103      	cbz	r3, 8002cfc <_fstat_r+0x1c>
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000258 	.word	0x20000258

08002d04 <_isatty_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4d06      	ldr	r5, [pc, #24]	; (8002d20 <_isatty_r+0x1c>)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fe fff7 	bl	8001d02 <_isatty>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_isatty_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_isatty_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	20000258 	.word	0x20000258

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
