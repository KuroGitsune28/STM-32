
002_UART_Tx_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001178  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001328  08001328  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001328  08001328  00011328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001330  08001330  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001330  08001330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001334  08001334  00011334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000064  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000603f  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000f63  00000000  00000000  000260b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000560  00000000  00000000  00027020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000418  00000000  00000000  00027580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000160d  00000000  00000000  00027998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006d47  00000000  00000000  00028fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c33e1  00000000  00000000  0002fcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001594  00000000  00000000  000f30d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f4664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001308 	.word	0x08001308

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08001308 	.word	0x08001308

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811b 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8118 	bls.w	80004a6 <__udivmoddi4+0x28e>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8106 	bcs.w	80004aa <__udivmoddi4+0x292>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8103 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ec 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f7 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 808f 	bne.w	8000426 <__udivmoddi4+0x20e>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80ba 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f901 	lsl.w	r9, r0, r1
 800038e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fbb5 f8f0 	udiv	r8, r5, r0
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	fb00 5518 	mls	r5, r0, r8, r5
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d0:	fb00 4413 	mls	r4, r0, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f6:	fba0 8302 	umull	r8, r3, r0, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	429c      	cmp	r4, r3
 8000400:	46c6      	mov	lr, r8
 8000402:	461d      	mov	r5, r3
 8000404:	d355      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000406:	d052      	beq.n	80004ae <__udivmoddi4+0x296>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb9 030e 	subs.w	r3, r9, lr
 800040e:	eb64 0405 	sbc.w	r4, r4, r5
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40cb      	lsrs	r3, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c3 0120 	rsb	r1, r3, #32
 800042a:	fa02 fc03 	lsl.w	ip, r2, r3
 800042e:	fa20 f201 	lsr.w	r2, r0, r1
 8000432:	fa25 f101 	lsr.w	r1, r5, r1
 8000436:	409d      	lsls	r5, r3
 8000438:	432a      	orrs	r2, r5
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	fbb1 f0f7 	udiv	r0, r1, r7
 8000446:	fb07 1510 	mls	r5, r7, r0, r1
 800044a:	0c11      	lsrs	r1, r2, #16
 800044c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000450:	fb00 f50e 	mul.w	r5, r0, lr
 8000454:	428d      	cmp	r5, r1
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 38ff 	add.w	r8, r0, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428d      	cmp	r5, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	1b49      	subs	r1, r1, r5
 8000470:	b292      	uxth	r2, r2
 8000472:	fbb1 f5f7 	udiv	r5, r1, r7
 8000476:	fb07 1115 	mls	r1, r7, r5, r1
 800047a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047e:	fb05 f10e 	mul.w	r1, r5, lr
 8000482:	4291      	cmp	r1, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0202 	adds.w	r2, ip, r2
 800048a:	f105 38ff 	add.w	r8, r5, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4291      	cmp	r1, r2
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3d02      	subs	r5, #2
 8000496:	4462      	add	r2, ip
 8000498:	1a52      	subs	r2, r2, r1
 800049a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049e:	e739      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e709      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a6:	4639      	mov	r1, r7
 80004a8:	e6e7      	b.n	800027a <__udivmoddi4+0x62>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fc      	b.n	80002a8 <__udivmoddi4+0x90>
 80004ae:	45c1      	cmp	r9, r8
 80004b0:	d2aa      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb63 050c 	sbc.w	r5, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4645      	mov	r5, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x124>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004d8:	4464      	add	r4, ip
 80004da:	3802      	subs	r0, #2
 80004dc:	e743      	b.n	8000366 <__udivmoddi4+0x14e>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <HAL_Init+0x40>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_Init+0x40>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x40>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f931 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f000 f80e 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f000 f806 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f935 	bl	80007c2 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f90b 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff0 	bl	80005b8 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_Delay+0x44>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffe0 	bl	80005b8 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff90 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff49 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff90 	bl	80006cc <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5f 	bl	8000678 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e16b      	b.n	8000ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 815a 	bne.w	8000aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082a:	2b02      	cmp	r3, #2
 800082c:	d130      	bne.n	8000890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4013      	ands	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 0201 	and.w	r2, r3, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b03      	cmp	r3, #3
 800089a:	d017      	beq.n	80008cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80b4 	beq.w	8000aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a5e      	ldr	r2, [pc, #376]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a51      	ldr	r2, [pc, #324]	; (8000aec <HAL_GPIO_Init+0x310>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d02b      	beq.n	8000a02 <HAL_GPIO_Init+0x226>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x314>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d025      	beq.n	80009fe <HAL_GPIO_Init+0x222>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4f      	ldr	r2, [pc, #316]	; (8000af4 <HAL_GPIO_Init+0x318>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d01f      	beq.n	80009fa <HAL_GPIO_Init+0x21e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <HAL_GPIO_Init+0x31c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d019      	beq.n	80009f6 <HAL_GPIO_Init+0x21a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_GPIO_Init+0x320>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x216>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x324>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x212>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4b      	ldr	r2, [pc, #300]	; (8000b04 <HAL_GPIO_Init+0x328>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x20e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x20a>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00e      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009e6:	2308      	movs	r3, #8
 80009e8:	e00c      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ea:	2306      	movs	r3, #6
 80009ec:	e00a      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e008      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f2:	2304      	movs	r3, #4
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 8000a02:	2300      	movs	r3, #0
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	f002 0203 	and.w	r2, r2, #3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a14:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	f67f ae90 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40021400 	.word	0x40021400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40021c00 	.word	0x40021c00
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4013      	ands	r3, r2
 8000b28:	041a      	lsls	r2, r3, #16
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43d9      	mvns	r1, r3
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	400b      	ands	r3, r1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b5c:	f7ff fff2 	bl	8000b44 <HAL_RCC_GetHCLKFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	0a9b      	lsrs	r3, r3, #10
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	4903      	ldr	r1, [pc, #12]	; (8000b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b6e:	5ccb      	ldrb	r3, [r1, r3]
 8000b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	08001320 	.word	0x08001320

08000b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_RCC_GetHCLKFreq>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	0b5b      	lsrs	r3, r3, #13
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	4903      	ldr	r1, [pc, #12]	; (8000ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b96:	5ccb      	ldrb	r3, [r1, r3]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	08001320 	.word	0x08001320

08000ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e03f      	b.n	8000c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f837 	bl	8000c42 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2224      	movs	r2, #36	; 0x24
 8000bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f831 	bl	8000c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2220      	movs	r2, #32
 8000c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c58:	b0c0      	sub	sp, #256	; 0x100
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c70:	68d9      	ldr	r1, [r3, #12]
 8000c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	ea40 0301 	orr.w	r3, r0, r1
 8000c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	431a      	orrs	r2, r3
 8000c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000cac:	f021 010c 	bic.w	r1, r1, #12
 8000cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cce:	6999      	ldr	r1, [r3, #24]
 8000cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	ea40 0301 	orr.w	r3, r0, r1
 8000cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b91      	ldr	r3, [pc, #580]	; (8000f28 <UART_SetConfig+0x2d4>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d005      	beq.n	8000cf4 <UART_SetConfig+0xa0>
 8000ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <UART_SetConfig+0x2d8>)
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d104      	bne.n	8000cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000cf4:	f7ff ff44 	bl	8000b80 <HAL_RCC_GetPCLK2Freq>
 8000cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000cfc:	e003      	b.n	8000d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000cfe:	f7ff ff2b 	bl	8000b58 <HAL_RCC_GetPCLK1Freq>
 8000d02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d10:	f040 8110 	bne.w	8000f34 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000d26:	4622      	mov	r2, r4
 8000d28:	462b      	mov	r3, r5
 8000d2a:	1891      	adds	r1, r2, r2
 8000d2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8000d2e:	415b      	adcs	r3, r3
 8000d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	eb12 0804 	adds.w	r8, r2, r4
 8000d40:	460c      	mov	r4, r1
 8000d42:	eb43 0904 	adc.w	r9, r3, r4
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	eb18 0303 	adds.w	r3, r8, r3
 8000d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	eb49 0303 	adc.w	r3, r9, r3
 8000d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000d86:	460b      	mov	r3, r1
 8000d88:	18db      	adds	r3, r3, r3
 8000d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	eb42 0303 	adc.w	r3, r2, r3
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
 8000d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000d9c:	f7ff fa24 	bl	80001e8 <__aeabi_uldivmod>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <UART_SetConfig+0x2dc>)
 8000da6:	fba3 2302 	umull	r2, r3, r3, r2
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	011c      	lsls	r4, r3, #4
 8000dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000db2:	2200      	movs	r2, #0
 8000db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000db8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000dc0:	4642      	mov	r2, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	1891      	adds	r1, r2, r2
 8000dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8000dc8:	415b      	adcs	r3, r3
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000dd0:	4645      	mov	r5, r8
 8000dd2:	eb12 0a05 	adds.w	sl, r2, r5
 8000dd6:	4640      	mov	r0, r8
 8000dd8:	4649      	mov	r1, r9
 8000dda:	460d      	mov	r5, r1
 8000ddc:	eb43 0b05 	adc.w	fp, r3, r5
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000df4:	4692      	mov	sl, r2
 8000df6:	469b      	mov	fp, r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8000dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e02:	460b      	mov	r3, r1
 8000e04:	eb4b 0303 	adc.w	r3, fp, r3
 8000e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8000e20:	460b      	mov	r3, r1
 8000e22:	18db      	adds	r3, r3, r3
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
 8000e26:	4613      	mov	r3, r2
 8000e28:	eb42 0303 	adc.w	r3, r2, r3
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000e36:	f7ff f9d7 	bl	80001e8 <__aeabi_uldivmod>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <UART_SetConfig+0x2dc>)
 8000e42:	fba3 2301 	umull	r2, r3, r3, r1
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2264      	movs	r2, #100	; 0x64
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <UART_SetConfig+0x2dc>)
 8000e58:	fba3 2302 	umull	r2, r3, r3, r2
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000e64:	441c      	add	r4, r3
 8000e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000e78:	4642      	mov	r2, r8
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	1891      	adds	r1, r2, r2
 8000e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8000e80:	415b      	adcs	r3, r3
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000e88:	4641      	mov	r1, r8
 8000e8a:	1851      	adds	r1, r2, r1
 8000e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8000e8e:	4649      	mov	r1, r9
 8000e90:	414b      	adcs	r3, r1
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000ea0:	4659      	mov	r1, fp
 8000ea2:	00cb      	lsls	r3, r1, #3
 8000ea4:	4655      	mov	r5, sl
 8000ea6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8000eaa:	4651      	mov	r1, sl
 8000eac:	00ca      	lsls	r2, r1, #3
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	189b      	adds	r3, r3, r2
 8000eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000ebc:	464b      	mov	r3, r9
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	eb42 0303 	adc.w	r3, r2, r3
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000edc:	460b      	mov	r3, r1
 8000ede:	18db      	adds	r3, r3, r3
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	eb42 0303 	adc.w	r3, r2, r3
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000ef2:	f7ff f979 	bl	80001e8 <__aeabi_uldivmod>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <UART_SetConfig+0x2dc>)
 8000efc:	fba3 1302 	umull	r1, r3, r3, r2
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	2164      	movs	r1, #100	; 0x64
 8000f04:	fb01 f303 	mul.w	r3, r1, r3
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	3332      	adds	r3, #50	; 0x32
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <UART_SetConfig+0x2dc>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	f003 0207 	and.w	r2, r3, #7
 8000f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4422      	add	r2, r4
 8000f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000f24:	e10a      	b.n	800113c <UART_SetConfig+0x4e8>
 8000f26:	bf00      	nop
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40011400 	.word	0x40011400
 8000f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000f46:	4642      	mov	r2, r8
 8000f48:	464b      	mov	r3, r9
 8000f4a:	1891      	adds	r1, r2, r2
 8000f4c:	6239      	str	r1, [r7, #32]
 8000f4e:	415b      	adcs	r3, r3
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f56:	4641      	mov	r1, r8
 8000f58:	1854      	adds	r4, r2, r1
 8000f5a:	46cc      	mov	ip, r9
 8000f5c:	eb43 050c 	adc.w	r5, r3, ip
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	00eb      	lsls	r3, r5, #3
 8000f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f6e:	00e2      	lsls	r2, r4, #3
 8000f70:	4614      	mov	r4, r2
 8000f72:	461d      	mov	r5, r3
 8000f74:	4640      	mov	r0, r8
 8000f76:	4649      	mov	r1, r9
 8000f78:	4603      	mov	r3, r0
 8000f7a:	18e3      	adds	r3, r4, r3
 8000f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f80:	460b      	mov	r3, r1
 8000f82:	eb45 0303 	adc.w	r3, r5, r3
 8000f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	008b      	lsls	r3, r1, #2
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	4604      	mov	r4, r0
 8000fb0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	008a      	lsls	r2, r1, #2
 8000fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000fbc:	f7ff f914 	bl	80001e8 <__aeabi_uldivmod>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4b60      	ldr	r3, [pc, #384]	; (8001148 <UART_SetConfig+0x4f4>)
 8000fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	011c      	lsls	r4, r3, #4
 8000fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	1891      	adds	r1, r2, r2
 8000fe6:	61b9      	str	r1, [r7, #24]
 8000fe8:	415b      	adcs	r3, r3
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1851      	adds	r1, r2, r1
 8000ff4:	6139      	str	r1, [r7, #16]
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	414b      	adcs	r3, r1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001008:	4659      	mov	r1, fp
 800100a:	00cb      	lsls	r3, r1, #3
 800100c:	4655      	mov	r5, sl
 800100e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001012:	4651      	mov	r1, sl
 8001014:	00ca      	lsls	r2, r1, #3
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	4603      	mov	r3, r0
 800101c:	4642      	mov	r2, r8
 800101e:	189b      	adds	r3, r3, r2
 8001020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001024:	464b      	mov	r3, r9
 8001026:	460a      	mov	r2, r1
 8001028:	eb42 0303 	adc.w	r3, r2, r3
 800102c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	67bb      	str	r3, [r7, #120]	; 0x78
 800103a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001048:	4649      	mov	r1, r9
 800104a:	008b      	lsls	r3, r1, #2
 800104c:	4645      	mov	r5, r8
 800104e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001052:	4641      	mov	r1, r8
 8001054:	008a      	lsls	r2, r1, #2
 8001056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800105a:	f7ff f8c5 	bl	80001e8 <__aeabi_uldivmod>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4611      	mov	r1, r2
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <UART_SetConfig+0x4f4>)
 8001066:	fba3 2301 	umull	r2, r3, r3, r1
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2264      	movs	r2, #100	; 0x64
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	1acb      	subs	r3, r1, r3
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	3332      	adds	r3, #50	; 0x32
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <UART_SetConfig+0x4f4>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001084:	441c      	add	r4, r3
 8001086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800108a:	2200      	movs	r2, #0
 800108c:	673b      	str	r3, [r7, #112]	; 0x70
 800108e:	677a      	str	r2, [r7, #116]	; 0x74
 8001090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001094:	4642      	mov	r2, r8
 8001096:	464b      	mov	r3, r9
 8001098:	1891      	adds	r1, r2, r2
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	415b      	adcs	r3, r3
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010a4:	4641      	mov	r1, r8
 80010a6:	1851      	adds	r1, r2, r1
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	4649      	mov	r1, r9
 80010ac:	414b      	adcs	r3, r1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80010bc:	4659      	mov	r1, fp
 80010be:	00cb      	lsls	r3, r1, #3
 80010c0:	4655      	mov	r5, sl
 80010c2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80010c6:	4651      	mov	r1, sl
 80010c8:	00ca      	lsls	r2, r1, #3
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	4642      	mov	r2, r8
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80010d6:	464b      	mov	r3, r9
 80010d8:	460a      	mov	r2, r1
 80010da:	eb42 0303 	adc.w	r3, r2, r3
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	663b      	str	r3, [r7, #96]	; 0x60
 80010ea:	667a      	str	r2, [r7, #100]	; 0x64
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80010f8:	4649      	mov	r1, r9
 80010fa:	008b      	lsls	r3, r1, #2
 80010fc:	4645      	mov	r5, r8
 80010fe:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001102:	4641      	mov	r1, r8
 8001104:	008a      	lsls	r2, r1, #2
 8001106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800110a:	f7ff f86d 	bl	80001e8 <__aeabi_uldivmod>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <UART_SetConfig+0x4f4>)
 8001114:	fba3 1302 	umull	r1, r3, r3, r2
 8001118:	095b      	lsrs	r3, r3, #5
 800111a:	2164      	movs	r1, #100	; 0x64
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	3332      	adds	r3, #50	; 0x32
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <UART_SetConfig+0x4f4>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	f003 020f 	and.w	r2, r3, #15
 8001132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4422      	add	r2, r4
 800113a:	609a      	str	r2, [r3, #8]
}
 800113c:	bf00      	nop
 800113e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001148:	51eb851f 	.word	0x51eb851f

0800114c <main>:
//	HAL_UART_Transmit(&Uart1,(uint8_t*)&ch,1,100);
//	return ch;
//}

int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_Init();
 8001150:	f7ff f9c8 	bl	80004e4 <HAL_Init>
	UART2_Init();
 8001154:	f000 f814 	bl	8001180 <UART2_Init>
	PD12_LED_Init();
 8001158:	f000 f85a 	bl	8001210 <PD12_LED_Init>
	while(1)
	{
//		printf("Hello World\r\n");
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <main+0x24>)
 8001162:	f7ff fcd5 	bl	8000b10 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f7ff fa30 	bl	80005cc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 800116c:	e7f6      	b.n	800115c <main+0x10>
 800116e:	bf00      	nop
 8001170:	40020c00 	.word	0x40020c00

08001174 <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001178:	f7ff fa0c 	bl	8000594 <HAL_IncTick>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <UART2_Init>:

void UART2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <UART2_Init+0x84>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <UART2_Init+0x84>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <UART2_Init+0x84>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

	// Configure Clock for UART
	//GPIO init typedef
//	GPIO_InitTypeDef	GpioStruct;
	__HAL_RCC_USART1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <UART2_Init+0x84>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a16      	ldr	r2, [pc, #88]	; (8001204 <UART2_Init+0x84>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <UART2_Init+0x84>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
//	UART_HandleTypeDef		Uart2; // Declared Globally for usage by all

	/**********************/
	// USART MSP Init For GPIO Configuration then manual.

	HAL_UART_MspInit(&Uart1);
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <UART2_Init+0x88>)
 80011c0:	f7ff fd3f 	bl	8000c42 <HAL_UART_MspInit>
//	HAL_GPIO_Init(GPIOA,&GpioStruct);

	// USART2 Configuration


	Uart1.Instance				=	USART1; // USART2 Base Address is given
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <UART2_Init+0x88>)
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <UART2_Init+0x8c>)
 80011c8:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART

	Uart1.Init.BaudRate			=	115200;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <UART2_Init+0x88>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <UART2_Init+0x88>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <UART2_Init+0x88>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <UART2_Init+0x88>)
 80011e0:	2208      	movs	r2, #8
 80011e2:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <UART2_Init+0x88>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <UART2_Init+0x88>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <UART2_Init+0x88>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <UART2_Init+0x88>)
 80011f8:	f7ff fcd6 	bl	8000ba8 <HAL_UART_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	2000002c 	.word	0x2000002c
 800120c:	40011000 	.word	0x40011000

08001210 <PD12_LED_Init>:

void PD12_LED_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <PD12_LED_Init+0x54>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a11      	ldr	r2, [pc, #68]	; (8001264 <PD12_LED_Init+0x54>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <PD12_LED_Init+0x54>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef	GPIO_InitStruct = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin		= GPIO_PIN_12;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed	= GPIO_SPEED_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <PD12_LED_Init+0x58>)
 8001258:	f7ff fac0 	bl	80007dc <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020c00 	.word	0x40020c00

0800126c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129a:	f000 f811 	bl	80012c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff ff55 	bl	800114c <main>

080012a2 <LoopForever>:

LoopForever:
  b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   r0, =_estack
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012b0:	08001338 	.word	0x08001338
  ldr r2, =_sbss
 80012b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b8:	20000070 	.word	0x20000070

080012bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <__libc_init_array>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	4d0d      	ldr	r5, [pc, #52]	; (80012f8 <__libc_init_array+0x38>)
 80012c4:	4c0d      	ldr	r4, [pc, #52]	; (80012fc <__libc_init_array+0x3c>)
 80012c6:	1b64      	subs	r4, r4, r5
 80012c8:	10a4      	asrs	r4, r4, #2
 80012ca:	2600      	movs	r6, #0
 80012cc:	42a6      	cmp	r6, r4
 80012ce:	d109      	bne.n	80012e4 <__libc_init_array+0x24>
 80012d0:	4d0b      	ldr	r5, [pc, #44]	; (8001300 <__libc_init_array+0x40>)
 80012d2:	4c0c      	ldr	r4, [pc, #48]	; (8001304 <__libc_init_array+0x44>)
 80012d4:	f000 f818 	bl	8001308 <_init>
 80012d8:	1b64      	subs	r4, r4, r5
 80012da:	10a4      	asrs	r4, r4, #2
 80012dc:	2600      	movs	r6, #0
 80012de:	42a6      	cmp	r6, r4
 80012e0:	d105      	bne.n	80012ee <__libc_init_array+0x2e>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e8:	4798      	blx	r3
 80012ea:	3601      	adds	r6, #1
 80012ec:	e7ee      	b.n	80012cc <__libc_init_array+0xc>
 80012ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f2:	4798      	blx	r3
 80012f4:	3601      	adds	r6, #1
 80012f6:	e7f2      	b.n	80012de <__libc_init_array+0x1e>
 80012f8:	08001330 	.word	0x08001330
 80012fc:	08001330 	.word	0x08001330
 8001300:	08001330 	.word	0x08001330
 8001304:	08001334 	.word	0x08001334

08001308 <_init>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr

08001314 <_fini>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	bf00      	nop
 8001318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131a:	bc08      	pop	{r3}
 800131c:	469e      	mov	lr, r3
 800131e:	4770      	bx	lr
