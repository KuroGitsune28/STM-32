
002_UART_Tx_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e0c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001fb4  08001fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fcc  08001fcc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fd4  08001fd4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001b4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000688c  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011ee  00000000  00000000  00026961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000630  00000000  00000000  00027b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004aa  00000000  00000000  00028180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000025e2  00000000  00000000  0002862a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007bb0  00000000  00000000  0002ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5515  00000000  00000000  000327bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f08  00000000  00000000  000f7cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f9bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001f9c 	.word	0x08001f9c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001f9c 	.word	0x08001f9c

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811b 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8118 	bls.w	80004a6 <__udivmoddi4+0x28e>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8106 	bcs.w	80004aa <__udivmoddi4+0x292>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8103 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ec 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f7 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 808f 	bne.w	8000426 <__udivmoddi4+0x20e>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80ba 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f901 	lsl.w	r9, r0, r1
 800038e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fbb5 f8f0 	udiv	r8, r5, r0
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	fb00 5518 	mls	r5, r0, r8, r5
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d0:	fb00 4413 	mls	r4, r0, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f6:	fba0 8302 	umull	r8, r3, r0, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	429c      	cmp	r4, r3
 8000400:	46c6      	mov	lr, r8
 8000402:	461d      	mov	r5, r3
 8000404:	d355      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000406:	d052      	beq.n	80004ae <__udivmoddi4+0x296>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb9 030e 	subs.w	r3, r9, lr
 800040e:	eb64 0405 	sbc.w	r4, r4, r5
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40cb      	lsrs	r3, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c3 0120 	rsb	r1, r3, #32
 800042a:	fa02 fc03 	lsl.w	ip, r2, r3
 800042e:	fa20 f201 	lsr.w	r2, r0, r1
 8000432:	fa25 f101 	lsr.w	r1, r5, r1
 8000436:	409d      	lsls	r5, r3
 8000438:	432a      	orrs	r2, r5
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	fbb1 f0f7 	udiv	r0, r1, r7
 8000446:	fb07 1510 	mls	r5, r7, r0, r1
 800044a:	0c11      	lsrs	r1, r2, #16
 800044c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000450:	fb00 f50e 	mul.w	r5, r0, lr
 8000454:	428d      	cmp	r5, r1
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 38ff 	add.w	r8, r0, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428d      	cmp	r5, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	1b49      	subs	r1, r1, r5
 8000470:	b292      	uxth	r2, r2
 8000472:	fbb1 f5f7 	udiv	r5, r1, r7
 8000476:	fb07 1115 	mls	r1, r7, r5, r1
 800047a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047e:	fb05 f10e 	mul.w	r1, r5, lr
 8000482:	4291      	cmp	r1, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0202 	adds.w	r2, ip, r2
 800048a:	f105 38ff 	add.w	r8, r5, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4291      	cmp	r1, r2
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3d02      	subs	r5, #2
 8000496:	4462      	add	r2, ip
 8000498:	1a52      	subs	r2, r2, r1
 800049a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049e:	e739      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e709      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a6:	4639      	mov	r1, r7
 80004a8:	e6e7      	b.n	800027a <__udivmoddi4+0x62>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fc      	b.n	80002a8 <__udivmoddi4+0x90>
 80004ae:	45c1      	cmp	r9, r8
 80004b0:	d2aa      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb63 050c 	sbc.w	r5, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4645      	mov	r5, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x124>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004d8:	4464      	add	r4, ip
 80004da:	3802      	subs	r0, #2
 80004dc:	e743      	b.n	8000366 <__udivmoddi4+0x14e>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <HAL_Init+0x40>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_Init+0x40>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x40>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f931 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f000 f80e 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f000 f806 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f935 	bl	80007c2 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f90b 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000084 	.word	0x20000084

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000084 	.word	0x20000084

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff0 	bl	80005b8 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_Delay+0x44>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffe0 	bl	80005b8 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff90 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff49 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff90 	bl	80006cc <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5f 	bl	8000678 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e16b      	b.n	8000ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 815a 	bne.w	8000aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082a:	2b02      	cmp	r3, #2
 800082c:	d130      	bne.n	8000890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4013      	ands	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 0201 	and.w	r2, r3, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b03      	cmp	r3, #3
 800089a:	d017      	beq.n	80008cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80b4 	beq.w	8000aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a5e      	ldr	r2, [pc, #376]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a51      	ldr	r2, [pc, #324]	; (8000aec <HAL_GPIO_Init+0x310>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d02b      	beq.n	8000a02 <HAL_GPIO_Init+0x226>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x314>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d025      	beq.n	80009fe <HAL_GPIO_Init+0x222>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4f      	ldr	r2, [pc, #316]	; (8000af4 <HAL_GPIO_Init+0x318>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d01f      	beq.n	80009fa <HAL_GPIO_Init+0x21e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <HAL_GPIO_Init+0x31c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d019      	beq.n	80009f6 <HAL_GPIO_Init+0x21a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_GPIO_Init+0x320>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x216>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x324>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x212>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4b      	ldr	r2, [pc, #300]	; (8000b04 <HAL_GPIO_Init+0x328>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x20e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x20a>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00e      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009e6:	2308      	movs	r3, #8
 80009e8:	e00c      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ea:	2306      	movs	r3, #6
 80009ec:	e00a      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e008      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f2:	2304      	movs	r3, #4
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 8000a02:	2300      	movs	r3, #0
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	f002 0203 	and.w	r2, r2, #3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a14:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	f67f ae90 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40021400 	.word	0x40021400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40021c00 	.word	0x40021c00
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4013      	ands	r3, r2
 8000b28:	041a      	lsls	r2, r3, #16
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43d9      	mvns	r1, r3
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	400b      	ands	r3, r1
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b5c:	f7ff fff2 	bl	8000b44 <HAL_RCC_GetHCLKFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	0a9b      	lsrs	r3, r3, #10
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	4903      	ldr	r1, [pc, #12]	; (8000b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b6e:	5ccb      	ldrb	r3, [r1, r3]
 8000b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	08001fc4 	.word	0x08001fc4

08000b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_RCC_GetHCLKFreq>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	0b5b      	lsrs	r3, r3, #13
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	4903      	ldr	r1, [pc, #12]	; (8000ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b96:	5ccb      	ldrb	r3, [r1, r3]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	08001fc4 	.word	0x08001fc4

08000ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e03f      	b.n	8000c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f837 	bl	8000c42 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2224      	movs	r2, #36	; 0x24
 8000bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f931 	bl	8000e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2220      	movs	r2, #32
 8000c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	d17c      	bne.n	8000d6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <HAL_UART_Transmit+0x2c>
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e075      	b.n	8000d70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_UART_Transmit+0x3e>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e06e      	b.n	8000d70 <HAL_UART_Transmit+0x11c>
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2221      	movs	r2, #33	; 0x21
 8000ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fc86 	bl	80005b8 <HAL_GetTick>
 8000cac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc2:	d108      	bne.n	8000cd6 <HAL_UART_Transmit+0x82>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d104      	bne.n	8000cd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	e003      	b.n	8000cde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000ce6:	e02a      	b.n	8000d3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f840 	bl	8000d78 <UART_WaitOnFlagUntilTimeout>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e036      	b.n	8000d70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10b      	bne.n	8000d20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	e007      	b.n	8000d30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1cf      	bne.n	8000ce8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 f810 	bl	8000d78 <UART_WaitOnFlagUntilTimeout>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e006      	b.n	8000d70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2220      	movs	r2, #32
 8000d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000d6e:	2302      	movs	r3, #2
  }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b090      	sub	sp, #64	; 0x40
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d88:	e050      	b.n	8000e2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	d04c      	beq.n	8000e2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8000d98:	f7ff fc0e 	bl	80005b8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d241      	bcs.n	8000e2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	330c      	adds	r3, #12
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	e853 3f00 	ldrex	r3, [r3]
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	330c      	adds	r3, #12
 8000dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dd0:	e841 2300 	strex	r3, r2, [r1]
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e5      	bne.n	8000da8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3314      	adds	r3, #20
 8000de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	e853 3f00 	ldrex	r3, [r3]
 8000dea:	613b      	str	r3, [r7, #16]
   return(result);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3314      	adds	r3, #20
 8000dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dfc:	623a      	str	r2, [r7, #32]
 8000dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e00:	69f9      	ldr	r1, [r7, #28]
 8000e02:	6a3a      	ldr	r2, [r7, #32]
 8000e04:	e841 2300 	strex	r3, r2, [r1]
 8000e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e5      	bne.n	8000ddc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2220      	movs	r2, #32
 8000e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e00f      	b.n	8000e4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4013      	ands	r3, r2
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d09f      	beq.n	8000d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3740      	adds	r7, #64	; 0x40
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e58:	b0c0      	sub	sp, #256	; 0x100
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e70:	68d9      	ldr	r1, [r3, #12]
 8000e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	ea40 0301 	orr.w	r3, r0, r1
 8000e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000eac:	f021 010c 	bic.w	r1, r1, #12
 8000eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ece:	6999      	ldr	r1, [r3, #24]
 8000ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	ea40 0301 	orr.w	r3, r0, r1
 8000eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b91      	ldr	r3, [pc, #580]	; (8001128 <UART_SetConfig+0x2d4>)
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d005      	beq.n	8000ef4 <UART_SetConfig+0xa0>
 8000ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b8f      	ldr	r3, [pc, #572]	; (800112c <UART_SetConfig+0x2d8>)
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d104      	bne.n	8000efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000ef4:	f7ff fe44 	bl	8000b80 <HAL_RCC_GetPCLK2Freq>
 8000ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000efc:	e003      	b.n	8000f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000efe:	f7ff fe2b 	bl	8000b58 <HAL_RCC_GetPCLK1Freq>
 8000f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f10:	f040 8110 	bne.w	8001134 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000f26:	4622      	mov	r2, r4
 8000f28:	462b      	mov	r3, r5
 8000f2a:	1891      	adds	r1, r2, r2
 8000f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8000f2e:	415b      	adcs	r3, r3
 8000f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f36:	4620      	mov	r0, r4
 8000f38:	4629      	mov	r1, r5
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	eb12 0804 	adds.w	r8, r2, r4
 8000f40:	460c      	mov	r4, r1
 8000f42:	eb43 0904 	adc.w	r9, r3, r4
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f5a:	4690      	mov	r8, r2
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	eb18 0303 	adds.w	r3, r8, r3
 8000f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	eb49 0303 	adc.w	r3, r9, r3
 8000f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000f7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000f82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000f86:	460b      	mov	r3, r1
 8000f88:	18db      	adds	r3, r3, r3
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	eb42 0303 	adc.w	r3, r2, r3
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
 8000f94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000f9c:	f7ff f924 	bl	80001e8 <__aeabi_uldivmod>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <UART_SetConfig+0x2dc>)
 8000fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	011c      	lsls	r4, r3, #4
 8000fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000fb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000fbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	1891      	adds	r1, r2, r2
 8000fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8000fc8:	415b      	adcs	r3, r3
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	eb12 0a05 	adds.w	sl, r2, r5
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	4649      	mov	r1, r9
 8000fda:	460d      	mov	r5, r1
 8000fdc:	eb43 0b05 	adc.w	fp, r3, r5
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ff4:	4692      	mov	sl, r2
 8000ff6:	469b      	mov	fp, r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8000ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001002:	460b      	mov	r3, r1
 8001004:	eb4b 0303 	adc.w	r3, fp, r3
 8001008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800100c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800101c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001020:	460b      	mov	r3, r1
 8001022:	18db      	adds	r3, r3, r3
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
 8001026:	4613      	mov	r3, r2
 8001028:	eb42 0303 	adc.w	r3, r2, r3
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
 800102e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001036:	f7ff f8d7 	bl	80001e8 <__aeabi_uldivmod>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4611      	mov	r1, r2
 8001040:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <UART_SetConfig+0x2dc>)
 8001042:	fba3 2301 	umull	r2, r3, r3, r1
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2264      	movs	r2, #100	; 0x64
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	1acb      	subs	r3, r1, r3
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <UART_SetConfig+0x2dc>)
 8001058:	fba3 2302 	umull	r2, r3, r3, r2
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001064:	441c      	add	r4, r3
 8001066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800106a:	2200      	movs	r2, #0
 800106c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001078:	4642      	mov	r2, r8
 800107a:	464b      	mov	r3, r9
 800107c:	1891      	adds	r1, r2, r2
 800107e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001080:	415b      	adcs	r3, r3
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001088:	4641      	mov	r1, r8
 800108a:	1851      	adds	r1, r2, r1
 800108c:	6339      	str	r1, [r7, #48]	; 0x30
 800108e:	4649      	mov	r1, r9
 8001090:	414b      	adcs	r3, r1
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80010a0:	4659      	mov	r1, fp
 80010a2:	00cb      	lsls	r3, r1, #3
 80010a4:	4655      	mov	r5, sl
 80010a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80010aa:	4651      	mov	r1, sl
 80010ac:	00ca      	lsls	r2, r1, #3
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	4603      	mov	r3, r0
 80010b4:	4642      	mov	r2, r8
 80010b6:	189b      	adds	r3, r3, r2
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80010bc:	464b      	mov	r3, r9
 80010be:	460a      	mov	r2, r1
 80010c0:	eb42 0303 	adc.w	r3, r2, r3
 80010c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80010d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80010dc:	460b      	mov	r3, r1
 80010de:	18db      	adds	r3, r3, r3
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e2:	4613      	mov	r3, r2
 80010e4:	eb42 0303 	adc.w	r3, r2, r3
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80010f2:	f7ff f879 	bl	80001e8 <__aeabi_uldivmod>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <UART_SetConfig+0x2dc>)
 80010fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001100:	095b      	lsrs	r3, r3, #5
 8001102:	2164      	movs	r1, #100	; 0x64
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	3332      	adds	r3, #50	; 0x32
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <UART_SetConfig+0x2dc>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	f003 0207 	and.w	r2, r3, #7
 800111a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4422      	add	r2, r4
 8001122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001124:	e10a      	b.n	800133c <UART_SetConfig+0x4e8>
 8001126:	bf00      	nop
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001138:	2200      	movs	r2, #0
 800113a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800113e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001146:	4642      	mov	r2, r8
 8001148:	464b      	mov	r3, r9
 800114a:	1891      	adds	r1, r2, r2
 800114c:	6239      	str	r1, [r7, #32]
 800114e:	415b      	adcs	r3, r3
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001156:	4641      	mov	r1, r8
 8001158:	1854      	adds	r4, r2, r1
 800115a:	46cc      	mov	ip, r9
 800115c:	eb43 050c 	adc.w	r5, r3, ip
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	00eb      	lsls	r3, r5, #3
 800116a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800116e:	00e2      	lsls	r2, r4, #3
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	4640      	mov	r0, r8
 8001176:	4649      	mov	r1, r9
 8001178:	4603      	mov	r3, r0
 800117a:	18e3      	adds	r3, r4, r3
 800117c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001180:	460b      	mov	r3, r1
 8001182:	eb45 0303 	adc.w	r3, r5, r3
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800118a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001196:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011a6:	4629      	mov	r1, r5
 80011a8:	008b      	lsls	r3, r1, #2
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	4604      	mov	r4, r0
 80011b0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80011b4:	4601      	mov	r1, r0
 80011b6:	008a      	lsls	r2, r1, #2
 80011b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80011bc:	f7ff f814 	bl	80001e8 <__aeabi_uldivmod>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <UART_SetConfig+0x4f4>)
 80011c6:	fba3 2302 	umull	r2, r3, r3, r2
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	011c      	lsls	r4, r3, #4
 80011ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80011e0:	4642      	mov	r2, r8
 80011e2:	464b      	mov	r3, r9
 80011e4:	1891      	adds	r1, r2, r2
 80011e6:	61b9      	str	r1, [r7, #24]
 80011e8:	415b      	adcs	r3, r3
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f0:	4641      	mov	r1, r8
 80011f2:	1851      	adds	r1, r2, r1
 80011f4:	6139      	str	r1, [r7, #16]
 80011f6:	4649      	mov	r1, r9
 80011f8:	414b      	adcs	r3, r1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001208:	4659      	mov	r1, fp
 800120a:	00cb      	lsls	r3, r1, #3
 800120c:	4655      	mov	r5, sl
 800120e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001212:	4651      	mov	r1, sl
 8001214:	00ca      	lsls	r2, r1, #3
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	4603      	mov	r3, r0
 800121c:	4642      	mov	r2, r8
 800121e:	189b      	adds	r3, r3, r2
 8001220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001224:	464b      	mov	r3, r9
 8001226:	460a      	mov	r2, r1
 8001228:	eb42 0303 	adc.w	r3, r2, r3
 800122c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	67bb      	str	r3, [r7, #120]	; 0x78
 800123a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001248:	4649      	mov	r1, r9
 800124a:	008b      	lsls	r3, r1, #2
 800124c:	4645      	mov	r5, r8
 800124e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001252:	4641      	mov	r1, r8
 8001254:	008a      	lsls	r2, r1, #2
 8001256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800125a:	f7fe ffc5 	bl	80001e8 <__aeabi_uldivmod>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4611      	mov	r1, r2
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <UART_SetConfig+0x4f4>)
 8001266:	fba3 2301 	umull	r2, r3, r3, r1
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2264      	movs	r2, #100	; 0x64
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	1acb      	subs	r3, r1, r3
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	3332      	adds	r3, #50	; 0x32
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <UART_SetConfig+0x4f4>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001284:	441c      	add	r4, r3
 8001286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800128a:	2200      	movs	r2, #0
 800128c:	673b      	str	r3, [r7, #112]	; 0x70
 800128e:	677a      	str	r2, [r7, #116]	; 0x74
 8001290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001294:	4642      	mov	r2, r8
 8001296:	464b      	mov	r3, r9
 8001298:	1891      	adds	r1, r2, r2
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	415b      	adcs	r3, r3
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a4:	4641      	mov	r1, r8
 80012a6:	1851      	adds	r1, r2, r1
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	4649      	mov	r1, r9
 80012ac:	414b      	adcs	r3, r1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80012bc:	4659      	mov	r1, fp
 80012be:	00cb      	lsls	r3, r1, #3
 80012c0:	4655      	mov	r5, sl
 80012c2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80012c6:	4651      	mov	r1, sl
 80012c8:	00ca      	lsls	r2, r1, #3
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	4642      	mov	r2, r8
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80012d6:	464b      	mov	r3, r9
 80012d8:	460a      	mov	r2, r1
 80012da:	eb42 0303 	adc.w	r3, r2, r3
 80012de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	663b      	str	r3, [r7, #96]	; 0x60
 80012ea:	667a      	str	r2, [r7, #100]	; 0x64
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80012f8:	4649      	mov	r1, r9
 80012fa:	008b      	lsls	r3, r1, #2
 80012fc:	4645      	mov	r5, r8
 80012fe:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001302:	4641      	mov	r1, r8
 8001304:	008a      	lsls	r2, r1, #2
 8001306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800130a:	f7fe ff6d 	bl	80001e8 <__aeabi_uldivmod>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <UART_SetConfig+0x4f4>)
 8001314:	fba3 1302 	umull	r1, r3, r3, r2
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	2164      	movs	r1, #100	; 0x64
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	3332      	adds	r3, #50	; 0x32
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <UART_SetConfig+0x4f4>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	f003 020f 	and.w	r2, r3, #15
 8001332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4422      	add	r2, r4
 800133a:	609a      	str	r2, [r3, #8]
}
 800133c:	bf00      	nop
 800133e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001342:	46bd      	mov	sp, r7
 8001344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001348:	51eb851f 	.word	0x51eb851f

0800134c <__io_putchar>:

void UART1_Init(void);
void PD12_LED_Init(void);

int __io_putchar(int ch)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart1,(uint8_t*)&ch,1,100);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	2201      	movs	r2, #1
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <__io_putchar+0x20>)
 800135c:	f7ff fc7a 	bl	8000c54 <HAL_UART_Transmit>
	return ch;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000088 	.word	0x20000088

08001370 <main>:

int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_Init();
 8001374:	f7ff f8b6 	bl	80004e4 <HAL_Init>
	UART1_Init();
 8001378:	f000 f81a 	bl	80013b0 <UART1_Init>
	PD12_LED_Init();
 800137c:	f000 f870 	bl	8001460 <PD12_LED_Init>
	while(1)
	{
		printf("Hello World\r\n");
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <main+0x2c>)
 8001382:	f000 fa7b 	bl	800187c <puts>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <main+0x30>)
 800138c:	f7ff fbc0 	bl	8000b10 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f7ff f91a 	bl	80005cc <HAL_Delay>
		printf("Hello World\r\n");
 8001398:	e7f2      	b.n	8001380 <main+0x10>
 800139a:	bf00      	nop
 800139c:	08001fb4 	.word	0x08001fb4
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80013a8:	f7ff f8f4 	bl	8000594 <HAL_IncTick>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <UART1_Init>:

void UART1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <UART1_Init+0xa0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a24      	ldr	r2, [pc, #144]	; (8001450 <UART1_Init+0xa0>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <UART1_Init+0xa0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]

	// Configure Clock for UART
	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;
	__HAL_RCC_USART1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <UART1_Init+0xa0>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <UART1_Init+0xa0>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <UART1_Init+0xa0>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
//	HAL_UART_MspInit(&Uart1);
	/**********************/

	// GPIO Configuration

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
 80013ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013f2:	60fb      	str	r3, [r7, #12]
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
 80013f8:	2307      	movs	r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
	GpioStruct.Pull			= 	GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GpioStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <UART1_Init+0xa4>)
 800140c:	f7ff f9e6 	bl	80007dc <HAL_GPIO_Init>

	// USART2 Configuration


	Uart1.Instance				=	USART1; // USART2 Base Address is given
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <UART1_Init+0xa8>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <UART1_Init+0xac>)
 8001414:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART

	Uart1.Init.BaudRate			=	115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <UART1_Init+0xa8>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <UART1_Init+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <UART1_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <UART1_Init+0xa8>)
 800142c:	2208      	movs	r2, #8
 800142e:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <UART1_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <UART1_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <UART1_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <UART1_Init+0xa8>)
 8001444:	f7ff fbb0 	bl	8000ba8 <HAL_UART_Init>

}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	20000088 	.word	0x20000088
 800145c:	40011000 	.word	0x40011000

08001460 <PD12_LED_Init>:

void PD12_LED_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <PD12_LED_Init+0x54>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <PD12_LED_Init+0x54>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <PD12_LED_Init+0x54>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef	GPIO_InitStruct = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin		= GPIO_PIN_12;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed	= GPIO_SPEED_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <PD12_LED_Init+0x58>)
 80014a8:	f7ff f998 	bl	80007dc <HAL_GPIO_Init>
}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00

080014bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
  }

  return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e009      	b.n	800151c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff1b 	bl	800134c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <_write+0x12>
  }
  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001554:	605a      	str	r2, [r3, #4]
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <_isatty>:

int _isatty(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f000 fa8a 	bl	8001ad8 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20020000 	.word	0x20020000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	200000cc 	.word	0x200000cc
 80015f8:	20000220 	.word	0x20000220

080015fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800162a:	f000 fa5b 	bl	8001ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fe9f 	bl	8001370 <main>

08001632 <LoopForever>:

LoopForever:
  b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   r0, =_estack
 8001634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001640:	08001fdc 	.word	0x08001fdc
  ldr r2, =_sbss
 8001644:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001648:	2000021c 	.word	0x2000021c

0800164c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <std>:
 8001650:	2300      	movs	r3, #0
 8001652:	b510      	push	{r4, lr}
 8001654:	4604      	mov	r4, r0
 8001656:	e9c0 3300 	strd	r3, r3, [r0]
 800165a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800165e:	6083      	str	r3, [r0, #8]
 8001660:	8181      	strh	r1, [r0, #12]
 8001662:	6643      	str	r3, [r0, #100]	; 0x64
 8001664:	81c2      	strh	r2, [r0, #14]
 8001666:	6183      	str	r3, [r0, #24]
 8001668:	4619      	mov	r1, r3
 800166a:	2208      	movs	r2, #8
 800166c:	305c      	adds	r0, #92	; 0x5c
 800166e:	f000 f9e5 	bl	8001a3c <memset>
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <std+0x58>)
 8001674:	6263      	str	r3, [r4, #36]	; 0x24
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <std+0x5c>)
 8001678:	62a3      	str	r3, [r4, #40]	; 0x28
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <std+0x60>)
 800167c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <std+0x64>)
 8001680:	6323      	str	r3, [r4, #48]	; 0x30
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <std+0x68>)
 8001684:	6224      	str	r4, [r4, #32]
 8001686:	429c      	cmp	r4, r3
 8001688:	d006      	beq.n	8001698 <std+0x48>
 800168a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800168e:	4294      	cmp	r4, r2
 8001690:	d002      	beq.n	8001698 <std+0x48>
 8001692:	33d0      	adds	r3, #208	; 0xd0
 8001694:	429c      	cmp	r4, r3
 8001696:	d105      	bne.n	80016a4 <std+0x54>
 8001698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800169c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a0:	f000 ba44 	b.w	8001b2c <__retarget_lock_init_recursive>
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	0800188d 	.word	0x0800188d
 80016ac:	080018af 	.word	0x080018af
 80016b0:	080018e7 	.word	0x080018e7
 80016b4:	0800190b 	.word	0x0800190b
 80016b8:	200000d0 	.word	0x200000d0

080016bc <stdio_exit_handler>:
 80016bc:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <stdio_exit_handler+0xc>)
 80016be:	4903      	ldr	r1, [pc, #12]	; (80016cc <stdio_exit_handler+0x10>)
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <stdio_exit_handler+0x14>)
 80016c2:	f000 b869 	b.w	8001798 <_fwalk_sglue>
 80016c6:	bf00      	nop
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	08001e25 	.word	0x08001e25
 80016d0:	20000018 	.word	0x20000018

080016d4 <cleanup_stdio>:
 80016d4:	6841      	ldr	r1, [r0, #4]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <cleanup_stdio+0x34>)
 80016d8:	4299      	cmp	r1, r3
 80016da:	b510      	push	{r4, lr}
 80016dc:	4604      	mov	r4, r0
 80016de:	d001      	beq.n	80016e4 <cleanup_stdio+0x10>
 80016e0:	f000 fba0 	bl	8001e24 <_fflush_r>
 80016e4:	68a1      	ldr	r1, [r4, #8]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <cleanup_stdio+0x38>)
 80016e8:	4299      	cmp	r1, r3
 80016ea:	d002      	beq.n	80016f2 <cleanup_stdio+0x1e>
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 fb99 	bl	8001e24 <_fflush_r>
 80016f2:	68e1      	ldr	r1, [r4, #12]
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <cleanup_stdio+0x3c>)
 80016f6:	4299      	cmp	r1, r3
 80016f8:	d004      	beq.n	8001704 <cleanup_stdio+0x30>
 80016fa:	4620      	mov	r0, r4
 80016fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001700:	f000 bb90 	b.w	8001e24 <_fflush_r>
 8001704:	bd10      	pop	{r4, pc}
 8001706:	bf00      	nop
 8001708:	200000d0 	.word	0x200000d0
 800170c:	20000138 	.word	0x20000138
 8001710:	200001a0 	.word	0x200001a0

08001714 <global_stdio_init.part.0>:
 8001714:	b510      	push	{r4, lr}
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <global_stdio_init.part.0+0x30>)
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <global_stdio_init.part.0+0x34>)
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <global_stdio_init.part.0+0x38>)
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4620      	mov	r0, r4
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	f7ff ff94 	bl	8001650 <std>
 8001728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800172c:	2201      	movs	r2, #1
 800172e:	2109      	movs	r1, #9
 8001730:	f7ff ff8e 	bl	8001650 <std>
 8001734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001738:	2202      	movs	r2, #2
 800173a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800173e:	2112      	movs	r1, #18
 8001740:	f7ff bf86 	b.w	8001650 <std>
 8001744:	20000208 	.word	0x20000208
 8001748:	200000d0 	.word	0x200000d0
 800174c:	080016bd 	.word	0x080016bd

08001750 <__sfp_lock_acquire>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__sfp_lock_acquire+0x8>)
 8001752:	f000 b9ec 	b.w	8001b2e <__retarget_lock_acquire_recursive>
 8001756:	bf00      	nop
 8001758:	20000211 	.word	0x20000211

0800175c <__sfp_lock_release>:
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <__sfp_lock_release+0x8>)
 800175e:	f000 b9e7 	b.w	8001b30 <__retarget_lock_release_recursive>
 8001762:	bf00      	nop
 8001764:	20000211 	.word	0x20000211

08001768 <__sinit>:
 8001768:	b510      	push	{r4, lr}
 800176a:	4604      	mov	r4, r0
 800176c:	f7ff fff0 	bl	8001750 <__sfp_lock_acquire>
 8001770:	6a23      	ldr	r3, [r4, #32]
 8001772:	b11b      	cbz	r3, 800177c <__sinit+0x14>
 8001774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001778:	f7ff bff0 	b.w	800175c <__sfp_lock_release>
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__sinit+0x28>)
 800177e:	6223      	str	r3, [r4, #32]
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__sinit+0x2c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f5      	bne.n	8001774 <__sinit+0xc>
 8001788:	f7ff ffc4 	bl	8001714 <global_stdio_init.part.0>
 800178c:	e7f2      	b.n	8001774 <__sinit+0xc>
 800178e:	bf00      	nop
 8001790:	080016d5 	.word	0x080016d5
 8001794:	20000208 	.word	0x20000208

08001798 <_fwalk_sglue>:
 8001798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800179c:	4607      	mov	r7, r0
 800179e:	4688      	mov	r8, r1
 80017a0:	4614      	mov	r4, r2
 80017a2:	2600      	movs	r6, #0
 80017a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017a8:	f1b9 0901 	subs.w	r9, r9, #1
 80017ac:	d505      	bpl.n	80017ba <_fwalk_sglue+0x22>
 80017ae:	6824      	ldr	r4, [r4, #0]
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d1f7      	bne.n	80017a4 <_fwalk_sglue+0xc>
 80017b4:	4630      	mov	r0, r6
 80017b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ba:	89ab      	ldrh	r3, [r5, #12]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d907      	bls.n	80017d0 <_fwalk_sglue+0x38>
 80017c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017c4:	3301      	adds	r3, #1
 80017c6:	d003      	beq.n	80017d0 <_fwalk_sglue+0x38>
 80017c8:	4629      	mov	r1, r5
 80017ca:	4638      	mov	r0, r7
 80017cc:	47c0      	blx	r8
 80017ce:	4306      	orrs	r6, r0
 80017d0:	3568      	adds	r5, #104	; 0x68
 80017d2:	e7e9      	b.n	80017a8 <_fwalk_sglue+0x10>

080017d4 <_puts_r>:
 80017d4:	6a03      	ldr	r3, [r0, #32]
 80017d6:	b570      	push	{r4, r5, r6, lr}
 80017d8:	6884      	ldr	r4, [r0, #8]
 80017da:	4605      	mov	r5, r0
 80017dc:	460e      	mov	r6, r1
 80017de:	b90b      	cbnz	r3, 80017e4 <_puts_r+0x10>
 80017e0:	f7ff ffc2 	bl	8001768 <__sinit>
 80017e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017e6:	07db      	lsls	r3, r3, #31
 80017e8:	d405      	bmi.n	80017f6 <_puts_r+0x22>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	0598      	lsls	r0, r3, #22
 80017ee:	d402      	bmi.n	80017f6 <_puts_r+0x22>
 80017f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017f2:	f000 f99c 	bl	8001b2e <__retarget_lock_acquire_recursive>
 80017f6:	89a3      	ldrh	r3, [r4, #12]
 80017f8:	0719      	lsls	r1, r3, #28
 80017fa:	d513      	bpl.n	8001824 <_puts_r+0x50>
 80017fc:	6923      	ldr	r3, [r4, #16]
 80017fe:	b18b      	cbz	r3, 8001824 <_puts_r+0x50>
 8001800:	3e01      	subs	r6, #1
 8001802:	68a3      	ldr	r3, [r4, #8]
 8001804:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001808:	3b01      	subs	r3, #1
 800180a:	60a3      	str	r3, [r4, #8]
 800180c:	b9e9      	cbnz	r1, 800184a <_puts_r+0x76>
 800180e:	2b00      	cmp	r3, #0
 8001810:	da2e      	bge.n	8001870 <_puts_r+0x9c>
 8001812:	4622      	mov	r2, r4
 8001814:	210a      	movs	r1, #10
 8001816:	4628      	mov	r0, r5
 8001818:	f000 f87b 	bl	8001912 <__swbuf_r>
 800181c:	3001      	adds	r0, #1
 800181e:	d007      	beq.n	8001830 <_puts_r+0x5c>
 8001820:	250a      	movs	r5, #10
 8001822:	e007      	b.n	8001834 <_puts_r+0x60>
 8001824:	4621      	mov	r1, r4
 8001826:	4628      	mov	r0, r5
 8001828:	f000 f8b0 	bl	800198c <__swsetup_r>
 800182c:	2800      	cmp	r0, #0
 800182e:	d0e7      	beq.n	8001800 <_puts_r+0x2c>
 8001830:	f04f 35ff 	mov.w	r5, #4294967295
 8001834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001836:	07da      	lsls	r2, r3, #31
 8001838:	d405      	bmi.n	8001846 <_puts_r+0x72>
 800183a:	89a3      	ldrh	r3, [r4, #12]
 800183c:	059b      	lsls	r3, r3, #22
 800183e:	d402      	bmi.n	8001846 <_puts_r+0x72>
 8001840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001842:	f000 f975 	bl	8001b30 <__retarget_lock_release_recursive>
 8001846:	4628      	mov	r0, r5
 8001848:	bd70      	pop	{r4, r5, r6, pc}
 800184a:	2b00      	cmp	r3, #0
 800184c:	da04      	bge.n	8001858 <_puts_r+0x84>
 800184e:	69a2      	ldr	r2, [r4, #24]
 8001850:	429a      	cmp	r2, r3
 8001852:	dc06      	bgt.n	8001862 <_puts_r+0x8e>
 8001854:	290a      	cmp	r1, #10
 8001856:	d004      	beq.n	8001862 <_puts_r+0x8e>
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	6022      	str	r2, [r4, #0]
 800185e:	7019      	strb	r1, [r3, #0]
 8001860:	e7cf      	b.n	8001802 <_puts_r+0x2e>
 8001862:	4622      	mov	r2, r4
 8001864:	4628      	mov	r0, r5
 8001866:	f000 f854 	bl	8001912 <__swbuf_r>
 800186a:	3001      	adds	r0, #1
 800186c:	d1c9      	bne.n	8001802 <_puts_r+0x2e>
 800186e:	e7df      	b.n	8001830 <_puts_r+0x5c>
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	250a      	movs	r5, #10
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	6022      	str	r2, [r4, #0]
 8001878:	701d      	strb	r5, [r3, #0]
 800187a:	e7db      	b.n	8001834 <_puts_r+0x60>

0800187c <puts>:
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <puts+0xc>)
 800187e:	4601      	mov	r1, r0
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f7ff bfa7 	b.w	80017d4 <_puts_r>
 8001886:	bf00      	nop
 8001888:	20000064 	.word	0x20000064

0800188c <__sread>:
 800188c:	b510      	push	{r4, lr}
 800188e:	460c      	mov	r4, r1
 8001890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001894:	f000 f8fc 	bl	8001a90 <_read_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	bfab      	itete	ge
 800189c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800189e:	89a3      	ldrhlt	r3, [r4, #12]
 80018a0:	181b      	addge	r3, r3, r0
 80018a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018a6:	bfac      	ite	ge
 80018a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80018aa:	81a3      	strhlt	r3, [r4, #12]
 80018ac:	bd10      	pop	{r4, pc}

080018ae <__swrite>:
 80018ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b2:	461f      	mov	r7, r3
 80018b4:	898b      	ldrh	r3, [r1, #12]
 80018b6:	05db      	lsls	r3, r3, #23
 80018b8:	4605      	mov	r5, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	4616      	mov	r6, r2
 80018be:	d505      	bpl.n	80018cc <__swrite+0x1e>
 80018c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018c4:	2302      	movs	r3, #2
 80018c6:	2200      	movs	r2, #0
 80018c8:	f000 f8d0 	bl	8001a6c <_lseek_r>
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d6:	81a3      	strh	r3, [r4, #12]
 80018d8:	4632      	mov	r2, r6
 80018da:	463b      	mov	r3, r7
 80018dc:	4628      	mov	r0, r5
 80018de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018e2:	f000 b8e7 	b.w	8001ab4 <_write_r>

080018e6 <__sseek>:
 80018e6:	b510      	push	{r4, lr}
 80018e8:	460c      	mov	r4, r1
 80018ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ee:	f000 f8bd 	bl	8001a6c <_lseek_r>
 80018f2:	1c43      	adds	r3, r0, #1
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	bf15      	itete	ne
 80018f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80018fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001902:	81a3      	strheq	r3, [r4, #12]
 8001904:	bf18      	it	ne
 8001906:	81a3      	strhne	r3, [r4, #12]
 8001908:	bd10      	pop	{r4, pc}

0800190a <__sclose>:
 800190a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800190e:	f000 b89d 	b.w	8001a4c <_close_r>

08001912 <__swbuf_r>:
 8001912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001914:	460e      	mov	r6, r1
 8001916:	4614      	mov	r4, r2
 8001918:	4605      	mov	r5, r0
 800191a:	b118      	cbz	r0, 8001924 <__swbuf_r+0x12>
 800191c:	6a03      	ldr	r3, [r0, #32]
 800191e:	b90b      	cbnz	r3, 8001924 <__swbuf_r+0x12>
 8001920:	f7ff ff22 	bl	8001768 <__sinit>
 8001924:	69a3      	ldr	r3, [r4, #24]
 8001926:	60a3      	str	r3, [r4, #8]
 8001928:	89a3      	ldrh	r3, [r4, #12]
 800192a:	071a      	lsls	r2, r3, #28
 800192c:	d525      	bpl.n	800197a <__swbuf_r+0x68>
 800192e:	6923      	ldr	r3, [r4, #16]
 8001930:	b31b      	cbz	r3, 800197a <__swbuf_r+0x68>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	6922      	ldr	r2, [r4, #16]
 8001936:	1a98      	subs	r0, r3, r2
 8001938:	6963      	ldr	r3, [r4, #20]
 800193a:	b2f6      	uxtb	r6, r6
 800193c:	4283      	cmp	r3, r0
 800193e:	4637      	mov	r7, r6
 8001940:	dc04      	bgt.n	800194c <__swbuf_r+0x3a>
 8001942:	4621      	mov	r1, r4
 8001944:	4628      	mov	r0, r5
 8001946:	f000 fa6d 	bl	8001e24 <_fflush_r>
 800194a:	b9e0      	cbnz	r0, 8001986 <__swbuf_r+0x74>
 800194c:	68a3      	ldr	r3, [r4, #8]
 800194e:	3b01      	subs	r3, #1
 8001950:	60a3      	str	r3, [r4, #8]
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	6022      	str	r2, [r4, #0]
 8001958:	701e      	strb	r6, [r3, #0]
 800195a:	6962      	ldr	r2, [r4, #20]
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	429a      	cmp	r2, r3
 8001960:	d004      	beq.n	800196c <__swbuf_r+0x5a>
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	07db      	lsls	r3, r3, #31
 8001966:	d506      	bpl.n	8001976 <__swbuf_r+0x64>
 8001968:	2e0a      	cmp	r6, #10
 800196a:	d104      	bne.n	8001976 <__swbuf_r+0x64>
 800196c:	4621      	mov	r1, r4
 800196e:	4628      	mov	r0, r5
 8001970:	f000 fa58 	bl	8001e24 <_fflush_r>
 8001974:	b938      	cbnz	r0, 8001986 <__swbuf_r+0x74>
 8001976:	4638      	mov	r0, r7
 8001978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800197a:	4621      	mov	r1, r4
 800197c:	4628      	mov	r0, r5
 800197e:	f000 f805 	bl	800198c <__swsetup_r>
 8001982:	2800      	cmp	r0, #0
 8001984:	d0d5      	beq.n	8001932 <__swbuf_r+0x20>
 8001986:	f04f 37ff 	mov.w	r7, #4294967295
 800198a:	e7f4      	b.n	8001976 <__swbuf_r+0x64>

0800198c <__swsetup_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <__swsetup_r+0xac>)
 8001990:	4605      	mov	r5, r0
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	460c      	mov	r4, r1
 8001996:	b118      	cbz	r0, 80019a0 <__swsetup_r+0x14>
 8001998:	6a03      	ldr	r3, [r0, #32]
 800199a:	b90b      	cbnz	r3, 80019a0 <__swsetup_r+0x14>
 800199c:	f7ff fee4 	bl	8001768 <__sinit>
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019a6:	0718      	lsls	r0, r3, #28
 80019a8:	d422      	bmi.n	80019f0 <__swsetup_r+0x64>
 80019aa:	06d9      	lsls	r1, r3, #27
 80019ac:	d407      	bmi.n	80019be <__swsetup_r+0x32>
 80019ae:	2309      	movs	r3, #9
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019b6:	81a3      	strh	r3, [r4, #12]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	e034      	b.n	8001a28 <__swsetup_r+0x9c>
 80019be:	0758      	lsls	r0, r3, #29
 80019c0:	d512      	bpl.n	80019e8 <__swsetup_r+0x5c>
 80019c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019c4:	b141      	cbz	r1, 80019d8 <__swsetup_r+0x4c>
 80019c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019ca:	4299      	cmp	r1, r3
 80019cc:	d002      	beq.n	80019d4 <__swsetup_r+0x48>
 80019ce:	4628      	mov	r0, r5
 80019d0:	f000 f8b0 	bl	8001b34 <_free_r>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6363      	str	r3, [r4, #52]	; 0x34
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019de:	81a3      	strh	r3, [r4, #12]
 80019e0:	2300      	movs	r3, #0
 80019e2:	6063      	str	r3, [r4, #4]
 80019e4:	6923      	ldr	r3, [r4, #16]
 80019e6:	6023      	str	r3, [r4, #0]
 80019e8:	89a3      	ldrh	r3, [r4, #12]
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	81a3      	strh	r3, [r4, #12]
 80019f0:	6923      	ldr	r3, [r4, #16]
 80019f2:	b94b      	cbnz	r3, 8001a08 <__swsetup_r+0x7c>
 80019f4:	89a3      	ldrh	r3, [r4, #12]
 80019f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fe:	d003      	beq.n	8001a08 <__swsetup_r+0x7c>
 8001a00:	4621      	mov	r1, r4
 8001a02:	4628      	mov	r0, r5
 8001a04:	f000 fa5c 	bl	8001ec0 <__smakebuf_r>
 8001a08:	89a0      	ldrh	r0, [r4, #12]
 8001a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a0e:	f010 0301 	ands.w	r3, r0, #1
 8001a12:	d00a      	beq.n	8001a2a <__swsetup_r+0x9e>
 8001a14:	2300      	movs	r3, #0
 8001a16:	60a3      	str	r3, [r4, #8]
 8001a18:	6963      	ldr	r3, [r4, #20]
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	61a3      	str	r3, [r4, #24]
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	b943      	cbnz	r3, 8001a34 <__swsetup_r+0xa8>
 8001a22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a26:	d1c4      	bne.n	80019b2 <__swsetup_r+0x26>
 8001a28:	bd38      	pop	{r3, r4, r5, pc}
 8001a2a:	0781      	lsls	r1, r0, #30
 8001a2c:	bf58      	it	pl
 8001a2e:	6963      	ldrpl	r3, [r4, #20]
 8001a30:	60a3      	str	r3, [r4, #8]
 8001a32:	e7f4      	b.n	8001a1e <__swsetup_r+0x92>
 8001a34:	2000      	movs	r0, #0
 8001a36:	e7f7      	b.n	8001a28 <__swsetup_r+0x9c>
 8001a38:	20000064 	.word	0x20000064

08001a3c <memset>:
 8001a3c:	4402      	add	r2, r0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d100      	bne.n	8001a46 <memset+0xa>
 8001a44:	4770      	bx	lr
 8001a46:	f803 1b01 	strb.w	r1, [r3], #1
 8001a4a:	e7f9      	b.n	8001a40 <memset+0x4>

08001a4c <_close_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4d06      	ldr	r5, [pc, #24]	; (8001a68 <_close_r+0x1c>)
 8001a50:	2300      	movs	r3, #0
 8001a52:	4604      	mov	r4, r0
 8001a54:	4608      	mov	r0, r1
 8001a56:	602b      	str	r3, [r5, #0]
 8001a58:	f7ff fd69 	bl	800152e <_close>
 8001a5c:	1c43      	adds	r3, r0, #1
 8001a5e:	d102      	bne.n	8001a66 <_close_r+0x1a>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	b103      	cbz	r3, 8001a66 <_close_r+0x1a>
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
 8001a68:	2000020c 	.word	0x2000020c

08001a6c <_lseek_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4d07      	ldr	r5, [pc, #28]	; (8001a8c <_lseek_r+0x20>)
 8001a70:	4604      	mov	r4, r0
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	2200      	movs	r2, #0
 8001a78:	602a      	str	r2, [r5, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f7ff fd7b 	bl	8001576 <_lseek>
 8001a80:	1c43      	adds	r3, r0, #1
 8001a82:	d102      	bne.n	8001a8a <_lseek_r+0x1e>
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	b103      	cbz	r3, 8001a8a <_lseek_r+0x1e>
 8001a88:	6023      	str	r3, [r4, #0]
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
 8001a8c:	2000020c 	.word	0x2000020c

08001a90 <_read_r>:
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4d07      	ldr	r5, [pc, #28]	; (8001ab0 <_read_r+0x20>)
 8001a94:	4604      	mov	r4, r0
 8001a96:	4608      	mov	r0, r1
 8001a98:	4611      	mov	r1, r2
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	602a      	str	r2, [r5, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f7ff fd0c 	bl	80014bc <_read>
 8001aa4:	1c43      	adds	r3, r0, #1
 8001aa6:	d102      	bne.n	8001aae <_read_r+0x1e>
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	b103      	cbz	r3, 8001aae <_read_r+0x1e>
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	bd38      	pop	{r3, r4, r5, pc}
 8001ab0:	2000020c 	.word	0x2000020c

08001ab4 <_write_r>:
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	4d07      	ldr	r5, [pc, #28]	; (8001ad4 <_write_r+0x20>)
 8001ab8:	4604      	mov	r4, r0
 8001aba:	4608      	mov	r0, r1
 8001abc:	4611      	mov	r1, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	602a      	str	r2, [r5, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f7ff fd17 	bl	80014f6 <_write>
 8001ac8:	1c43      	adds	r3, r0, #1
 8001aca:	d102      	bne.n	8001ad2 <_write_r+0x1e>
 8001acc:	682b      	ldr	r3, [r5, #0]
 8001ace:	b103      	cbz	r3, 8001ad2 <_write_r+0x1e>
 8001ad0:	6023      	str	r3, [r4, #0]
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	2000020c 	.word	0x2000020c

08001ad8 <__errno>:
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <__errno+0x8>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000064 	.word	0x20000064

08001ae4 <__libc_init_array>:
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4d0d      	ldr	r5, [pc, #52]	; (8001b1c <__libc_init_array+0x38>)
 8001ae8:	4c0d      	ldr	r4, [pc, #52]	; (8001b20 <__libc_init_array+0x3c>)
 8001aea:	1b64      	subs	r4, r4, r5
 8001aec:	10a4      	asrs	r4, r4, #2
 8001aee:	2600      	movs	r6, #0
 8001af0:	42a6      	cmp	r6, r4
 8001af2:	d109      	bne.n	8001b08 <__libc_init_array+0x24>
 8001af4:	4d0b      	ldr	r5, [pc, #44]	; (8001b24 <__libc_init_array+0x40>)
 8001af6:	4c0c      	ldr	r4, [pc, #48]	; (8001b28 <__libc_init_array+0x44>)
 8001af8:	f000 fa50 	bl	8001f9c <_init>
 8001afc:	1b64      	subs	r4, r4, r5
 8001afe:	10a4      	asrs	r4, r4, #2
 8001b00:	2600      	movs	r6, #0
 8001b02:	42a6      	cmp	r6, r4
 8001b04:	d105      	bne.n	8001b12 <__libc_init_array+0x2e>
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
 8001b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b0c:	4798      	blx	r3
 8001b0e:	3601      	adds	r6, #1
 8001b10:	e7ee      	b.n	8001af0 <__libc_init_array+0xc>
 8001b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b16:	4798      	blx	r3
 8001b18:	3601      	adds	r6, #1
 8001b1a:	e7f2      	b.n	8001b02 <__libc_init_array+0x1e>
 8001b1c:	08001fd4 	.word	0x08001fd4
 8001b20:	08001fd4 	.word	0x08001fd4
 8001b24:	08001fd4 	.word	0x08001fd4
 8001b28:	08001fd8 	.word	0x08001fd8

08001b2c <__retarget_lock_init_recursive>:
 8001b2c:	4770      	bx	lr

08001b2e <__retarget_lock_acquire_recursive>:
 8001b2e:	4770      	bx	lr

08001b30 <__retarget_lock_release_recursive>:
 8001b30:	4770      	bx	lr
	...

08001b34 <_free_r>:
 8001b34:	b538      	push	{r3, r4, r5, lr}
 8001b36:	4605      	mov	r5, r0
 8001b38:	2900      	cmp	r1, #0
 8001b3a:	d041      	beq.n	8001bc0 <_free_r+0x8c>
 8001b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b40:	1f0c      	subs	r4, r1, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bfb8      	it	lt
 8001b46:	18e4      	addlt	r4, r4, r3
 8001b48:	f000 f8de 	bl	8001d08 <__malloc_lock>
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <_free_r+0x90>)
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	b933      	cbnz	r3, 8001b60 <_free_r+0x2c>
 8001b52:	6063      	str	r3, [r4, #4]
 8001b54:	6014      	str	r4, [r2, #0]
 8001b56:	4628      	mov	r0, r5
 8001b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b5c:	f000 b8da 	b.w	8001d14 <__malloc_unlock>
 8001b60:	42a3      	cmp	r3, r4
 8001b62:	d908      	bls.n	8001b76 <_free_r+0x42>
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	1821      	adds	r1, r4, r0
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	bf01      	itttt	eq
 8001b6c:	6819      	ldreq	r1, [r3, #0]
 8001b6e:	685b      	ldreq	r3, [r3, #4]
 8001b70:	1809      	addeq	r1, r1, r0
 8001b72:	6021      	streq	r1, [r4, #0]
 8001b74:	e7ed      	b.n	8001b52 <_free_r+0x1e>
 8001b76:	461a      	mov	r2, r3
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	b10b      	cbz	r3, 8001b80 <_free_r+0x4c>
 8001b7c:	42a3      	cmp	r3, r4
 8001b7e:	d9fa      	bls.n	8001b76 <_free_r+0x42>
 8001b80:	6811      	ldr	r1, [r2, #0]
 8001b82:	1850      	adds	r0, r2, r1
 8001b84:	42a0      	cmp	r0, r4
 8001b86:	d10b      	bne.n	8001ba0 <_free_r+0x6c>
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	4401      	add	r1, r0
 8001b8c:	1850      	adds	r0, r2, r1
 8001b8e:	4283      	cmp	r3, r0
 8001b90:	6011      	str	r1, [r2, #0]
 8001b92:	d1e0      	bne.n	8001b56 <_free_r+0x22>
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	6053      	str	r3, [r2, #4]
 8001b9a:	4408      	add	r0, r1
 8001b9c:	6010      	str	r0, [r2, #0]
 8001b9e:	e7da      	b.n	8001b56 <_free_r+0x22>
 8001ba0:	d902      	bls.n	8001ba8 <_free_r+0x74>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	602b      	str	r3, [r5, #0]
 8001ba6:	e7d6      	b.n	8001b56 <_free_r+0x22>
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	1821      	adds	r1, r4, r0
 8001bac:	428b      	cmp	r3, r1
 8001bae:	bf04      	itt	eq
 8001bb0:	6819      	ldreq	r1, [r3, #0]
 8001bb2:	685b      	ldreq	r3, [r3, #4]
 8001bb4:	6063      	str	r3, [r4, #4]
 8001bb6:	bf04      	itt	eq
 8001bb8:	1809      	addeq	r1, r1, r0
 8001bba:	6021      	streq	r1, [r4, #0]
 8001bbc:	6054      	str	r4, [r2, #4]
 8001bbe:	e7ca      	b.n	8001b56 <_free_r+0x22>
 8001bc0:	bd38      	pop	{r3, r4, r5, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000214 	.word	0x20000214

08001bc8 <sbrk_aligned>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4e0e      	ldr	r6, [pc, #56]	; (8001c04 <sbrk_aligned+0x3c>)
 8001bcc:	460c      	mov	r4, r1
 8001bce:	6831      	ldr	r1, [r6, #0]
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	b911      	cbnz	r1, 8001bda <sbrk_aligned+0x12>
 8001bd4:	f000 f9d2 	bl	8001f7c <_sbrk_r>
 8001bd8:	6030      	str	r0, [r6, #0]
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 f9cd 	bl	8001f7c <_sbrk_r>
 8001be2:	1c43      	adds	r3, r0, #1
 8001be4:	d00a      	beq.n	8001bfc <sbrk_aligned+0x34>
 8001be6:	1cc4      	adds	r4, r0, #3
 8001be8:	f024 0403 	bic.w	r4, r4, #3
 8001bec:	42a0      	cmp	r0, r4
 8001bee:	d007      	beq.n	8001c00 <sbrk_aligned+0x38>
 8001bf0:	1a21      	subs	r1, r4, r0
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 f9c2 	bl	8001f7c <_sbrk_r>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d101      	bne.n	8001c00 <sbrk_aligned+0x38>
 8001bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	20000218 	.word	0x20000218

08001c08 <_malloc_r>:
 8001c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c0c:	1ccd      	adds	r5, r1, #3
 8001c0e:	f025 0503 	bic.w	r5, r5, #3
 8001c12:	3508      	adds	r5, #8
 8001c14:	2d0c      	cmp	r5, #12
 8001c16:	bf38      	it	cc
 8001c18:	250c      	movcc	r5, #12
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	4607      	mov	r7, r0
 8001c1e:	db01      	blt.n	8001c24 <_malloc_r+0x1c>
 8001c20:	42a9      	cmp	r1, r5
 8001c22:	d905      	bls.n	8001c30 <_malloc_r+0x28>
 8001c24:	230c      	movs	r3, #12
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	2600      	movs	r6, #0
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001d04 <_malloc_r+0xfc>
 8001c34:	f000 f868 	bl	8001d08 <__malloc_lock>
 8001c38:	f8d8 3000 	ldr.w	r3, [r8]
 8001c3c:	461c      	mov	r4, r3
 8001c3e:	bb5c      	cbnz	r4, 8001c98 <_malloc_r+0x90>
 8001c40:	4629      	mov	r1, r5
 8001c42:	4638      	mov	r0, r7
 8001c44:	f7ff ffc0 	bl	8001bc8 <sbrk_aligned>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	d155      	bne.n	8001cfa <_malloc_r+0xf2>
 8001c4e:	f8d8 4000 	ldr.w	r4, [r8]
 8001c52:	4626      	mov	r6, r4
 8001c54:	2e00      	cmp	r6, #0
 8001c56:	d145      	bne.n	8001ce4 <_malloc_r+0xdc>
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d048      	beq.n	8001cee <_malloc_r+0xe6>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	4631      	mov	r1, r6
 8001c60:	4638      	mov	r0, r7
 8001c62:	eb04 0903 	add.w	r9, r4, r3
 8001c66:	f000 f989 	bl	8001f7c <_sbrk_r>
 8001c6a:	4581      	cmp	r9, r0
 8001c6c:	d13f      	bne.n	8001cee <_malloc_r+0xe6>
 8001c6e:	6821      	ldr	r1, [r4, #0]
 8001c70:	1a6d      	subs	r5, r5, r1
 8001c72:	4629      	mov	r1, r5
 8001c74:	4638      	mov	r0, r7
 8001c76:	f7ff ffa7 	bl	8001bc8 <sbrk_aligned>
 8001c7a:	3001      	adds	r0, #1
 8001c7c:	d037      	beq.n	8001cee <_malloc_r+0xe6>
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	442b      	add	r3, r5
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	f8d8 3000 	ldr.w	r3, [r8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d038      	beq.n	8001cfe <_malloc_r+0xf6>
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	42a2      	cmp	r2, r4
 8001c90:	d12b      	bne.n	8001cea <_malloc_r+0xe2>
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	e00f      	b.n	8001cb8 <_malloc_r+0xb0>
 8001c98:	6822      	ldr	r2, [r4, #0]
 8001c9a:	1b52      	subs	r2, r2, r5
 8001c9c:	d41f      	bmi.n	8001cde <_malloc_r+0xd6>
 8001c9e:	2a0b      	cmp	r2, #11
 8001ca0:	d917      	bls.n	8001cd2 <_malloc_r+0xca>
 8001ca2:	1961      	adds	r1, r4, r5
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	6025      	str	r5, [r4, #0]
 8001ca8:	bf18      	it	ne
 8001caa:	6059      	strne	r1, [r3, #4]
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	bf08      	it	eq
 8001cb0:	f8c8 1000 	streq.w	r1, [r8]
 8001cb4:	5162      	str	r2, [r4, r5]
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	4638      	mov	r0, r7
 8001cba:	f104 060b 	add.w	r6, r4, #11
 8001cbe:	f000 f829 	bl	8001d14 <__malloc_unlock>
 8001cc2:	f026 0607 	bic.w	r6, r6, #7
 8001cc6:	1d23      	adds	r3, r4, #4
 8001cc8:	1af2      	subs	r2, r6, r3
 8001cca:	d0ae      	beq.n	8001c2a <_malloc_r+0x22>
 8001ccc:	1b9b      	subs	r3, r3, r6
 8001cce:	50a3      	str	r3, [r4, r2]
 8001cd0:	e7ab      	b.n	8001c2a <_malloc_r+0x22>
 8001cd2:	42a3      	cmp	r3, r4
 8001cd4:	6862      	ldr	r2, [r4, #4]
 8001cd6:	d1dd      	bne.n	8001c94 <_malloc_r+0x8c>
 8001cd8:	f8c8 2000 	str.w	r2, [r8]
 8001cdc:	e7ec      	b.n	8001cb8 <_malloc_r+0xb0>
 8001cde:	4623      	mov	r3, r4
 8001ce0:	6864      	ldr	r4, [r4, #4]
 8001ce2:	e7ac      	b.n	8001c3e <_malloc_r+0x36>
 8001ce4:	4634      	mov	r4, r6
 8001ce6:	6876      	ldr	r6, [r6, #4]
 8001ce8:	e7b4      	b.n	8001c54 <_malloc_r+0x4c>
 8001cea:	4613      	mov	r3, r2
 8001cec:	e7cc      	b.n	8001c88 <_malloc_r+0x80>
 8001cee:	230c      	movs	r3, #12
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f000 f80e 	bl	8001d14 <__malloc_unlock>
 8001cf8:	e797      	b.n	8001c2a <_malloc_r+0x22>
 8001cfa:	6025      	str	r5, [r4, #0]
 8001cfc:	e7dc      	b.n	8001cb8 <_malloc_r+0xb0>
 8001cfe:	605b      	str	r3, [r3, #4]
 8001d00:	deff      	udf	#255	; 0xff
 8001d02:	bf00      	nop
 8001d04:	20000214 	.word	0x20000214

08001d08 <__malloc_lock>:
 8001d08:	4801      	ldr	r0, [pc, #4]	; (8001d10 <__malloc_lock+0x8>)
 8001d0a:	f7ff bf10 	b.w	8001b2e <__retarget_lock_acquire_recursive>
 8001d0e:	bf00      	nop
 8001d10:	20000210 	.word	0x20000210

08001d14 <__malloc_unlock>:
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <__malloc_unlock+0x8>)
 8001d16:	f7ff bf0b 	b.w	8001b30 <__retarget_lock_release_recursive>
 8001d1a:	bf00      	nop
 8001d1c:	20000210 	.word	0x20000210

08001d20 <__sflush_r>:
 8001d20:	898a      	ldrh	r2, [r1, #12]
 8001d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d24:	4605      	mov	r5, r0
 8001d26:	0710      	lsls	r0, r2, #28
 8001d28:	460c      	mov	r4, r1
 8001d2a:	d457      	bmi.n	8001ddc <__sflush_r+0xbc>
 8001d2c:	684b      	ldr	r3, [r1, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	dc04      	bgt.n	8001d3c <__sflush_r+0x1c>
 8001d32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dc01      	bgt.n	8001d3c <__sflush_r+0x1c>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	d0fa      	beq.n	8001d38 <__sflush_r+0x18>
 8001d42:	2300      	movs	r3, #0
 8001d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d48:	682f      	ldr	r7, [r5, #0]
 8001d4a:	6a21      	ldr	r1, [r4, #32]
 8001d4c:	602b      	str	r3, [r5, #0]
 8001d4e:	d032      	beq.n	8001db6 <__sflush_r+0x96>
 8001d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	075a      	lsls	r2, r3, #29
 8001d56:	d505      	bpl.n	8001d64 <__sflush_r+0x44>
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	1ac0      	subs	r0, r0, r3
 8001d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d5e:	b10b      	cbz	r3, 8001d64 <__sflush_r+0x44>
 8001d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d62:	1ac0      	subs	r0, r0, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	4602      	mov	r2, r0
 8001d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d6a:	6a21      	ldr	r1, [r4, #32]
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	47b0      	blx	r6
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	d106      	bne.n	8001d84 <__sflush_r+0x64>
 8001d76:	6829      	ldr	r1, [r5, #0]
 8001d78:	291d      	cmp	r1, #29
 8001d7a:	d82b      	bhi.n	8001dd4 <__sflush_r+0xb4>
 8001d7c:	4a28      	ldr	r2, [pc, #160]	; (8001e20 <__sflush_r+0x100>)
 8001d7e:	410a      	asrs	r2, r1
 8001d80:	07d6      	lsls	r6, r2, #31
 8001d82:	d427      	bmi.n	8001dd4 <__sflush_r+0xb4>
 8001d84:	2200      	movs	r2, #0
 8001d86:	6062      	str	r2, [r4, #4]
 8001d88:	04d9      	lsls	r1, r3, #19
 8001d8a:	6922      	ldr	r2, [r4, #16]
 8001d8c:	6022      	str	r2, [r4, #0]
 8001d8e:	d504      	bpl.n	8001d9a <__sflush_r+0x7a>
 8001d90:	1c42      	adds	r2, r0, #1
 8001d92:	d101      	bne.n	8001d98 <__sflush_r+0x78>
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	b903      	cbnz	r3, 8001d9a <__sflush_r+0x7a>
 8001d98:	6560      	str	r0, [r4, #84]	; 0x54
 8001d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d9c:	602f      	str	r7, [r5, #0]
 8001d9e:	2900      	cmp	r1, #0
 8001da0:	d0ca      	beq.n	8001d38 <__sflush_r+0x18>
 8001da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001da6:	4299      	cmp	r1, r3
 8001da8:	d002      	beq.n	8001db0 <__sflush_r+0x90>
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff fec2 	bl	8001b34 <_free_r>
 8001db0:	2000      	movs	r0, #0
 8001db2:	6360      	str	r0, [r4, #52]	; 0x34
 8001db4:	e7c1      	b.n	8001d3a <__sflush_r+0x1a>
 8001db6:	2301      	movs	r3, #1
 8001db8:	4628      	mov	r0, r5
 8001dba:	47b0      	blx	r6
 8001dbc:	1c41      	adds	r1, r0, #1
 8001dbe:	d1c8      	bne.n	8001d52 <__sflush_r+0x32>
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0c5      	beq.n	8001d52 <__sflush_r+0x32>
 8001dc6:	2b1d      	cmp	r3, #29
 8001dc8:	d001      	beq.n	8001dce <__sflush_r+0xae>
 8001dca:	2b16      	cmp	r3, #22
 8001dcc:	d101      	bne.n	8001dd2 <__sflush_r+0xb2>
 8001dce:	602f      	str	r7, [r5, #0]
 8001dd0:	e7b2      	b.n	8001d38 <__sflush_r+0x18>
 8001dd2:	89a3      	ldrh	r3, [r4, #12]
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd8:	81a3      	strh	r3, [r4, #12]
 8001dda:	e7ae      	b.n	8001d3a <__sflush_r+0x1a>
 8001ddc:	690f      	ldr	r7, [r1, #16]
 8001dde:	2f00      	cmp	r7, #0
 8001de0:	d0aa      	beq.n	8001d38 <__sflush_r+0x18>
 8001de2:	0793      	lsls	r3, r2, #30
 8001de4:	680e      	ldr	r6, [r1, #0]
 8001de6:	bf08      	it	eq
 8001de8:	694b      	ldreq	r3, [r1, #20]
 8001dea:	600f      	str	r7, [r1, #0]
 8001dec:	bf18      	it	ne
 8001dee:	2300      	movne	r3, #0
 8001df0:	1bf6      	subs	r6, r6, r7
 8001df2:	608b      	str	r3, [r1, #8]
 8001df4:	2e00      	cmp	r6, #0
 8001df6:	dd9f      	ble.n	8001d38 <__sflush_r+0x18>
 8001df8:	6a21      	ldr	r1, [r4, #32]
 8001dfa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001dfe:	4633      	mov	r3, r6
 8001e00:	463a      	mov	r2, r7
 8001e02:	4628      	mov	r0, r5
 8001e04:	47e0      	blx	ip
 8001e06:	2800      	cmp	r0, #0
 8001e08:	dc06      	bgt.n	8001e18 <__sflush_r+0xf8>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295
 8001e16:	e790      	b.n	8001d3a <__sflush_r+0x1a>
 8001e18:	4407      	add	r7, r0
 8001e1a:	1a36      	subs	r6, r6, r0
 8001e1c:	e7ea      	b.n	8001df4 <__sflush_r+0xd4>
 8001e1e:	bf00      	nop
 8001e20:	dfbffffe 	.word	0xdfbffffe

08001e24 <_fflush_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	690b      	ldr	r3, [r1, #16]
 8001e28:	4605      	mov	r5, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	b913      	cbnz	r3, 8001e34 <_fflush_r+0x10>
 8001e2e:	2500      	movs	r5, #0
 8001e30:	4628      	mov	r0, r5
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	b118      	cbz	r0, 8001e3e <_fflush_r+0x1a>
 8001e36:	6a03      	ldr	r3, [r0, #32]
 8001e38:	b90b      	cbnz	r3, 8001e3e <_fflush_r+0x1a>
 8001e3a:	f7ff fc95 	bl	8001768 <__sinit>
 8001e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f3      	beq.n	8001e2e <_fflush_r+0xa>
 8001e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e48:	07d0      	lsls	r0, r2, #31
 8001e4a:	d404      	bmi.n	8001e56 <_fflush_r+0x32>
 8001e4c:	0599      	lsls	r1, r3, #22
 8001e4e:	d402      	bmi.n	8001e56 <_fflush_r+0x32>
 8001e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e52:	f7ff fe6c 	bl	8001b2e <__retarget_lock_acquire_recursive>
 8001e56:	4628      	mov	r0, r5
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f7ff ff61 	bl	8001d20 <__sflush_r>
 8001e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e60:	07da      	lsls	r2, r3, #31
 8001e62:	4605      	mov	r5, r0
 8001e64:	d4e4      	bmi.n	8001e30 <_fflush_r+0xc>
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	059b      	lsls	r3, r3, #22
 8001e6a:	d4e1      	bmi.n	8001e30 <_fflush_r+0xc>
 8001e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e6e:	f7ff fe5f 	bl	8001b30 <__retarget_lock_release_recursive>
 8001e72:	e7dd      	b.n	8001e30 <_fflush_r+0xc>

08001e74 <__swhatbuf_r>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	460c      	mov	r4, r1
 8001e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	4615      	mov	r5, r2
 8001e82:	461e      	mov	r6, r3
 8001e84:	da0d      	bge.n	8001ea2 <__swhatbuf_r+0x2e>
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e96:	2340      	movne	r3, #64	; 0x40
 8001e98:	2000      	movs	r0, #0
 8001e9a:	6031      	str	r1, [r6, #0]
 8001e9c:	602b      	str	r3, [r5, #0]
 8001e9e:	b016      	add	sp, #88	; 0x58
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
 8001ea2:	466a      	mov	r2, sp
 8001ea4:	f000 f848 	bl	8001f38 <_fstat_r>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	dbec      	blt.n	8001e86 <__swhatbuf_r+0x12>
 8001eac:	9901      	ldr	r1, [sp, #4]
 8001eae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001eb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001eb6:	4259      	negs	r1, r3
 8001eb8:	4159      	adcs	r1, r3
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	e7eb      	b.n	8001e98 <__swhatbuf_r+0x24>

08001ec0 <__smakebuf_r>:
 8001ec0:	898b      	ldrh	r3, [r1, #12]
 8001ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ec4:	079d      	lsls	r5, r3, #30
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	d507      	bpl.n	8001edc <__smakebuf_r+0x1c>
 8001ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	6123      	str	r3, [r4, #16]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	6163      	str	r3, [r4, #20]
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	ab01      	add	r3, sp, #4
 8001ede:	466a      	mov	r2, sp
 8001ee0:	f7ff ffc8 	bl	8001e74 <__swhatbuf_r>
 8001ee4:	9900      	ldr	r1, [sp, #0]
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f7ff fe8d 	bl	8001c08 <_malloc_r>
 8001eee:	b948      	cbnz	r0, 8001f04 <__smakebuf_r+0x44>
 8001ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef4:	059a      	lsls	r2, r3, #22
 8001ef6:	d4ef      	bmi.n	8001ed8 <__smakebuf_r+0x18>
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	81a3      	strh	r3, [r4, #12]
 8001f02:	e7e3      	b.n	8001ecc <__smakebuf_r+0xc>
 8001f04:	89a3      	ldrh	r3, [r4, #12]
 8001f06:	6020      	str	r0, [r4, #0]
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	6163      	str	r3, [r4, #20]
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	6120      	str	r0, [r4, #16]
 8001f16:	b15b      	cbz	r3, 8001f30 <__smakebuf_r+0x70>
 8001f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f1c:	4630      	mov	r0, r6
 8001f1e:	f000 f81d 	bl	8001f5c <_isatty_r>
 8001f22:	b128      	cbz	r0, 8001f30 <__smakebuf_r+0x70>
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	81a3      	strh	r3, [r4, #12]
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	431d      	orrs	r5, r3
 8001f34:	81a5      	strh	r5, [r4, #12]
 8001f36:	e7cf      	b.n	8001ed8 <__smakebuf_r+0x18>

08001f38 <_fstat_r>:
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4d07      	ldr	r5, [pc, #28]	; (8001f58 <_fstat_r+0x20>)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	602b      	str	r3, [r5, #0]
 8001f46:	f7ff fafd 	bl	8001544 <_fstat>
 8001f4a:	1c43      	adds	r3, r0, #1
 8001f4c:	d102      	bne.n	8001f54 <_fstat_r+0x1c>
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	b103      	cbz	r3, 8001f54 <_fstat_r+0x1c>
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
 8001f56:	bf00      	nop
 8001f58:	2000020c 	.word	0x2000020c

08001f5c <_isatty_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4d06      	ldr	r5, [pc, #24]	; (8001f78 <_isatty_r+0x1c>)
 8001f60:	2300      	movs	r3, #0
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	602b      	str	r3, [r5, #0]
 8001f68:	f7ff fafb 	bl	8001562 <_isatty>
 8001f6c:	1c43      	adds	r3, r0, #1
 8001f6e:	d102      	bne.n	8001f76 <_isatty_r+0x1a>
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	b103      	cbz	r3, 8001f76 <_isatty_r+0x1a>
 8001f74:	6023      	str	r3, [r4, #0]
 8001f76:	bd38      	pop	{r3, r4, r5, pc}
 8001f78:	2000020c 	.word	0x2000020c

08001f7c <_sbrk_r>:
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4d06      	ldr	r5, [pc, #24]	; (8001f98 <_sbrk_r+0x1c>)
 8001f80:	2300      	movs	r3, #0
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	602b      	str	r3, [r5, #0]
 8001f88:	f7ff fb02 	bl	8001590 <_sbrk>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d102      	bne.n	8001f96 <_sbrk_r+0x1a>
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	b103      	cbz	r3, 8001f96 <_sbrk_r+0x1a>
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	2000020c 	.word	0x2000020c

08001f9c <_init>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	bf00      	nop
 8001fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa2:	bc08      	pop	{r3}
 8001fa4:	469e      	mov	lr, r3
 8001fa6:	4770      	bx	lr

08001fa8 <_fini>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr
