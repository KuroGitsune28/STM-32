
004_ADC_ContiConv_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cd8  08002cd8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007f8b  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000016c4  00000000  00000000  00028060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000758  00000000  00000000  00029728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000586  00000000  00000000  00029e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002daf  00000000  00000000  0002a406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a366  00000000  00000000  0002d1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1efd  00000000  00000000  0003751b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002494  00000000  00000000  00109418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0010b8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002c60 	.word	0x08002c60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002c60 	.word	0x08002c60

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811b 	bcs.w	800054e <__udivmoddi4+0x28e>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8118 	bls.w	800054e <__udivmoddi4+0x28e>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8106 	bcs.w	8000552 <__udivmoddi4+0x292>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8103 	bls.w	8000552 <__udivmoddi4+0x292>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ec 	beq.w	8000548 <__udivmoddi4+0x288>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f7 	bhi.w	800057c <__udivmoddi4+0x2bc>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 808f 	bne.w	80004ce <__udivmoddi4+0x20e>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80ba 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	4323      	orrs	r3, r4
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	fb00 5518 	mls	r5, r0, r8, r5
 8000448:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800044c:	fb08 f50e 	mul.w	r5, r8, lr
 8000450:	42a5      	cmp	r5, r4
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f0 	udiv	r3, r4, r0
 8000478:	fb00 4413 	mls	r4, r0, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800049e:	fba0 8302 	umull	r8, r3, r0, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	429c      	cmp	r4, r3
 80004a8:	46c6      	mov	lr, r8
 80004aa:	461d      	mov	r5, r3
 80004ac:	d355      	bcc.n	800055a <__udivmoddi4+0x29a>
 80004ae:	d052      	beq.n	8000556 <__udivmoddi4+0x296>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb9 030e 	subs.w	r3, r9, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	431f      	orrs	r7, r3
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c3 0120 	rsb	r1, r3, #32
 80004d2:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d6:	fa20 f201 	lsr.w	r2, r0, r1
 80004da:	fa25 f101 	lsr.w	r1, r5, r1
 80004de:	409d      	lsls	r5, r3
 80004e0:	432a      	orrs	r2, r5
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1510 	mls	r5, r7, r0, r1
 80004f2:	0c11      	lsrs	r1, r2, #16
 80004f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f8:	fb00 f50e 	mul.w	r5, r0, lr
 80004fc:	428d      	cmp	r5, r1
 80004fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x256>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428d      	cmp	r5, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	1b49      	subs	r1, r1, r5
 8000518:	b292      	uxth	r2, r2
 800051a:	fbb1 f5f7 	udiv	r5, r1, r7
 800051e:	fb07 1115 	mls	r1, r7, r5, r1
 8000522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000526:	fb05 f10e 	mul.w	r1, r5, lr
 800052a:	4291      	cmp	r1, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x280>
 800052e:	eb1c 0202 	adds.w	r2, ip, r2
 8000532:	f105 38ff 	add.w	r8, r5, #4294967295
 8000536:	d216      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000538:	4291      	cmp	r1, r2
 800053a:	d914      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053c:	3d02      	subs	r5, #2
 800053e:	4462      	add	r2, ip
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e739      	b.n	80003bc <__udivmoddi4+0xfc>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e709      	b.n	8000362 <__udivmoddi4+0xa2>
 800054e:	4639      	mov	r1, r7
 8000550:	e6e7      	b.n	8000322 <__udivmoddi4+0x62>
 8000552:	4610      	mov	r0, r2
 8000554:	e6fc      	b.n	8000350 <__udivmoddi4+0x90>
 8000556:	45c1      	cmp	r9, r8
 8000558:	d2aa      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055a:	ebb8 0e02 	subs.w	lr, r8, r2
 800055e:	eb63 050c 	sbc.w	r5, r3, ip
 8000562:	3801      	subs	r0, #1
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4645      	mov	r5, r8
 8000568:	e7ea      	b.n	8000540 <__udivmoddi4+0x280>
 800056a:	4603      	mov	r3, r0
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4640      	mov	r0, r8
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	46d0      	mov	r8, sl
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x124>
 800057c:	4608      	mov	r0, r1
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xd8>
 8000580:	4464      	add	r4, ip
 8000582:	3802      	subs	r0, #2
 8000584:	e743      	b.n	800040e <__udivmoddi4+0x14e>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <HAL_Init+0x40>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_Init+0x40>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x40>)
 80005ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 fc79 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f000 f80e 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f000 f806 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023c00 	.word	0x40023c00

080005d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fc7d 	bl	8000efa <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 fc53 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004
 8000638:	20000000 	.word	0x20000000

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000004 	.word	0x20000004
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000084 	.word	0x20000084

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_Delay+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e033      	b.n	800073a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d109      	bne.n	80006ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f831 	bl	8000742 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 0310 	and.w	r3, r3, #16
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d118      	bne.n	800072c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000702:	f023 0302 	bic.w	r3, r3, #2
 8000706:	f043 0202 	orr.w	r2, r3, #2
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 fa20 	bl	8000b54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f023 0303 	bic.w	r3, r3, #3
 8000722:	f043 0201 	orr.w	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
 800072a:	e001      	b.n	8000730 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800072c:	2301      	movs	r3, #1
 800072e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000766:	2b01      	cmp	r3, #1
 8000768:	d101      	bne.n	800076e <HAL_ADC_Start+0x1a>
 800076a:	2302      	movs	r3, #2
 800076c:	e0b2      	b.n	80008d4 <HAL_ADC_Start+0x180>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b01      	cmp	r3, #1
 8000782:	d018      	beq.n	80007b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f042 0201 	orr.w	r2, r2, #1
 8000792:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000794:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <HAL_ADC_Start+0x18c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a52      	ldr	r2, [pc, #328]	; (80008e4 <HAL_ADC_Start+0x190>)
 800079a:	fba2 2303 	umull	r2, r3, r2, r3
 800079e:	0c9a      	lsrs	r2, r3, #18
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007a8:	e002      	b.n	80007b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f9      	bne.n	80007aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d17a      	bne.n	80008ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000802:	d106      	bne.n	8000812 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000808:	f023 0206 	bic.w	r2, r3, #6
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	645a      	str	r2, [r3, #68]	; 0x44
 8000810:	e002      	b.n	8000818 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000820:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <HAL_ADC_Start+0x194>)
 8000822:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800082c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f003 031f 	and.w	r3, r3, #31
 8000836:	2b00      	cmp	r3, #0
 8000838:	d12a      	bne.n	8000890 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <HAL_ADC_Start+0x198>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d015      	beq.n	8000870 <HAL_ADC_Start+0x11c>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <HAL_ADC_Start+0x19c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d105      	bne.n	800085a <HAL_ADC_Start+0x106>
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <HAL_ADC_Start+0x194>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00a      	beq.n	8000870 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <HAL_ADC_Start+0x1a0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d136      	bne.n	80008d2 <HAL_ADC_Start+0x17e>
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <HAL_ADC_Start+0x194>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	2b00      	cmp	r3, #0
 800086e:	d130      	bne.n	80008d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d129      	bne.n	80008d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	e020      	b.n	80008d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <HAL_ADC_Start+0x198>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d11b      	bne.n	80008d2 <HAL_ADC_Start+0x17e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d114      	bne.n	80008d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	e00b      	b.n	80008d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f043 0210 	orr.w	r2, r3, #16
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f043 0201 	orr.w	r2, r3, #1
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	40012300 	.word	0x40012300
 80008ec:	40012000 	.word	0x40012000
 80008f0:	40012100 	.word	0x40012100
 80008f4:	40012200 	.word	0x40012200

080008f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000924:	2b01      	cmp	r3, #1
 8000926:	d101      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1c>
 8000928:	2302      	movs	r3, #2
 800092a:	e105      	b.n	8000b38 <HAL_ADC_ConfigChannel+0x228>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2201      	movs	r2, #1
 8000930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b09      	cmp	r3, #9
 800093a:	d925      	bls.n	8000988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68d9      	ldr	r1, [r3, #12]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	3b1e      	subs	r3, #30
 8000952:	2207      	movs	r2, #7
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43da      	mvns	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68d9      	ldr	r1, [r3, #12]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	4603      	mov	r3, r0
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4403      	add	r3, r0
 800097a:	3b1e      	subs	r3, #30
 800097c:	409a      	lsls	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	e022      	b.n	80009ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6919      	ldr	r1, [r3, #16]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b29b      	uxth	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	2207      	movs	r2, #7
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	400a      	ands	r2, r1
 80009aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6919      	ldr	r1, [r3, #16]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4403      	add	r3, r0
 80009c4:	409a      	lsls	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d824      	bhi.n	8000a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	4613      	mov	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	3b05      	subs	r3, #5
 80009e8:	221f      	movs	r2, #31
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	400a      	ands	r2, r1
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	3b05      	subs	r3, #5
 8000a12:	fa00 f203 	lsl.w	r2, r0, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a1e:	e04c      	b.n	8000aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b0c      	cmp	r3, #12
 8000a26:	d824      	bhi.n	8000a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	3b23      	subs	r3, #35	; 0x23
 8000a3a:	221f      	movs	r2, #31
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43da      	mvns	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	400a      	ands	r2, r1
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	3b23      	subs	r3, #35	; 0x23
 8000a64:	fa00 f203 	lsl.w	r2, r0, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a70:	e023      	b.n	8000aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	3b41      	subs	r3, #65	; 0x41
 8000a84:	221f      	movs	r2, #31
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	400a      	ands	r2, r1
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	3b41      	subs	r3, #65	; 0x41
 8000aae:	fa00 f203 	lsl.w	r2, r0, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_ADC_ConfigChannel+0x234>)
 8000abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <HAL_ADC_ConfigChannel+0x238>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d109      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x1cc>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b12      	cmp	r3, #18
 8000ace:	d105      	bne.n	8000adc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_ADC_ConfigChannel+0x238>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d123      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x21e>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b10      	cmp	r3, #16
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_ConfigChannel+0x1e6>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b11      	cmp	r3, #17
 8000af4:	d11b      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b10      	cmp	r3, #16
 8000b08:	d111      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_ADC_ConfigChannel+0x23c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_ADC_ConfigChannel+0x240>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	0c9a      	lsrs	r2, r3, #18
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b20:	e002      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f9      	bne.n	8000b22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40012300 	.word	0x40012300
 8000b48:	40012000 	.word	0x40012000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	431bde83 	.word	0x431bde83

08000b54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b5c:	4b79      	ldr	r3, [pc, #484]	; (8000d44 <ADC_Init+0x1f0>)
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	431a      	orrs	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6859      	ldr	r1, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	021a      	lsls	r2, r3, #8
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6859      	ldr	r1, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6899      	ldr	r1, [r3, #8]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <ADC_Init+0x1f4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d022      	beq.n	8000c32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6899      	ldr	r1, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6899      	ldr	r1, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	e00f      	b.n	8000c52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0202 	bic.w	r2, r2, #2
 8000c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6899      	ldr	r1, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7e1b      	ldrb	r3, [r3, #24]
 8000c6c:	005a      	lsls	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d01b      	beq.n	8000cb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6859      	ldr	r1, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	3b01      	subs	r3, #1
 8000cac:	035a      	lsls	r2, r3, #13
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	e007      	b.n	8000cc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	051a      	lsls	r2, r3, #20
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6899      	ldr	r1, [r3, #8]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d0a:	025a      	lsls	r2, r3, #9
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6899      	ldr	r1, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	029a      	lsls	r2, r3, #10
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	609a      	str	r2, [r3, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40012300 	.word	0x40012300
 8000d48:	0f000001 	.word	0x0f000001

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff49 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb0 	bl	8000e68 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e16b      	b.n	8001208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 815a 	bne.w	8001202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80b4 	beq.w	8001202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <HAL_GPIO_Init+0x308>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a5e      	ldr	r2, [pc, #376]	; (800121c <HAL_GPIO_Init+0x308>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <HAL_GPIO_Init+0x308>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a5a      	ldr	r2, [pc, #360]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x310>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x216>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x20a>
 800111a:	2307      	movs	r3, #7
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x228>
 800111e:	2308      	movs	r3, #8
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x228>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4934      	ldr	r1, [pc, #208]	; (8001220 <HAL_GPIO_Init+0x30c>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_GPIO_Init+0x330>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae90 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_RCC_GetHCLKFreq+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001260:	f7ff fff2 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0a9b      	lsrs	r3, r3, #10
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4903      	ldr	r1, [pc, #12]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	08002c94 	.word	0x08002c94

08001284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001288:	f7ff ffde 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 800128c:	4602      	mov	r2, r0
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	0b5b      	lsrs	r3, r3, #13
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	4903      	ldr	r1, [pc, #12]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08002c94 	.word	0x08002c94

080012ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e03f      	b.n	800133e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f837 	bl	8001346 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f931 	bl	8001558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af02      	add	r7, sp, #8
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b20      	cmp	r3, #32
 8001376:	d17c      	bne.n	8001472 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_UART_Transmit+0x2c>
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e075      	b.n	8001474 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_UART_Transmit+0x3e>
 8001392:	2302      	movs	r3, #2
 8001394:	e06e      	b.n	8001474 <HAL_UART_Transmit+0x11c>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2221      	movs	r2, #33	; 0x21
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013ac:	f7ff f958 	bl	8000660 <HAL_GetTick>
 80013b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	88fa      	ldrh	r2, [r7, #6]
 80013b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c6:	d108      	bne.n	80013da <HAL_UART_Transmit+0x82>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d104      	bne.n	80013da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	e003      	b.n	80013e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80013ea:	e02a      	b.n	8001442 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2200      	movs	r2, #0
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f840 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e036      	b.n	8001474 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800141a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	3302      	adds	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	e007      	b.n	8001434 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001438:	b29b      	uxth	r3, r3
 800143a:	3b01      	subs	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001446:	b29b      	uxth	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1cf      	bne.n	80013ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f810 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e006      	b.n	8001474 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001472:	2302      	movs	r3, #2
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	; 0x40
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800148c:	e050      	b.n	8001530 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800148e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d04c      	beq.n	8001530 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <UART_WaitOnFlagUntilTimeout+0x30>
 800149c:	f7ff f8e0 	bl	8000660 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d241      	bcs.n	8001530 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	330c      	adds	r3, #12
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	e853 3f00 	ldrex	r3, [r3]
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	330c      	adds	r3, #12
 80014ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014cc:	637a      	str	r2, [r7, #52]	; 0x34
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d4:	e841 2300 	strex	r3, r2, [r1]
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e5      	bne.n	80014ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3314      	adds	r3, #20
 80014e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	e853 3f00 	ldrex	r3, [r3]
 80014ee:	613b      	str	r3, [r7, #16]
   return(result);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3314      	adds	r3, #20
 80014fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001500:	623a      	str	r2, [r7, #32]
 8001502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001504:	69f9      	ldr	r1, [r7, #28]
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	e841 2300 	strex	r3, r2, [r1]
 800150c:	61bb      	str	r3, [r7, #24]
   return(result);
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e5      	bne.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2220      	movs	r2, #32
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2220      	movs	r2, #32
 8001520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e00f      	b.n	8001550 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	4013      	ands	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	429a      	cmp	r2, r3
 800154c:	d09f      	beq.n	800148e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3740      	adds	r7, #64	; 0x40
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b0c0      	sub	sp, #256	; 0x100
 800155e:	af00      	add	r7, sp, #0
 8001560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001574:	68d9      	ldr	r1, [r3, #12]
 8001576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	ea40 0301 	orr.w	r3, r0, r1
 8001580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	431a      	orrs	r2, r3
 8001590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	431a      	orrs	r2, r3
 8001598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80015a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80015b0:	f021 010c 	bic.w	r1, r1, #12
 80015b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80015be:	430b      	orrs	r3, r1
 80015c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80015ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015d2:	6999      	ldr	r1, [r3, #24]
 80015d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	ea40 0301 	orr.w	r3, r0, r1
 80015de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <UART_SetConfig+0x2d4>)
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d005      	beq.n	80015f8 <UART_SetConfig+0xa0>
 80015ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <UART_SetConfig+0x2d8>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d104      	bne.n	8001602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80015f8:	f7ff fe44 	bl	8001284 <HAL_RCC_GetPCLK2Freq>
 80015fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001600:	e003      	b.n	800160a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001602:	f7ff fe2b 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800160a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001614:	f040 8110 	bne.w	8001838 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800161c:	2200      	movs	r2, #0
 800161e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800162a:	4622      	mov	r2, r4
 800162c:	462b      	mov	r3, r5
 800162e:	1891      	adds	r1, r2, r2
 8001630:	65b9      	str	r1, [r7, #88]	; 0x58
 8001632:	415b      	adcs	r3, r3
 8001634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	4604      	mov	r4, r0
 8001640:	eb12 0804 	adds.w	r8, r2, r4
 8001644:	460c      	mov	r4, r1
 8001646:	eb43 0904 	adc.w	r9, r3, r4
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800165a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800165e:	4690      	mov	r8, r2
 8001660:	4699      	mov	r9, r3
 8001662:	4603      	mov	r3, r0
 8001664:	eb18 0303 	adds.w	r3, r8, r3
 8001668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800166c:	460b      	mov	r3, r1
 800166e:	eb49 0303 	adc.w	r3, r9, r3
 8001672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800168a:	460b      	mov	r3, r1
 800168c:	18db      	adds	r3, r3, r3
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
 8001690:	4613      	mov	r3, r2
 8001692:	eb42 0303 	adc.w	r3, r2, r3
 8001696:	657b      	str	r3, [r7, #84]	; 0x54
 8001698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800169c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80016a0:	f7fe fdf6 	bl	8000290 <__aeabi_uldivmod>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <UART_SetConfig+0x2dc>)
 80016aa:	fba3 2302 	umull	r2, r3, r3, r2
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	011c      	lsls	r4, r3, #4
 80016b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80016bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80016c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80016c4:	4642      	mov	r2, r8
 80016c6:	464b      	mov	r3, r9
 80016c8:	1891      	adds	r1, r2, r2
 80016ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80016cc:	415b      	adcs	r3, r3
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016d4:	4645      	mov	r5, r8
 80016d6:	eb12 0a05 	adds.w	sl, r2, r5
 80016da:	4640      	mov	r0, r8
 80016dc:	4649      	mov	r1, r9
 80016de:	460d      	mov	r5, r1
 80016e0:	eb43 0b05 	adc.w	fp, r3, r5
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f8:	4692      	mov	sl, r2
 80016fa:	469b      	mov	fp, r3
 80016fc:	4603      	mov	r3, r0
 80016fe:	eb1a 0303 	adds.w	r3, sl, r3
 8001702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001706:	460b      	mov	r3, r1
 8001708:	eb4b 0303 	adc.w	r3, fp, r3
 800170c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800171c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001724:	460b      	mov	r3, r1
 8001726:	18db      	adds	r3, r3, r3
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
 800172a:	4613      	mov	r3, r2
 800172c:	eb42 0303 	adc.w	r3, r2, r3
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
 8001732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800173a:	f7fe fda9 	bl	8000290 <__aeabi_uldivmod>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4611      	mov	r1, r2
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <UART_SetConfig+0x2dc>)
 8001746:	fba3 2301 	umull	r2, r3, r3, r1
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2264      	movs	r2, #100	; 0x64
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <UART_SetConfig+0x2dc>)
 800175c:	fba3 2302 	umull	r2, r3, r3, r2
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001768:	441c      	add	r4, r3
 800176a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800176e:	2200      	movs	r2, #0
 8001770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800177c:	4642      	mov	r2, r8
 800177e:	464b      	mov	r3, r9
 8001780:	1891      	adds	r1, r2, r2
 8001782:	63b9      	str	r1, [r7, #56]	; 0x38
 8001784:	415b      	adcs	r3, r3
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800178c:	4641      	mov	r1, r8
 800178e:	1851      	adds	r1, r2, r1
 8001790:	6339      	str	r1, [r7, #48]	; 0x30
 8001792:	4649      	mov	r1, r9
 8001794:	414b      	adcs	r3, r1
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80017a4:	4659      	mov	r1, fp
 80017a6:	00cb      	lsls	r3, r1, #3
 80017a8:	4655      	mov	r5, sl
 80017aa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80017ae:	4651      	mov	r1, sl
 80017b0:	00ca      	lsls	r2, r1, #3
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	4642      	mov	r2, r8
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80017c0:	464b      	mov	r3, r9
 80017c2:	460a      	mov	r2, r1
 80017c4:	eb42 0303 	adc.w	r3, r2, r3
 80017c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80017d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80017e0:	460b      	mov	r3, r1
 80017e2:	18db      	adds	r3, r3, r3
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e6:	4613      	mov	r3, r2
 80017e8:	eb42 0303 	adc.w	r3, r2, r3
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80017f6:	f7fe fd4b 	bl	8000290 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <UART_SetConfig+0x2dc>)
 8001800:	fba3 1302 	umull	r1, r3, r3, r2
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	2164      	movs	r1, #100	; 0x64
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	3332      	adds	r3, #50	; 0x32
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <UART_SetConfig+0x2dc>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	f003 0207 	and.w	r2, r3, #7
 800181e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4422      	add	r2, r4
 8001826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001828:	e10a      	b.n	8001a40 <UART_SetConfig+0x4e8>
 800182a:	bf00      	nop
 800182c:	40011000 	.word	0x40011000
 8001830:	40011400 	.word	0x40011400
 8001834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800183c:	2200      	movs	r2, #0
 800183e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800184a:	4642      	mov	r2, r8
 800184c:	464b      	mov	r3, r9
 800184e:	1891      	adds	r1, r2, r2
 8001850:	6239      	str	r1, [r7, #32]
 8001852:	415b      	adcs	r3, r3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800185a:	4641      	mov	r1, r8
 800185c:	1854      	adds	r4, r2, r1
 800185e:	46cc      	mov	ip, r9
 8001860:	eb43 050c 	adc.w	r5, r3, ip
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4640      	mov	r0, r8
 800187a:	4649      	mov	r1, r9
 800187c:	4603      	mov	r3, r0
 800187e:	18e3      	adds	r3, r4, r3
 8001880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001884:	460b      	mov	r3, r1
 8001886:	eb45 0303 	adc.w	r3, r5, r3
 800188a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800188e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800189a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80018aa:	4629      	mov	r1, r5
 80018ac:	008b      	lsls	r3, r1, #2
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	4604      	mov	r4, r0
 80018b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80018b8:	4601      	mov	r1, r0
 80018ba:	008a      	lsls	r2, r1, #2
 80018bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80018c0:	f7fe fce6 	bl	8000290 <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <UART_SetConfig+0x4f4>)
 80018ca:	fba3 2302 	umull	r2, r3, r3, r2
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	011c      	lsls	r4, r3, #4
 80018d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80018e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80018e4:	4642      	mov	r2, r8
 80018e6:	464b      	mov	r3, r9
 80018e8:	1891      	adds	r1, r2, r2
 80018ea:	61b9      	str	r1, [r7, #24]
 80018ec:	415b      	adcs	r3, r3
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f4:	4641      	mov	r1, r8
 80018f6:	1851      	adds	r1, r2, r1
 80018f8:	6139      	str	r1, [r7, #16]
 80018fa:	4649      	mov	r1, r9
 80018fc:	414b      	adcs	r3, r1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800190c:	4659      	mov	r1, fp
 800190e:	00cb      	lsls	r3, r1, #3
 8001910:	4655      	mov	r5, sl
 8001912:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001916:	4651      	mov	r1, sl
 8001918:	00ca      	lsls	r2, r1, #3
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	4603      	mov	r3, r0
 8001920:	4642      	mov	r2, r8
 8001922:	189b      	adds	r3, r3, r2
 8001924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001928:	464b      	mov	r3, r9
 800192a:	460a      	mov	r2, r1
 800192c:	eb42 0303 	adc.w	r3, r2, r3
 8001930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	67bb      	str	r3, [r7, #120]	; 0x78
 800193e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800194c:	4649      	mov	r1, r9
 800194e:	008b      	lsls	r3, r1, #2
 8001950:	4645      	mov	r5, r8
 8001952:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001956:	4641      	mov	r1, r8
 8001958:	008a      	lsls	r2, r1, #2
 800195a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800195e:	f7fe fc97 	bl	8000290 <__aeabi_uldivmod>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4611      	mov	r1, r2
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <UART_SetConfig+0x4f4>)
 800196a:	fba3 2301 	umull	r2, r3, r3, r1
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2264      	movs	r2, #100	; 0x64
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	1acb      	subs	r3, r1, r3
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	3332      	adds	r3, #50	; 0x32
 800197c:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <UART_SetConfig+0x4f4>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	441c      	add	r4, r3
 800198a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800198e:	2200      	movs	r2, #0
 8001990:	673b      	str	r3, [r7, #112]	; 0x70
 8001992:	677a      	str	r2, [r7, #116]	; 0x74
 8001994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001998:	4642      	mov	r2, r8
 800199a:	464b      	mov	r3, r9
 800199c:	1891      	adds	r1, r2, r2
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	415b      	adcs	r3, r3
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a8:	4641      	mov	r1, r8
 80019aa:	1851      	adds	r1, r2, r1
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	4649      	mov	r1, r9
 80019b0:	414b      	adcs	r3, r1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80019c0:	4659      	mov	r1, fp
 80019c2:	00cb      	lsls	r3, r1, #3
 80019c4:	4655      	mov	r5, sl
 80019c6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80019ca:	4651      	mov	r1, sl
 80019cc:	00ca      	lsls	r2, r1, #3
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	4642      	mov	r2, r8
 80019d6:	189b      	adds	r3, r3, r2
 80019d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80019da:	464b      	mov	r3, r9
 80019dc:	460a      	mov	r2, r1
 80019de:	eb42 0303 	adc.w	r3, r2, r3
 80019e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
 80019ee:	667a      	str	r2, [r7, #100]	; 0x64
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80019fc:	4649      	mov	r1, r9
 80019fe:	008b      	lsls	r3, r1, #2
 8001a00:	4645      	mov	r5, r8
 8001a02:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001a06:	4641      	mov	r1, r8
 8001a08:	008a      	lsls	r2, r1, #2
 8001a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a0e:	f7fe fc3f 	bl	8000290 <__aeabi_uldivmod>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <UART_SetConfig+0x4f4>)
 8001a18:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	2164      	movs	r1, #100	; 0x64
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	3332      	adds	r3, #50	; 0x32
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <UART_SetConfig+0x4f4>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	f003 020f 	and.w	r2, r3, #15
 8001a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4422      	add	r2, r4
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001a46:	46bd      	mov	sp, r7
 8001a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4c:	51eb851f 	.word	0x51eb851f

08001a50 <ADC_PA0_Read>:
ADC_HandleTypeDef hadc1;

static void ADC_PA0_ContinuousConv_Init(void);

uint32_t ADC_PA0_Read(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <ADC_PA0_Read+0x10>)
 8001a56:	f7fe ff4f 	bl	80008f8 <HAL_ADC_GetValue>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000088 	.word	0x20000088

08001a64 <ADC_Init_Start>:

void ADC_Init_Start(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	ADC_PA0_ContinuousConv_Init();
 8001a68:	f000 f808 	bl	8001a7c <ADC_PA0_ContinuousConv_Init>
	HAL_ADC_Start(&hadc1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <ADC_Init_Start+0x14>)
 8001a6e:	f7fe fe71 	bl	8000754 <HAL_ADC_Start>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000088 	.word	0x20000088

08001a7c <ADC_PA0_ContinuousConv_Init>:


void ADC_PA0_ContinuousConv_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
	// Configure GPIO PA0 as analog mode
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef Gpiostruct;

	Gpiostruct.Pin 		= GPIO_PIN_0;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
	Gpiostruct.Mode 	= GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
	Gpiostruct.Pull		= GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA,&Gpiostruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4824      	ldr	r0, [pc, #144]	; (8001b44 <ADC_PA0_ContinuousConv_Init+0xc8>)
 8001ab2:	f7ff fa2f 	bl	8000f14 <HAL_GPIO_Init>

	// Configure ADC for continuous conversion mode

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <ADC_PA0_ContinuousConv_Init+0xc4>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance 						= ADC1;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <ADC_PA0_ContinuousConv_Init+0xd0>)
 8001ad6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler 			= ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution				= ADC_RESOLUTION_12B;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode		= ENABLE;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode	= DISABLE;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge		= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv			= ADC_SOFTWARE_START;
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <ADC_PA0_ContinuousConv_Init+0xd4>)
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign				= ADC_DATAALIGN_RIGHT;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion			= 1;
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests	= DISABLE;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection				= ADC_EOC_SINGLE_CONV;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b1a:	f7fe fdcf 	bl	80006bc <HAL_ADC_Init>

	// Configure Channel for ADC and link PA0  and ADC1

	ADC_ChannelConfTypeDef	sconfig;

	sconfig.Channel			=	ADC_CHANNEL_0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
	sconfig.Rank			= 	1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
	sconfig.SamplingTime	=	ADC_SAMPLETIME_480CYCLES;
 8001b26:	2307      	movs	r3, #7
 8001b28:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sconfig);
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <ADC_PA0_ContinuousConv_Init+0xcc>)
 8001b32:	f7fe feed 	bl	8000910 <HAL_ADC_ConfigChannel>
}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	20000088 	.word	0x20000088
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	0f000001 	.word	0x0f000001

08001b54 <main>:
#endif
/* GLOBAL VARIABLES */
uint32_t Sensor_Value;

int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	HAL_Init();
 8001b58:	f7fe fd18 	bl	800058c <HAL_Init>
	UART1_Init();
 8001b5c:	f000 f8ce 	bl	8001cfc <UART1_Init>
	ADC_Init_Start();
 8001b60:	f7ff ff80 	bl	8001a64 <ADC_Init_Start>
	while(1)
	{
		Sensor_Value = ADC_PA0_Read();
 8001b64:	f7ff ff74 	bl	8001a50 <ADC_PA0_Read>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <main+0x30>)
 8001b6c:	6013      	str	r3, [r2, #0]
		printf("Sensor Value is :- %ld \n\r",Sensor_Value);
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <main+0x30>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <main+0x34>)
 8001b76:	f000 fa05 	bl	8001f84 <iprintf>
		HAL_Delay(200);
 8001b7a:	20c8      	movs	r0, #200	; 0xc8
 8001b7c:	f7fe fd7a 	bl	8000674 <HAL_Delay>
		Sensor_Value = ADC_PA0_Read();
 8001b80:	e7f0      	b.n	8001b64 <main+0x10>
 8001b82:	bf00      	nop
 8001b84:	200000d0 	.word	0x200000d0
 8001b88:	08002c78 	.word	0x08002c78

08001b8c <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001b90:	f7fe fd54 	bl	800063c <HAL_IncTick>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f873 	bl	8001cd8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
  }
  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c30:	605a      	str	r2, [r3, #4]
  return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:

int _isatty(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
	...

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f000 fa16 	bl	80020cc <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20020000 	.word	0x20020000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	200000d4 	.word	0x200000d4
 8001cd4:	20000268 	.word	0x20000268

08001cd8 <__io_putchar>:

UART_HandleTypeDef		Uart1;


int __io_putchar(int ch)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart1,(uint8_t*)&ch,1,100);
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	2364      	movs	r3, #100	; 0x64
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <__io_putchar+0x20>)
 8001ce8:	f7ff fb36 	bl	8001358 <HAL_UART_Transmit>
	return ch;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200000d8 	.word	0x200000d8

08001cfc <UART1_Init>:


void UART1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <UART1_Init+0xa0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <UART1_Init+0xa0>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <UART1_Init+0xa0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

	// Configure Clock for UART
	__HAL_RCC_USART1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <UART1_Init+0xa0>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <UART1_Init+0xa0>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <UART1_Init+0xa0>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
 8001d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d3e:	60fb      	str	r3, [r7, #12]
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
 8001d44:	2307      	movs	r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
	GpioStruct.Pull			= 	GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GpioStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4812      	ldr	r0, [pc, #72]	; (8001da0 <UART1_Init+0xa4>)
 8001d58:	f7ff f8dc 	bl	8000f14 <HAL_GPIO_Init>

	// USART2 Configuration


	Uart1.Instance				=	USART1; // USART2 Base Address is given
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <UART1_Init+0xa8>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <UART1_Init+0xac>)
 8001d60:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART

	Uart1.Init.BaudRate			=	115200;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <UART1_Init+0xa8>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <UART1_Init+0xa8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <UART1_Init+0xa8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <UART1_Init+0xa8>)
 8001d78:	2208      	movs	r2, #8
 8001d7a:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <UART1_Init+0xa8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <UART1_Init+0xa8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <UART1_Init+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <UART1_Init+0xa8>)
 8001d90:	f7ff fa8c 	bl	80012ac <HAL_UART_Init>

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	200000d8 	.word	0x200000d8
 8001da8:	40011000 	.word	0x40011000

08001dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <LoopForever+0xe>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <LoopForever+0x16>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dda:	f000 f97d 	bl	80020d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dde:	f7ff feb9 	bl	8001b54 <main>

08001de2 <LoopForever>:

LoopForever:
  b LoopForever
 8001de2:	e7fe      	b.n	8001de2 <LoopForever>
  ldr   r0, =_estack
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001df0:	08002ce0 	.word	0x08002ce0
  ldr r2, =_sbss
 8001df4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001df8:	20000268 	.word	0x20000268

08001dfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <std>:
 8001e00:	2300      	movs	r3, #0
 8001e02:	b510      	push	{r4, lr}
 8001e04:	4604      	mov	r4, r0
 8001e06:	e9c0 3300 	strd	r3, r3, [r0]
 8001e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e0e:	6083      	str	r3, [r0, #8]
 8001e10:	8181      	strh	r1, [r0, #12]
 8001e12:	6643      	str	r3, [r0, #100]	; 0x64
 8001e14:	81c2      	strh	r2, [r0, #14]
 8001e16:	6183      	str	r3, [r0, #24]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	305c      	adds	r0, #92	; 0x5c
 8001e1e:	f000 f906 	bl	800202e <memset>
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <std+0x58>)
 8001e24:	6263      	str	r3, [r4, #36]	; 0x24
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <std+0x5c>)
 8001e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <std+0x60>)
 8001e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <std+0x64>)
 8001e30:	6323      	str	r3, [r4, #48]	; 0x30
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <std+0x68>)
 8001e34:	6224      	str	r4, [r4, #32]
 8001e36:	429c      	cmp	r4, r3
 8001e38:	d006      	beq.n	8001e48 <std+0x48>
 8001e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	d002      	beq.n	8001e48 <std+0x48>
 8001e42:	33d0      	adds	r3, #208	; 0xd0
 8001e44:	429c      	cmp	r4, r3
 8001e46:	d105      	bne.n	8001e54 <std+0x54>
 8001e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e50:	f000 b966 	b.w	8002120 <__retarget_lock_init_recursive>
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	bf00      	nop
 8001e58:	08001fa9 	.word	0x08001fa9
 8001e5c:	08001fcb 	.word	0x08001fcb
 8001e60:	08002003 	.word	0x08002003
 8001e64:	08002027 	.word	0x08002027
 8001e68:	2000011c 	.word	0x2000011c

08001e6c <stdio_exit_handler>:
 8001e6c:	4a02      	ldr	r2, [pc, #8]	; (8001e78 <stdio_exit_handler+0xc>)
 8001e6e:	4903      	ldr	r1, [pc, #12]	; (8001e7c <stdio_exit_handler+0x10>)
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <stdio_exit_handler+0x14>)
 8001e72:	f000 b869 	b.w	8001f48 <_fwalk_sglue>
 8001e76:	bf00      	nop
 8001e78:	2000000c 	.word	0x2000000c
 8001e7c:	080029bd 	.word	0x080029bd
 8001e80:	20000018 	.word	0x20000018

08001e84 <cleanup_stdio>:
 8001e84:	6841      	ldr	r1, [r0, #4]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <cleanup_stdio+0x34>)
 8001e88:	4299      	cmp	r1, r3
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	d001      	beq.n	8001e94 <cleanup_stdio+0x10>
 8001e90:	f000 fd94 	bl	80029bc <_fflush_r>
 8001e94:	68a1      	ldr	r1, [r4, #8]
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <cleanup_stdio+0x38>)
 8001e98:	4299      	cmp	r1, r3
 8001e9a:	d002      	beq.n	8001ea2 <cleanup_stdio+0x1e>
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f000 fd8d 	bl	80029bc <_fflush_r>
 8001ea2:	68e1      	ldr	r1, [r4, #12]
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <cleanup_stdio+0x3c>)
 8001ea6:	4299      	cmp	r1, r3
 8001ea8:	d004      	beq.n	8001eb4 <cleanup_stdio+0x30>
 8001eaa:	4620      	mov	r0, r4
 8001eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb0:	f000 bd84 	b.w	80029bc <_fflush_r>
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000011c 	.word	0x2000011c
 8001ebc:	20000184 	.word	0x20000184
 8001ec0:	200001ec 	.word	0x200001ec

08001ec4 <global_stdio_init.part.0>:
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <global_stdio_init.part.0+0x30>)
 8001ec8:	4c0b      	ldr	r4, [pc, #44]	; (8001ef8 <global_stdio_init.part.0+0x34>)
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <global_stdio_init.part.0+0x38>)
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	4620      	mov	r0, r4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	f7ff ff94 	bl	8001e00 <std>
 8001ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001edc:	2201      	movs	r2, #1
 8001ede:	2109      	movs	r1, #9
 8001ee0:	f7ff ff8e 	bl	8001e00 <std>
 8001ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001ee8:	2202      	movs	r2, #2
 8001eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eee:	2112      	movs	r1, #18
 8001ef0:	f7ff bf86 	b.w	8001e00 <std>
 8001ef4:	20000254 	.word	0x20000254
 8001ef8:	2000011c 	.word	0x2000011c
 8001efc:	08001e6d 	.word	0x08001e6d

08001f00 <__sfp_lock_acquire>:
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <__sfp_lock_acquire+0x8>)
 8001f02:	f000 b90e 	b.w	8002122 <__retarget_lock_acquire_recursive>
 8001f06:	bf00      	nop
 8001f08:	2000025d 	.word	0x2000025d

08001f0c <__sfp_lock_release>:
 8001f0c:	4801      	ldr	r0, [pc, #4]	; (8001f14 <__sfp_lock_release+0x8>)
 8001f0e:	f000 b909 	b.w	8002124 <__retarget_lock_release_recursive>
 8001f12:	bf00      	nop
 8001f14:	2000025d 	.word	0x2000025d

08001f18 <__sinit>:
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	f7ff fff0 	bl	8001f00 <__sfp_lock_acquire>
 8001f20:	6a23      	ldr	r3, [r4, #32]
 8001f22:	b11b      	cbz	r3, 8001f2c <__sinit+0x14>
 8001f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f28:	f7ff bff0 	b.w	8001f0c <__sfp_lock_release>
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__sinit+0x28>)
 8001f2e:	6223      	str	r3, [r4, #32]
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__sinit+0x2c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f5      	bne.n	8001f24 <__sinit+0xc>
 8001f38:	f7ff ffc4 	bl	8001ec4 <global_stdio_init.part.0>
 8001f3c:	e7f2      	b.n	8001f24 <__sinit+0xc>
 8001f3e:	bf00      	nop
 8001f40:	08001e85 	.word	0x08001e85
 8001f44:	20000254 	.word	0x20000254

08001f48 <_fwalk_sglue>:
 8001f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	4607      	mov	r7, r0
 8001f4e:	4688      	mov	r8, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	2600      	movs	r6, #0
 8001f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f58:	f1b9 0901 	subs.w	r9, r9, #1
 8001f5c:	d505      	bpl.n	8001f6a <_fwalk_sglue+0x22>
 8001f5e:	6824      	ldr	r4, [r4, #0]
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d1f7      	bne.n	8001f54 <_fwalk_sglue+0xc>
 8001f64:	4630      	mov	r0, r6
 8001f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f6a:	89ab      	ldrh	r3, [r5, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d907      	bls.n	8001f80 <_fwalk_sglue+0x38>
 8001f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f74:	3301      	adds	r3, #1
 8001f76:	d003      	beq.n	8001f80 <_fwalk_sglue+0x38>
 8001f78:	4629      	mov	r1, r5
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	47c0      	blx	r8
 8001f7e:	4306      	orrs	r6, r0
 8001f80:	3568      	adds	r5, #104	; 0x68
 8001f82:	e7e9      	b.n	8001f58 <_fwalk_sglue+0x10>

08001f84 <iprintf>:
 8001f84:	b40f      	push	{r0, r1, r2, r3}
 8001f86:	b507      	push	{r0, r1, r2, lr}
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <iprintf+0x20>)
 8001f8a:	ab04      	add	r3, sp, #16
 8001f8c:	6808      	ldr	r0, [r1, #0]
 8001f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f92:	6881      	ldr	r1, [r0, #8]
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	f000 f9e5 	bl	8002364 <_vfiprintf_r>
 8001f9a:	b003      	add	sp, #12
 8001f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fa0:	b004      	add	sp, #16
 8001fa2:	4770      	bx	lr
 8001fa4:	20000064 	.word	0x20000064

08001fa8 <__sread>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	460c      	mov	r4, r1
 8001fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb0:	f000 f868 	bl	8002084 <_read_r>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	bfab      	itete	ge
 8001fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fba:	89a3      	ldrhlt	r3, [r4, #12]
 8001fbc:	181b      	addge	r3, r3, r0
 8001fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fc2:	bfac      	ite	ge
 8001fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fc6:	81a3      	strhlt	r3, [r4, #12]
 8001fc8:	bd10      	pop	{r4, pc}

08001fca <__swrite>:
 8001fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fce:	461f      	mov	r7, r3
 8001fd0:	898b      	ldrh	r3, [r1, #12]
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4616      	mov	r6, r2
 8001fda:	d505      	bpl.n	8001fe8 <__swrite+0x1e>
 8001fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f000 f83c 	bl	8002060 <_lseek_r>
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	4632      	mov	r2, r6
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffe:	f000 b853 	b.w	80020a8 <_write_r>

08002002 <__sseek>:
 8002002:	b510      	push	{r4, lr}
 8002004:	460c      	mov	r4, r1
 8002006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200a:	f000 f829 	bl	8002060 <_lseek_r>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	bf15      	itete	ne
 8002014:	6560      	strne	r0, [r4, #84]	; 0x54
 8002016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800201a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800201e:	81a3      	strheq	r3, [r4, #12]
 8002020:	bf18      	it	ne
 8002022:	81a3      	strhne	r3, [r4, #12]
 8002024:	bd10      	pop	{r4, pc}

08002026 <__sclose>:
 8002026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202a:	f000 b809 	b.w	8002040 <_close_r>

0800202e <memset>:
 800202e:	4402      	add	r2, r0
 8002030:	4603      	mov	r3, r0
 8002032:	4293      	cmp	r3, r2
 8002034:	d100      	bne.n	8002038 <memset+0xa>
 8002036:	4770      	bx	lr
 8002038:	f803 1b01 	strb.w	r1, [r3], #1
 800203c:	e7f9      	b.n	8002032 <memset+0x4>
	...

08002040 <_close_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4d06      	ldr	r5, [pc, #24]	; (800205c <_close_r+0x1c>)
 8002044:	2300      	movs	r3, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	602b      	str	r3, [r5, #0]
 800204c:	f7ff fddd 	bl	8001c0a <_close>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_close_r+0x1a>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_close_r+0x1a>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	20000258 	.word	0x20000258

08002060 <_lseek_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4d07      	ldr	r5, [pc, #28]	; (8002080 <_lseek_r+0x20>)
 8002064:	4604      	mov	r4, r0
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	2200      	movs	r2, #0
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f7ff fdef 	bl	8001c52 <_lseek>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_lseek_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_lseek_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	20000258 	.word	0x20000258

08002084 <_read_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4d07      	ldr	r5, [pc, #28]	; (80020a4 <_read_r+0x20>)
 8002088:	4604      	mov	r4, r0
 800208a:	4608      	mov	r0, r1
 800208c:	4611      	mov	r1, r2
 800208e:	2200      	movs	r2, #0
 8002090:	602a      	str	r2, [r5, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff fd80 	bl	8001b98 <_read>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_read_r+0x1e>
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_read_r+0x1e>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	20000258 	.word	0x20000258

080020a8 <_write_r>:
 80020a8:	b538      	push	{r3, r4, r5, lr}
 80020aa:	4d07      	ldr	r5, [pc, #28]	; (80020c8 <_write_r+0x20>)
 80020ac:	4604      	mov	r4, r0
 80020ae:	4608      	mov	r0, r1
 80020b0:	4611      	mov	r1, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	602a      	str	r2, [r5, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7ff fd8b 	bl	8001bd2 <_write>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_write_r+0x1e>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_write_r+0x1e>
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	20000258 	.word	0x20000258

080020cc <__errno>:
 80020cc:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <__errno+0x8>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000064 	.word	0x20000064

080020d8 <__libc_init_array>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	4d0d      	ldr	r5, [pc, #52]	; (8002110 <__libc_init_array+0x38>)
 80020dc:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <__libc_init_array+0x3c>)
 80020de:	1b64      	subs	r4, r4, r5
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	2600      	movs	r6, #0
 80020e4:	42a6      	cmp	r6, r4
 80020e6:	d109      	bne.n	80020fc <__libc_init_array+0x24>
 80020e8:	4d0b      	ldr	r5, [pc, #44]	; (8002118 <__libc_init_array+0x40>)
 80020ea:	4c0c      	ldr	r4, [pc, #48]	; (800211c <__libc_init_array+0x44>)
 80020ec:	f000 fdb8 	bl	8002c60 <_init>
 80020f0:	1b64      	subs	r4, r4, r5
 80020f2:	10a4      	asrs	r4, r4, #2
 80020f4:	2600      	movs	r6, #0
 80020f6:	42a6      	cmp	r6, r4
 80020f8:	d105      	bne.n	8002106 <__libc_init_array+0x2e>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002100:	4798      	blx	r3
 8002102:	3601      	adds	r6, #1
 8002104:	e7ee      	b.n	80020e4 <__libc_init_array+0xc>
 8002106:	f855 3b04 	ldr.w	r3, [r5], #4
 800210a:	4798      	blx	r3
 800210c:	3601      	adds	r6, #1
 800210e:	e7f2      	b.n	80020f6 <__libc_init_array+0x1e>
 8002110:	08002cd8 	.word	0x08002cd8
 8002114:	08002cd8 	.word	0x08002cd8
 8002118:	08002cd8 	.word	0x08002cd8
 800211c:	08002cdc 	.word	0x08002cdc

08002120 <__retarget_lock_init_recursive>:
 8002120:	4770      	bx	lr

08002122 <__retarget_lock_acquire_recursive>:
 8002122:	4770      	bx	lr

08002124 <__retarget_lock_release_recursive>:
 8002124:	4770      	bx	lr
	...

08002128 <_free_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4605      	mov	r5, r0
 800212c:	2900      	cmp	r1, #0
 800212e:	d041      	beq.n	80021b4 <_free_r+0x8c>
 8002130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002134:	1f0c      	subs	r4, r1, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	bfb8      	it	lt
 800213a:	18e4      	addlt	r4, r4, r3
 800213c:	f000 f8de 	bl	80022fc <__malloc_lock>
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <_free_r+0x90>)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	b933      	cbnz	r3, 8002154 <_free_r+0x2c>
 8002146:	6063      	str	r3, [r4, #4]
 8002148:	6014      	str	r4, [r2, #0]
 800214a:	4628      	mov	r0, r5
 800214c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002150:	f000 b8da 	b.w	8002308 <__malloc_unlock>
 8002154:	42a3      	cmp	r3, r4
 8002156:	d908      	bls.n	800216a <_free_r+0x42>
 8002158:	6820      	ldr	r0, [r4, #0]
 800215a:	1821      	adds	r1, r4, r0
 800215c:	428b      	cmp	r3, r1
 800215e:	bf01      	itttt	eq
 8002160:	6819      	ldreq	r1, [r3, #0]
 8002162:	685b      	ldreq	r3, [r3, #4]
 8002164:	1809      	addeq	r1, r1, r0
 8002166:	6021      	streq	r1, [r4, #0]
 8002168:	e7ed      	b.n	8002146 <_free_r+0x1e>
 800216a:	461a      	mov	r2, r3
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	b10b      	cbz	r3, 8002174 <_free_r+0x4c>
 8002170:	42a3      	cmp	r3, r4
 8002172:	d9fa      	bls.n	800216a <_free_r+0x42>
 8002174:	6811      	ldr	r1, [r2, #0]
 8002176:	1850      	adds	r0, r2, r1
 8002178:	42a0      	cmp	r0, r4
 800217a:	d10b      	bne.n	8002194 <_free_r+0x6c>
 800217c:	6820      	ldr	r0, [r4, #0]
 800217e:	4401      	add	r1, r0
 8002180:	1850      	adds	r0, r2, r1
 8002182:	4283      	cmp	r3, r0
 8002184:	6011      	str	r1, [r2, #0]
 8002186:	d1e0      	bne.n	800214a <_free_r+0x22>
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	6053      	str	r3, [r2, #4]
 800218e:	4408      	add	r0, r1
 8002190:	6010      	str	r0, [r2, #0]
 8002192:	e7da      	b.n	800214a <_free_r+0x22>
 8002194:	d902      	bls.n	800219c <_free_r+0x74>
 8002196:	230c      	movs	r3, #12
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	e7d6      	b.n	800214a <_free_r+0x22>
 800219c:	6820      	ldr	r0, [r4, #0]
 800219e:	1821      	adds	r1, r4, r0
 80021a0:	428b      	cmp	r3, r1
 80021a2:	bf04      	itt	eq
 80021a4:	6819      	ldreq	r1, [r3, #0]
 80021a6:	685b      	ldreq	r3, [r3, #4]
 80021a8:	6063      	str	r3, [r4, #4]
 80021aa:	bf04      	itt	eq
 80021ac:	1809      	addeq	r1, r1, r0
 80021ae:	6021      	streq	r1, [r4, #0]
 80021b0:	6054      	str	r4, [r2, #4]
 80021b2:	e7ca      	b.n	800214a <_free_r+0x22>
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	bf00      	nop
 80021b8:	20000260 	.word	0x20000260

080021bc <sbrk_aligned>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	4e0e      	ldr	r6, [pc, #56]	; (80021f8 <sbrk_aligned+0x3c>)
 80021c0:	460c      	mov	r4, r1
 80021c2:	6831      	ldr	r1, [r6, #0]
 80021c4:	4605      	mov	r5, r0
 80021c6:	b911      	cbnz	r1, 80021ce <sbrk_aligned+0x12>
 80021c8:	f000 fcb6 	bl	8002b38 <_sbrk_r>
 80021cc:	6030      	str	r0, [r6, #0]
 80021ce:	4621      	mov	r1, r4
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 fcb1 	bl	8002b38 <_sbrk_r>
 80021d6:	1c43      	adds	r3, r0, #1
 80021d8:	d00a      	beq.n	80021f0 <sbrk_aligned+0x34>
 80021da:	1cc4      	adds	r4, r0, #3
 80021dc:	f024 0403 	bic.w	r4, r4, #3
 80021e0:	42a0      	cmp	r0, r4
 80021e2:	d007      	beq.n	80021f4 <sbrk_aligned+0x38>
 80021e4:	1a21      	subs	r1, r4, r0
 80021e6:	4628      	mov	r0, r5
 80021e8:	f000 fca6 	bl	8002b38 <_sbrk_r>
 80021ec:	3001      	adds	r0, #1
 80021ee:	d101      	bne.n	80021f4 <sbrk_aligned+0x38>
 80021f0:	f04f 34ff 	mov.w	r4, #4294967295
 80021f4:	4620      	mov	r0, r4
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	20000264 	.word	0x20000264

080021fc <_malloc_r>:
 80021fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002200:	1ccd      	adds	r5, r1, #3
 8002202:	f025 0503 	bic.w	r5, r5, #3
 8002206:	3508      	adds	r5, #8
 8002208:	2d0c      	cmp	r5, #12
 800220a:	bf38      	it	cc
 800220c:	250c      	movcc	r5, #12
 800220e:	2d00      	cmp	r5, #0
 8002210:	4607      	mov	r7, r0
 8002212:	db01      	blt.n	8002218 <_malloc_r+0x1c>
 8002214:	42a9      	cmp	r1, r5
 8002216:	d905      	bls.n	8002224 <_malloc_r+0x28>
 8002218:	230c      	movs	r3, #12
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	2600      	movs	r6, #0
 800221e:	4630      	mov	r0, r6
 8002220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022f8 <_malloc_r+0xfc>
 8002228:	f000 f868 	bl	80022fc <__malloc_lock>
 800222c:	f8d8 3000 	ldr.w	r3, [r8]
 8002230:	461c      	mov	r4, r3
 8002232:	bb5c      	cbnz	r4, 800228c <_malloc_r+0x90>
 8002234:	4629      	mov	r1, r5
 8002236:	4638      	mov	r0, r7
 8002238:	f7ff ffc0 	bl	80021bc <sbrk_aligned>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	4604      	mov	r4, r0
 8002240:	d155      	bne.n	80022ee <_malloc_r+0xf2>
 8002242:	f8d8 4000 	ldr.w	r4, [r8]
 8002246:	4626      	mov	r6, r4
 8002248:	2e00      	cmp	r6, #0
 800224a:	d145      	bne.n	80022d8 <_malloc_r+0xdc>
 800224c:	2c00      	cmp	r4, #0
 800224e:	d048      	beq.n	80022e2 <_malloc_r+0xe6>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	4631      	mov	r1, r6
 8002254:	4638      	mov	r0, r7
 8002256:	eb04 0903 	add.w	r9, r4, r3
 800225a:	f000 fc6d 	bl	8002b38 <_sbrk_r>
 800225e:	4581      	cmp	r9, r0
 8002260:	d13f      	bne.n	80022e2 <_malloc_r+0xe6>
 8002262:	6821      	ldr	r1, [r4, #0]
 8002264:	1a6d      	subs	r5, r5, r1
 8002266:	4629      	mov	r1, r5
 8002268:	4638      	mov	r0, r7
 800226a:	f7ff ffa7 	bl	80021bc <sbrk_aligned>
 800226e:	3001      	adds	r0, #1
 8002270:	d037      	beq.n	80022e2 <_malloc_r+0xe6>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	442b      	add	r3, r5
 8002276:	6023      	str	r3, [r4, #0]
 8002278:	f8d8 3000 	ldr.w	r3, [r8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d038      	beq.n	80022f2 <_malloc_r+0xf6>
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	42a2      	cmp	r2, r4
 8002284:	d12b      	bne.n	80022de <_malloc_r+0xe2>
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	e00f      	b.n	80022ac <_malloc_r+0xb0>
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	1b52      	subs	r2, r2, r5
 8002290:	d41f      	bmi.n	80022d2 <_malloc_r+0xd6>
 8002292:	2a0b      	cmp	r2, #11
 8002294:	d917      	bls.n	80022c6 <_malloc_r+0xca>
 8002296:	1961      	adds	r1, r4, r5
 8002298:	42a3      	cmp	r3, r4
 800229a:	6025      	str	r5, [r4, #0]
 800229c:	bf18      	it	ne
 800229e:	6059      	strne	r1, [r3, #4]
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	bf08      	it	eq
 80022a4:	f8c8 1000 	streq.w	r1, [r8]
 80022a8:	5162      	str	r2, [r4, r5]
 80022aa:	604b      	str	r3, [r1, #4]
 80022ac:	4638      	mov	r0, r7
 80022ae:	f104 060b 	add.w	r6, r4, #11
 80022b2:	f000 f829 	bl	8002308 <__malloc_unlock>
 80022b6:	f026 0607 	bic.w	r6, r6, #7
 80022ba:	1d23      	adds	r3, r4, #4
 80022bc:	1af2      	subs	r2, r6, r3
 80022be:	d0ae      	beq.n	800221e <_malloc_r+0x22>
 80022c0:	1b9b      	subs	r3, r3, r6
 80022c2:	50a3      	str	r3, [r4, r2]
 80022c4:	e7ab      	b.n	800221e <_malloc_r+0x22>
 80022c6:	42a3      	cmp	r3, r4
 80022c8:	6862      	ldr	r2, [r4, #4]
 80022ca:	d1dd      	bne.n	8002288 <_malloc_r+0x8c>
 80022cc:	f8c8 2000 	str.w	r2, [r8]
 80022d0:	e7ec      	b.n	80022ac <_malloc_r+0xb0>
 80022d2:	4623      	mov	r3, r4
 80022d4:	6864      	ldr	r4, [r4, #4]
 80022d6:	e7ac      	b.n	8002232 <_malloc_r+0x36>
 80022d8:	4634      	mov	r4, r6
 80022da:	6876      	ldr	r6, [r6, #4]
 80022dc:	e7b4      	b.n	8002248 <_malloc_r+0x4c>
 80022de:	4613      	mov	r3, r2
 80022e0:	e7cc      	b.n	800227c <_malloc_r+0x80>
 80022e2:	230c      	movs	r3, #12
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4638      	mov	r0, r7
 80022e8:	f000 f80e 	bl	8002308 <__malloc_unlock>
 80022ec:	e797      	b.n	800221e <_malloc_r+0x22>
 80022ee:	6025      	str	r5, [r4, #0]
 80022f0:	e7dc      	b.n	80022ac <_malloc_r+0xb0>
 80022f2:	605b      	str	r3, [r3, #4]
 80022f4:	deff      	udf	#255	; 0xff
 80022f6:	bf00      	nop
 80022f8:	20000260 	.word	0x20000260

080022fc <__malloc_lock>:
 80022fc:	4801      	ldr	r0, [pc, #4]	; (8002304 <__malloc_lock+0x8>)
 80022fe:	f7ff bf10 	b.w	8002122 <__retarget_lock_acquire_recursive>
 8002302:	bf00      	nop
 8002304:	2000025c 	.word	0x2000025c

08002308 <__malloc_unlock>:
 8002308:	4801      	ldr	r0, [pc, #4]	; (8002310 <__malloc_unlock+0x8>)
 800230a:	f7ff bf0b 	b.w	8002124 <__retarget_lock_release_recursive>
 800230e:	bf00      	nop
 8002310:	2000025c 	.word	0x2000025c

08002314 <__sfputc_r>:
 8002314:	6893      	ldr	r3, [r2, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	b410      	push	{r4}
 800231c:	6093      	str	r3, [r2, #8]
 800231e:	da07      	bge.n	8002330 <__sfputc_r+0x1c>
 8002320:	6994      	ldr	r4, [r2, #24]
 8002322:	42a3      	cmp	r3, r4
 8002324:	db01      	blt.n	800232a <__sfputc_r+0x16>
 8002326:	290a      	cmp	r1, #10
 8002328:	d102      	bne.n	8002330 <__sfputc_r+0x1c>
 800232a:	bc10      	pop	{r4}
 800232c:	f000 bb6e 	b.w	8002a0c <__swbuf_r>
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	1c58      	adds	r0, r3, #1
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	7019      	strb	r1, [r3, #0]
 8002338:	4608      	mov	r0, r1
 800233a:	bc10      	pop	{r4}
 800233c:	4770      	bx	lr

0800233e <__sfputs_r>:
 800233e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002340:	4606      	mov	r6, r0
 8002342:	460f      	mov	r7, r1
 8002344:	4614      	mov	r4, r2
 8002346:	18d5      	adds	r5, r2, r3
 8002348:	42ac      	cmp	r4, r5
 800234a:	d101      	bne.n	8002350 <__sfputs_r+0x12>
 800234c:	2000      	movs	r0, #0
 800234e:	e007      	b.n	8002360 <__sfputs_r+0x22>
 8002350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002354:	463a      	mov	r2, r7
 8002356:	4630      	mov	r0, r6
 8002358:	f7ff ffdc 	bl	8002314 <__sfputc_r>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d1f3      	bne.n	8002348 <__sfputs_r+0xa>
 8002360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002364 <_vfiprintf_r>:
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002368:	460d      	mov	r5, r1
 800236a:	b09d      	sub	sp, #116	; 0x74
 800236c:	4614      	mov	r4, r2
 800236e:	4698      	mov	r8, r3
 8002370:	4606      	mov	r6, r0
 8002372:	b118      	cbz	r0, 800237c <_vfiprintf_r+0x18>
 8002374:	6a03      	ldr	r3, [r0, #32]
 8002376:	b90b      	cbnz	r3, 800237c <_vfiprintf_r+0x18>
 8002378:	f7ff fdce 	bl	8001f18 <__sinit>
 800237c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800237e:	07d9      	lsls	r1, r3, #31
 8002380:	d405      	bmi.n	800238e <_vfiprintf_r+0x2a>
 8002382:	89ab      	ldrh	r3, [r5, #12]
 8002384:	059a      	lsls	r2, r3, #22
 8002386:	d402      	bmi.n	800238e <_vfiprintf_r+0x2a>
 8002388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800238a:	f7ff feca 	bl	8002122 <__retarget_lock_acquire_recursive>
 800238e:	89ab      	ldrh	r3, [r5, #12]
 8002390:	071b      	lsls	r3, r3, #28
 8002392:	d501      	bpl.n	8002398 <_vfiprintf_r+0x34>
 8002394:	692b      	ldr	r3, [r5, #16]
 8002396:	b99b      	cbnz	r3, 80023c0 <_vfiprintf_r+0x5c>
 8002398:	4629      	mov	r1, r5
 800239a:	4630      	mov	r0, r6
 800239c:	f000 fb74 	bl	8002a88 <__swsetup_r>
 80023a0:	b170      	cbz	r0, 80023c0 <_vfiprintf_r+0x5c>
 80023a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023a4:	07dc      	lsls	r4, r3, #31
 80023a6:	d504      	bpl.n	80023b2 <_vfiprintf_r+0x4e>
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	b01d      	add	sp, #116	; 0x74
 80023ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b2:	89ab      	ldrh	r3, [r5, #12]
 80023b4:	0598      	lsls	r0, r3, #22
 80023b6:	d4f7      	bmi.n	80023a8 <_vfiprintf_r+0x44>
 80023b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023ba:	f7ff feb3 	bl	8002124 <__retarget_lock_release_recursive>
 80023be:	e7f3      	b.n	80023a8 <_vfiprintf_r+0x44>
 80023c0:	2300      	movs	r3, #0
 80023c2:	9309      	str	r3, [sp, #36]	; 0x24
 80023c4:	2320      	movs	r3, #32
 80023c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80023ce:	2330      	movs	r3, #48	; 0x30
 80023d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002584 <_vfiprintf_r+0x220>
 80023d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023d8:	f04f 0901 	mov.w	r9, #1
 80023dc:	4623      	mov	r3, r4
 80023de:	469a      	mov	sl, r3
 80023e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023e4:	b10a      	cbz	r2, 80023ea <_vfiprintf_r+0x86>
 80023e6:	2a25      	cmp	r2, #37	; 0x25
 80023e8:	d1f9      	bne.n	80023de <_vfiprintf_r+0x7a>
 80023ea:	ebba 0b04 	subs.w	fp, sl, r4
 80023ee:	d00b      	beq.n	8002408 <_vfiprintf_r+0xa4>
 80023f0:	465b      	mov	r3, fp
 80023f2:	4622      	mov	r2, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	4630      	mov	r0, r6
 80023f8:	f7ff ffa1 	bl	800233e <__sfputs_r>
 80023fc:	3001      	adds	r0, #1
 80023fe:	f000 80a9 	beq.w	8002554 <_vfiprintf_r+0x1f0>
 8002402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002404:	445a      	add	r2, fp
 8002406:	9209      	str	r2, [sp, #36]	; 0x24
 8002408:	f89a 3000 	ldrb.w	r3, [sl]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a1 	beq.w	8002554 <_vfiprintf_r+0x1f0>
 8002412:	2300      	movs	r3, #0
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800241c:	f10a 0a01 	add.w	sl, sl, #1
 8002420:	9304      	str	r3, [sp, #16]
 8002422:	9307      	str	r3, [sp, #28]
 8002424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002428:	931a      	str	r3, [sp, #104]	; 0x68
 800242a:	4654      	mov	r4, sl
 800242c:	2205      	movs	r2, #5
 800242e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002432:	4854      	ldr	r0, [pc, #336]	; (8002584 <_vfiprintf_r+0x220>)
 8002434:	f7fd fedc 	bl	80001f0 <memchr>
 8002438:	9a04      	ldr	r2, [sp, #16]
 800243a:	b9d8      	cbnz	r0, 8002474 <_vfiprintf_r+0x110>
 800243c:	06d1      	lsls	r1, r2, #27
 800243e:	bf44      	itt	mi
 8002440:	2320      	movmi	r3, #32
 8002442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002446:	0713      	lsls	r3, r2, #28
 8002448:	bf44      	itt	mi
 800244a:	232b      	movmi	r3, #43	; 0x2b
 800244c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002450:	f89a 3000 	ldrb.w	r3, [sl]
 8002454:	2b2a      	cmp	r3, #42	; 0x2a
 8002456:	d015      	beq.n	8002484 <_vfiprintf_r+0x120>
 8002458:	9a07      	ldr	r2, [sp, #28]
 800245a:	4654      	mov	r4, sl
 800245c:	2000      	movs	r0, #0
 800245e:	f04f 0c0a 	mov.w	ip, #10
 8002462:	4621      	mov	r1, r4
 8002464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002468:	3b30      	subs	r3, #48	; 0x30
 800246a:	2b09      	cmp	r3, #9
 800246c:	d94d      	bls.n	800250a <_vfiprintf_r+0x1a6>
 800246e:	b1b0      	cbz	r0, 800249e <_vfiprintf_r+0x13a>
 8002470:	9207      	str	r2, [sp, #28]
 8002472:	e014      	b.n	800249e <_vfiprintf_r+0x13a>
 8002474:	eba0 0308 	sub.w	r3, r0, r8
 8002478:	fa09 f303 	lsl.w	r3, r9, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	46a2      	mov	sl, r4
 8002482:	e7d2      	b.n	800242a <_vfiprintf_r+0xc6>
 8002484:	9b03      	ldr	r3, [sp, #12]
 8002486:	1d19      	adds	r1, r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	9103      	str	r1, [sp, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	bfbb      	ittet	lt
 8002490:	425b      	neglt	r3, r3
 8002492:	f042 0202 	orrlt.w	r2, r2, #2
 8002496:	9307      	strge	r3, [sp, #28]
 8002498:	9307      	strlt	r3, [sp, #28]
 800249a:	bfb8      	it	lt
 800249c:	9204      	strlt	r2, [sp, #16]
 800249e:	7823      	ldrb	r3, [r4, #0]
 80024a0:	2b2e      	cmp	r3, #46	; 0x2e
 80024a2:	d10c      	bne.n	80024be <_vfiprintf_r+0x15a>
 80024a4:	7863      	ldrb	r3, [r4, #1]
 80024a6:	2b2a      	cmp	r3, #42	; 0x2a
 80024a8:	d134      	bne.n	8002514 <_vfiprintf_r+0x1b0>
 80024aa:	9b03      	ldr	r3, [sp, #12]
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ba:	3402      	adds	r4, #2
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002588 <_vfiprintf_r+0x224>
 80024c2:	7821      	ldrb	r1, [r4, #0]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4650      	mov	r0, sl
 80024c8:	f7fd fe92 	bl	80001f0 <memchr>
 80024cc:	b138      	cbz	r0, 80024de <_vfiprintf_r+0x17a>
 80024ce:	9b04      	ldr	r3, [sp, #16]
 80024d0:	eba0 000a 	sub.w	r0, r0, sl
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	4082      	lsls	r2, r0
 80024d8:	4313      	orrs	r3, r2
 80024da:	3401      	adds	r4, #1
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e2:	482a      	ldr	r0, [pc, #168]	; (800258c <_vfiprintf_r+0x228>)
 80024e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024e8:	2206      	movs	r2, #6
 80024ea:	f7fd fe81 	bl	80001f0 <memchr>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d03f      	beq.n	8002572 <_vfiprintf_r+0x20e>
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <_vfiprintf_r+0x22c>)
 80024f4:	bb1b      	cbnz	r3, 800253e <_vfiprintf_r+0x1da>
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	3307      	adds	r3, #7
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	3308      	adds	r3, #8
 8002500:	9303      	str	r3, [sp, #12]
 8002502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002504:	443b      	add	r3, r7
 8002506:	9309      	str	r3, [sp, #36]	; 0x24
 8002508:	e768      	b.n	80023dc <_vfiprintf_r+0x78>
 800250a:	fb0c 3202 	mla	r2, ip, r2, r3
 800250e:	460c      	mov	r4, r1
 8002510:	2001      	movs	r0, #1
 8002512:	e7a6      	b.n	8002462 <_vfiprintf_r+0xfe>
 8002514:	2300      	movs	r3, #0
 8002516:	3401      	adds	r4, #1
 8002518:	9305      	str	r3, [sp, #20]
 800251a:	4619      	mov	r1, r3
 800251c:	f04f 0c0a 	mov.w	ip, #10
 8002520:	4620      	mov	r0, r4
 8002522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002526:	3a30      	subs	r2, #48	; 0x30
 8002528:	2a09      	cmp	r2, #9
 800252a:	d903      	bls.n	8002534 <_vfiprintf_r+0x1d0>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0c6      	beq.n	80024be <_vfiprintf_r+0x15a>
 8002530:	9105      	str	r1, [sp, #20]
 8002532:	e7c4      	b.n	80024be <_vfiprintf_r+0x15a>
 8002534:	fb0c 2101 	mla	r1, ip, r1, r2
 8002538:	4604      	mov	r4, r0
 800253a:	2301      	movs	r3, #1
 800253c:	e7f0      	b.n	8002520 <_vfiprintf_r+0x1bc>
 800253e:	ab03      	add	r3, sp, #12
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	462a      	mov	r2, r5
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <_vfiprintf_r+0x230>)
 8002546:	a904      	add	r1, sp, #16
 8002548:	4630      	mov	r0, r6
 800254a:	f3af 8000 	nop.w
 800254e:	4607      	mov	r7, r0
 8002550:	1c78      	adds	r0, r7, #1
 8002552:	d1d6      	bne.n	8002502 <_vfiprintf_r+0x19e>
 8002554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002556:	07d9      	lsls	r1, r3, #31
 8002558:	d405      	bmi.n	8002566 <_vfiprintf_r+0x202>
 800255a:	89ab      	ldrh	r3, [r5, #12]
 800255c:	059a      	lsls	r2, r3, #22
 800255e:	d402      	bmi.n	8002566 <_vfiprintf_r+0x202>
 8002560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002562:	f7ff fddf 	bl	8002124 <__retarget_lock_release_recursive>
 8002566:	89ab      	ldrh	r3, [r5, #12]
 8002568:	065b      	lsls	r3, r3, #25
 800256a:	f53f af1d 	bmi.w	80023a8 <_vfiprintf_r+0x44>
 800256e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002570:	e71c      	b.n	80023ac <_vfiprintf_r+0x48>
 8002572:	ab03      	add	r3, sp, #12
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	462a      	mov	r2, r5
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <_vfiprintf_r+0x230>)
 800257a:	a904      	add	r1, sp, #16
 800257c:	4630      	mov	r0, r6
 800257e:	f000 f879 	bl	8002674 <_printf_i>
 8002582:	e7e4      	b.n	800254e <_vfiprintf_r+0x1ea>
 8002584:	08002c9c 	.word	0x08002c9c
 8002588:	08002ca2 	.word	0x08002ca2
 800258c:	08002ca6 	.word	0x08002ca6
 8002590:	00000000 	.word	0x00000000
 8002594:	0800233f 	.word	0x0800233f

08002598 <_printf_common>:
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	4616      	mov	r6, r2
 800259e:	4699      	mov	r9, r3
 80025a0:	688a      	ldr	r2, [r1, #8]
 80025a2:	690b      	ldr	r3, [r1, #16]
 80025a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bfb8      	it	lt
 80025ac:	4613      	movlt	r3, r2
 80025ae:	6033      	str	r3, [r6, #0]
 80025b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025b4:	4607      	mov	r7, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	b10a      	cbz	r2, 80025be <_printf_common+0x26>
 80025ba:	3301      	adds	r3, #1
 80025bc:	6033      	str	r3, [r6, #0]
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	0699      	lsls	r1, r3, #26
 80025c2:	bf42      	ittt	mi
 80025c4:	6833      	ldrmi	r3, [r6, #0]
 80025c6:	3302      	addmi	r3, #2
 80025c8:	6033      	strmi	r3, [r6, #0]
 80025ca:	6825      	ldr	r5, [r4, #0]
 80025cc:	f015 0506 	ands.w	r5, r5, #6
 80025d0:	d106      	bne.n	80025e0 <_printf_common+0x48>
 80025d2:	f104 0a19 	add.w	sl, r4, #25
 80025d6:	68e3      	ldr	r3, [r4, #12]
 80025d8:	6832      	ldr	r2, [r6, #0]
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	42ab      	cmp	r3, r5
 80025de:	dc26      	bgt.n	800262e <_printf_common+0x96>
 80025e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025e4:	1e13      	subs	r3, r2, #0
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	bf18      	it	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	0692      	lsls	r2, r2, #26
 80025ee:	d42b      	bmi.n	8002648 <_printf_common+0xb0>
 80025f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025f4:	4649      	mov	r1, r9
 80025f6:	4638      	mov	r0, r7
 80025f8:	47c0      	blx	r8
 80025fa:	3001      	adds	r0, #1
 80025fc:	d01e      	beq.n	800263c <_printf_common+0xa4>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	f003 0306 	and.w	r3, r3, #6
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf02      	ittt	eq
 800260a:	68e5      	ldreq	r5, [r4, #12]
 800260c:	6833      	ldreq	r3, [r6, #0]
 800260e:	1aed      	subeq	r5, r5, r3
 8002610:	68a3      	ldr	r3, [r4, #8]
 8002612:	bf0c      	ite	eq
 8002614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002618:	2500      	movne	r5, #0
 800261a:	4293      	cmp	r3, r2
 800261c:	bfc4      	itt	gt
 800261e:	1a9b      	subgt	r3, r3, r2
 8002620:	18ed      	addgt	r5, r5, r3
 8002622:	2600      	movs	r6, #0
 8002624:	341a      	adds	r4, #26
 8002626:	42b5      	cmp	r5, r6
 8002628:	d11a      	bne.n	8002660 <_printf_common+0xc8>
 800262a:	2000      	movs	r0, #0
 800262c:	e008      	b.n	8002640 <_printf_common+0xa8>
 800262e:	2301      	movs	r3, #1
 8002630:	4652      	mov	r2, sl
 8002632:	4649      	mov	r1, r9
 8002634:	4638      	mov	r0, r7
 8002636:	47c0      	blx	r8
 8002638:	3001      	adds	r0, #1
 800263a:	d103      	bne.n	8002644 <_printf_common+0xac>
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002644:	3501      	adds	r5, #1
 8002646:	e7c6      	b.n	80025d6 <_printf_common+0x3e>
 8002648:	18e1      	adds	r1, r4, r3
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	2030      	movs	r0, #48	; 0x30
 800264e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002652:	4422      	add	r2, r4
 8002654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800265c:	3302      	adds	r3, #2
 800265e:	e7c7      	b.n	80025f0 <_printf_common+0x58>
 8002660:	2301      	movs	r3, #1
 8002662:	4622      	mov	r2, r4
 8002664:	4649      	mov	r1, r9
 8002666:	4638      	mov	r0, r7
 8002668:	47c0      	blx	r8
 800266a:	3001      	adds	r0, #1
 800266c:	d0e6      	beq.n	800263c <_printf_common+0xa4>
 800266e:	3601      	adds	r6, #1
 8002670:	e7d9      	b.n	8002626 <_printf_common+0x8e>
	...

08002674 <_printf_i>:
 8002674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002678:	7e0f      	ldrb	r7, [r1, #24]
 800267a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800267c:	2f78      	cmp	r7, #120	; 0x78
 800267e:	4691      	mov	r9, r2
 8002680:	4680      	mov	r8, r0
 8002682:	460c      	mov	r4, r1
 8002684:	469a      	mov	sl, r3
 8002686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800268a:	d807      	bhi.n	800269c <_printf_i+0x28>
 800268c:	2f62      	cmp	r7, #98	; 0x62
 800268e:	d80a      	bhi.n	80026a6 <_printf_i+0x32>
 8002690:	2f00      	cmp	r7, #0
 8002692:	f000 80d4 	beq.w	800283e <_printf_i+0x1ca>
 8002696:	2f58      	cmp	r7, #88	; 0x58
 8002698:	f000 80c0 	beq.w	800281c <_printf_i+0x1a8>
 800269c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026a4:	e03a      	b.n	800271c <_printf_i+0xa8>
 80026a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026aa:	2b15      	cmp	r3, #21
 80026ac:	d8f6      	bhi.n	800269c <_printf_i+0x28>
 80026ae:	a101      	add	r1, pc, #4	; (adr r1, 80026b4 <_printf_i+0x40>)
 80026b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026b4:	0800270d 	.word	0x0800270d
 80026b8:	08002721 	.word	0x08002721
 80026bc:	0800269d 	.word	0x0800269d
 80026c0:	0800269d 	.word	0x0800269d
 80026c4:	0800269d 	.word	0x0800269d
 80026c8:	0800269d 	.word	0x0800269d
 80026cc:	08002721 	.word	0x08002721
 80026d0:	0800269d 	.word	0x0800269d
 80026d4:	0800269d 	.word	0x0800269d
 80026d8:	0800269d 	.word	0x0800269d
 80026dc:	0800269d 	.word	0x0800269d
 80026e0:	08002825 	.word	0x08002825
 80026e4:	0800274d 	.word	0x0800274d
 80026e8:	080027df 	.word	0x080027df
 80026ec:	0800269d 	.word	0x0800269d
 80026f0:	0800269d 	.word	0x0800269d
 80026f4:	08002847 	.word	0x08002847
 80026f8:	0800269d 	.word	0x0800269d
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800269d 	.word	0x0800269d
 8002704:	0800269d 	.word	0x0800269d
 8002708:	080027e7 	.word	0x080027e7
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	1d1a      	adds	r2, r3, #4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	602a      	str	r2, [r5, #0]
 8002714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800271c:	2301      	movs	r3, #1
 800271e:	e09f      	b.n	8002860 <_printf_i+0x1ec>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	0607      	lsls	r7, r0, #24
 8002726:	f103 0104 	add.w	r1, r3, #4
 800272a:	6029      	str	r1, [r5, #0]
 800272c:	d501      	bpl.n	8002732 <_printf_i+0xbe>
 800272e:	681e      	ldr	r6, [r3, #0]
 8002730:	e003      	b.n	800273a <_printf_i+0xc6>
 8002732:	0646      	lsls	r6, r0, #25
 8002734:	d5fb      	bpl.n	800272e <_printf_i+0xba>
 8002736:	f9b3 6000 	ldrsh.w	r6, [r3]
 800273a:	2e00      	cmp	r6, #0
 800273c:	da03      	bge.n	8002746 <_printf_i+0xd2>
 800273e:	232d      	movs	r3, #45	; 0x2d
 8002740:	4276      	negs	r6, r6
 8002742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002746:	485a      	ldr	r0, [pc, #360]	; (80028b0 <_printf_i+0x23c>)
 8002748:	230a      	movs	r3, #10
 800274a:	e012      	b.n	8002772 <_printf_i+0xfe>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	1d19      	adds	r1, r3, #4
 8002752:	6029      	str	r1, [r5, #0]
 8002754:	0605      	lsls	r5, r0, #24
 8002756:	d501      	bpl.n	800275c <_printf_i+0xe8>
 8002758:	681e      	ldr	r6, [r3, #0]
 800275a:	e002      	b.n	8002762 <_printf_i+0xee>
 800275c:	0641      	lsls	r1, r0, #25
 800275e:	d5fb      	bpl.n	8002758 <_printf_i+0xe4>
 8002760:	881e      	ldrh	r6, [r3, #0]
 8002762:	4853      	ldr	r0, [pc, #332]	; (80028b0 <_printf_i+0x23c>)
 8002764:	2f6f      	cmp	r7, #111	; 0x6f
 8002766:	bf0c      	ite	eq
 8002768:	2308      	moveq	r3, #8
 800276a:	230a      	movne	r3, #10
 800276c:	2100      	movs	r1, #0
 800276e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002772:	6865      	ldr	r5, [r4, #4]
 8002774:	60a5      	str	r5, [r4, #8]
 8002776:	2d00      	cmp	r5, #0
 8002778:	bfa2      	ittt	ge
 800277a:	6821      	ldrge	r1, [r4, #0]
 800277c:	f021 0104 	bicge.w	r1, r1, #4
 8002780:	6021      	strge	r1, [r4, #0]
 8002782:	b90e      	cbnz	r6, 8002788 <_printf_i+0x114>
 8002784:	2d00      	cmp	r5, #0
 8002786:	d04b      	beq.n	8002820 <_printf_i+0x1ac>
 8002788:	4615      	mov	r5, r2
 800278a:	fbb6 f1f3 	udiv	r1, r6, r3
 800278e:	fb03 6711 	mls	r7, r3, r1, r6
 8002792:	5dc7      	ldrb	r7, [r0, r7]
 8002794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002798:	4637      	mov	r7, r6
 800279a:	42bb      	cmp	r3, r7
 800279c:	460e      	mov	r6, r1
 800279e:	d9f4      	bls.n	800278a <_printf_i+0x116>
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d10b      	bne.n	80027bc <_printf_i+0x148>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	07de      	lsls	r6, r3, #31
 80027a8:	d508      	bpl.n	80027bc <_printf_i+0x148>
 80027aa:	6923      	ldr	r3, [r4, #16]
 80027ac:	6861      	ldr	r1, [r4, #4]
 80027ae:	4299      	cmp	r1, r3
 80027b0:	bfde      	ittt	le
 80027b2:	2330      	movle	r3, #48	; 0x30
 80027b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027bc:	1b52      	subs	r2, r2, r5
 80027be:	6122      	str	r2, [r4, #16]
 80027c0:	f8cd a000 	str.w	sl, [sp]
 80027c4:	464b      	mov	r3, r9
 80027c6:	aa03      	add	r2, sp, #12
 80027c8:	4621      	mov	r1, r4
 80027ca:	4640      	mov	r0, r8
 80027cc:	f7ff fee4 	bl	8002598 <_printf_common>
 80027d0:	3001      	adds	r0, #1
 80027d2:	d14a      	bne.n	800286a <_printf_i+0x1f6>
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	b004      	add	sp, #16
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	4833      	ldr	r0, [pc, #204]	; (80028b4 <_printf_i+0x240>)
 80027e8:	2778      	movs	r7, #120	; 0x78
 80027ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	6829      	ldr	r1, [r5, #0]
 80027f2:	061f      	lsls	r7, r3, #24
 80027f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80027f8:	d402      	bmi.n	8002800 <_printf_i+0x18c>
 80027fa:	065f      	lsls	r7, r3, #25
 80027fc:	bf48      	it	mi
 80027fe:	b2b6      	uxthmi	r6, r6
 8002800:	07df      	lsls	r7, r3, #31
 8002802:	bf48      	it	mi
 8002804:	f043 0320 	orrmi.w	r3, r3, #32
 8002808:	6029      	str	r1, [r5, #0]
 800280a:	bf48      	it	mi
 800280c:	6023      	strmi	r3, [r4, #0]
 800280e:	b91e      	cbnz	r6, 8002818 <_printf_i+0x1a4>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f023 0320 	bic.w	r3, r3, #32
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	2310      	movs	r3, #16
 800281a:	e7a7      	b.n	800276c <_printf_i+0xf8>
 800281c:	4824      	ldr	r0, [pc, #144]	; (80028b0 <_printf_i+0x23c>)
 800281e:	e7e4      	b.n	80027ea <_printf_i+0x176>
 8002820:	4615      	mov	r5, r2
 8002822:	e7bd      	b.n	80027a0 <_printf_i+0x12c>
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	6826      	ldr	r6, [r4, #0]
 8002828:	6961      	ldr	r1, [r4, #20]
 800282a:	1d18      	adds	r0, r3, #4
 800282c:	6028      	str	r0, [r5, #0]
 800282e:	0635      	lsls	r5, r6, #24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	d501      	bpl.n	8002838 <_printf_i+0x1c4>
 8002834:	6019      	str	r1, [r3, #0]
 8002836:	e002      	b.n	800283e <_printf_i+0x1ca>
 8002838:	0670      	lsls	r0, r6, #25
 800283a:	d5fb      	bpl.n	8002834 <_printf_i+0x1c0>
 800283c:	8019      	strh	r1, [r3, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	6123      	str	r3, [r4, #16]
 8002842:	4615      	mov	r5, r2
 8002844:	e7bc      	b.n	80027c0 <_printf_i+0x14c>
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	1d1a      	adds	r2, r3, #4
 800284a:	602a      	str	r2, [r5, #0]
 800284c:	681d      	ldr	r5, [r3, #0]
 800284e:	6862      	ldr	r2, [r4, #4]
 8002850:	2100      	movs	r1, #0
 8002852:	4628      	mov	r0, r5
 8002854:	f7fd fccc 	bl	80001f0 <memchr>
 8002858:	b108      	cbz	r0, 800285e <_printf_i+0x1ea>
 800285a:	1b40      	subs	r0, r0, r5
 800285c:	6060      	str	r0, [r4, #4]
 800285e:	6863      	ldr	r3, [r4, #4]
 8002860:	6123      	str	r3, [r4, #16]
 8002862:	2300      	movs	r3, #0
 8002864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002868:	e7aa      	b.n	80027c0 <_printf_i+0x14c>
 800286a:	6923      	ldr	r3, [r4, #16]
 800286c:	462a      	mov	r2, r5
 800286e:	4649      	mov	r1, r9
 8002870:	4640      	mov	r0, r8
 8002872:	47d0      	blx	sl
 8002874:	3001      	adds	r0, #1
 8002876:	d0ad      	beq.n	80027d4 <_printf_i+0x160>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	079b      	lsls	r3, r3, #30
 800287c:	d413      	bmi.n	80028a6 <_printf_i+0x232>
 800287e:	68e0      	ldr	r0, [r4, #12]
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	4298      	cmp	r0, r3
 8002884:	bfb8      	it	lt
 8002886:	4618      	movlt	r0, r3
 8002888:	e7a6      	b.n	80027d8 <_printf_i+0x164>
 800288a:	2301      	movs	r3, #1
 800288c:	4632      	mov	r2, r6
 800288e:	4649      	mov	r1, r9
 8002890:	4640      	mov	r0, r8
 8002892:	47d0      	blx	sl
 8002894:	3001      	adds	r0, #1
 8002896:	d09d      	beq.n	80027d4 <_printf_i+0x160>
 8002898:	3501      	adds	r5, #1
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	9903      	ldr	r1, [sp, #12]
 800289e:	1a5b      	subs	r3, r3, r1
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	dcf2      	bgt.n	800288a <_printf_i+0x216>
 80028a4:	e7eb      	b.n	800287e <_printf_i+0x20a>
 80028a6:	2500      	movs	r5, #0
 80028a8:	f104 0619 	add.w	r6, r4, #25
 80028ac:	e7f5      	b.n	800289a <_printf_i+0x226>
 80028ae:	bf00      	nop
 80028b0:	08002cad 	.word	0x08002cad
 80028b4:	08002cbe 	.word	0x08002cbe

080028b8 <__sflush_r>:
 80028b8:	898a      	ldrh	r2, [r1, #12]
 80028ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028bc:	4605      	mov	r5, r0
 80028be:	0710      	lsls	r0, r2, #28
 80028c0:	460c      	mov	r4, r1
 80028c2:	d457      	bmi.n	8002974 <__sflush_r+0xbc>
 80028c4:	684b      	ldr	r3, [r1, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	dc04      	bgt.n	80028d4 <__sflush_r+0x1c>
 80028ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dc01      	bgt.n	80028d4 <__sflush_r+0x1c>
 80028d0:	2000      	movs	r0, #0
 80028d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028d6:	2e00      	cmp	r6, #0
 80028d8:	d0fa      	beq.n	80028d0 <__sflush_r+0x18>
 80028da:	2300      	movs	r3, #0
 80028dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028e0:	682f      	ldr	r7, [r5, #0]
 80028e2:	6a21      	ldr	r1, [r4, #32]
 80028e4:	602b      	str	r3, [r5, #0]
 80028e6:	d032      	beq.n	800294e <__sflush_r+0x96>
 80028e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	075a      	lsls	r2, r3, #29
 80028ee:	d505      	bpl.n	80028fc <__sflush_r+0x44>
 80028f0:	6863      	ldr	r3, [r4, #4]
 80028f2:	1ac0      	subs	r0, r0, r3
 80028f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028f6:	b10b      	cbz	r3, 80028fc <__sflush_r+0x44>
 80028f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fa:	1ac0      	subs	r0, r0, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	4602      	mov	r2, r0
 8002900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002902:	6a21      	ldr	r1, [r4, #32]
 8002904:	4628      	mov	r0, r5
 8002906:	47b0      	blx	r6
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	d106      	bne.n	800291c <__sflush_r+0x64>
 800290e:	6829      	ldr	r1, [r5, #0]
 8002910:	291d      	cmp	r1, #29
 8002912:	d82b      	bhi.n	800296c <__sflush_r+0xb4>
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <__sflush_r+0x100>)
 8002916:	410a      	asrs	r2, r1
 8002918:	07d6      	lsls	r6, r2, #31
 800291a:	d427      	bmi.n	800296c <__sflush_r+0xb4>
 800291c:	2200      	movs	r2, #0
 800291e:	6062      	str	r2, [r4, #4]
 8002920:	04d9      	lsls	r1, r3, #19
 8002922:	6922      	ldr	r2, [r4, #16]
 8002924:	6022      	str	r2, [r4, #0]
 8002926:	d504      	bpl.n	8002932 <__sflush_r+0x7a>
 8002928:	1c42      	adds	r2, r0, #1
 800292a:	d101      	bne.n	8002930 <__sflush_r+0x78>
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	b903      	cbnz	r3, 8002932 <__sflush_r+0x7a>
 8002930:	6560      	str	r0, [r4, #84]	; 0x54
 8002932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002934:	602f      	str	r7, [r5, #0]
 8002936:	2900      	cmp	r1, #0
 8002938:	d0ca      	beq.n	80028d0 <__sflush_r+0x18>
 800293a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800293e:	4299      	cmp	r1, r3
 8002940:	d002      	beq.n	8002948 <__sflush_r+0x90>
 8002942:	4628      	mov	r0, r5
 8002944:	f7ff fbf0 	bl	8002128 <_free_r>
 8002948:	2000      	movs	r0, #0
 800294a:	6360      	str	r0, [r4, #52]	; 0x34
 800294c:	e7c1      	b.n	80028d2 <__sflush_r+0x1a>
 800294e:	2301      	movs	r3, #1
 8002950:	4628      	mov	r0, r5
 8002952:	47b0      	blx	r6
 8002954:	1c41      	adds	r1, r0, #1
 8002956:	d1c8      	bne.n	80028ea <__sflush_r+0x32>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0c5      	beq.n	80028ea <__sflush_r+0x32>
 800295e:	2b1d      	cmp	r3, #29
 8002960:	d001      	beq.n	8002966 <__sflush_r+0xae>
 8002962:	2b16      	cmp	r3, #22
 8002964:	d101      	bne.n	800296a <__sflush_r+0xb2>
 8002966:	602f      	str	r7, [r5, #0]
 8002968:	e7b2      	b.n	80028d0 <__sflush_r+0x18>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002970:	81a3      	strh	r3, [r4, #12]
 8002972:	e7ae      	b.n	80028d2 <__sflush_r+0x1a>
 8002974:	690f      	ldr	r7, [r1, #16]
 8002976:	2f00      	cmp	r7, #0
 8002978:	d0aa      	beq.n	80028d0 <__sflush_r+0x18>
 800297a:	0793      	lsls	r3, r2, #30
 800297c:	680e      	ldr	r6, [r1, #0]
 800297e:	bf08      	it	eq
 8002980:	694b      	ldreq	r3, [r1, #20]
 8002982:	600f      	str	r7, [r1, #0]
 8002984:	bf18      	it	ne
 8002986:	2300      	movne	r3, #0
 8002988:	1bf6      	subs	r6, r6, r7
 800298a:	608b      	str	r3, [r1, #8]
 800298c:	2e00      	cmp	r6, #0
 800298e:	dd9f      	ble.n	80028d0 <__sflush_r+0x18>
 8002990:	6a21      	ldr	r1, [r4, #32]
 8002992:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002996:	4633      	mov	r3, r6
 8002998:	463a      	mov	r2, r7
 800299a:	4628      	mov	r0, r5
 800299c:	47e0      	blx	ip
 800299e:	2800      	cmp	r0, #0
 80029a0:	dc06      	bgt.n	80029b0 <__sflush_r+0xf8>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295
 80029ae:	e790      	b.n	80028d2 <__sflush_r+0x1a>
 80029b0:	4407      	add	r7, r0
 80029b2:	1a36      	subs	r6, r6, r0
 80029b4:	e7ea      	b.n	800298c <__sflush_r+0xd4>
 80029b6:	bf00      	nop
 80029b8:	dfbffffe 	.word	0xdfbffffe

080029bc <_fflush_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	690b      	ldr	r3, [r1, #16]
 80029c0:	4605      	mov	r5, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	b913      	cbnz	r3, 80029cc <_fflush_r+0x10>
 80029c6:	2500      	movs	r5, #0
 80029c8:	4628      	mov	r0, r5
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	b118      	cbz	r0, 80029d6 <_fflush_r+0x1a>
 80029ce:	6a03      	ldr	r3, [r0, #32]
 80029d0:	b90b      	cbnz	r3, 80029d6 <_fflush_r+0x1a>
 80029d2:	f7ff faa1 	bl	8001f18 <__sinit>
 80029d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f3      	beq.n	80029c6 <_fflush_r+0xa>
 80029de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029e0:	07d0      	lsls	r0, r2, #31
 80029e2:	d404      	bmi.n	80029ee <_fflush_r+0x32>
 80029e4:	0599      	lsls	r1, r3, #22
 80029e6:	d402      	bmi.n	80029ee <_fflush_r+0x32>
 80029e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ea:	f7ff fb9a 	bl	8002122 <__retarget_lock_acquire_recursive>
 80029ee:	4628      	mov	r0, r5
 80029f0:	4621      	mov	r1, r4
 80029f2:	f7ff ff61 	bl	80028b8 <__sflush_r>
 80029f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029f8:	07da      	lsls	r2, r3, #31
 80029fa:	4605      	mov	r5, r0
 80029fc:	d4e4      	bmi.n	80029c8 <_fflush_r+0xc>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	059b      	lsls	r3, r3, #22
 8002a02:	d4e1      	bmi.n	80029c8 <_fflush_r+0xc>
 8002a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a06:	f7ff fb8d 	bl	8002124 <__retarget_lock_release_recursive>
 8002a0a:	e7dd      	b.n	80029c8 <_fflush_r+0xc>

08002a0c <__swbuf_r>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	460e      	mov	r6, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	4605      	mov	r5, r0
 8002a14:	b118      	cbz	r0, 8002a1e <__swbuf_r+0x12>
 8002a16:	6a03      	ldr	r3, [r0, #32]
 8002a18:	b90b      	cbnz	r3, 8002a1e <__swbuf_r+0x12>
 8002a1a:	f7ff fa7d 	bl	8001f18 <__sinit>
 8002a1e:	69a3      	ldr	r3, [r4, #24]
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	071a      	lsls	r2, r3, #28
 8002a26:	d525      	bpl.n	8002a74 <__swbuf_r+0x68>
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	b31b      	cbz	r3, 8002a74 <__swbuf_r+0x68>
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	6922      	ldr	r2, [r4, #16]
 8002a30:	1a98      	subs	r0, r3, r2
 8002a32:	6963      	ldr	r3, [r4, #20]
 8002a34:	b2f6      	uxtb	r6, r6
 8002a36:	4283      	cmp	r3, r0
 8002a38:	4637      	mov	r7, r6
 8002a3a:	dc04      	bgt.n	8002a46 <__swbuf_r+0x3a>
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7ff ffbc 	bl	80029bc <_fflush_r>
 8002a44:	b9e0      	cbnz	r0, 8002a80 <__swbuf_r+0x74>
 8002a46:	68a3      	ldr	r3, [r4, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60a3      	str	r3, [r4, #8]
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	6022      	str	r2, [r4, #0]
 8002a52:	701e      	strb	r6, [r3, #0]
 8002a54:	6962      	ldr	r2, [r4, #20]
 8002a56:	1c43      	adds	r3, r0, #1
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d004      	beq.n	8002a66 <__swbuf_r+0x5a>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	07db      	lsls	r3, r3, #31
 8002a60:	d506      	bpl.n	8002a70 <__swbuf_r+0x64>
 8002a62:	2e0a      	cmp	r6, #10
 8002a64:	d104      	bne.n	8002a70 <__swbuf_r+0x64>
 8002a66:	4621      	mov	r1, r4
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff ffa7 	bl	80029bc <_fflush_r>
 8002a6e:	b938      	cbnz	r0, 8002a80 <__swbuf_r+0x74>
 8002a70:	4638      	mov	r0, r7
 8002a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a74:	4621      	mov	r1, r4
 8002a76:	4628      	mov	r0, r5
 8002a78:	f000 f806 	bl	8002a88 <__swsetup_r>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d0d5      	beq.n	8002a2c <__swbuf_r+0x20>
 8002a80:	f04f 37ff 	mov.w	r7, #4294967295
 8002a84:	e7f4      	b.n	8002a70 <__swbuf_r+0x64>
	...

08002a88 <__swsetup_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <__swsetup_r+0xac>)
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	460c      	mov	r4, r1
 8002a92:	b118      	cbz	r0, 8002a9c <__swsetup_r+0x14>
 8002a94:	6a03      	ldr	r3, [r0, #32]
 8002a96:	b90b      	cbnz	r3, 8002a9c <__swsetup_r+0x14>
 8002a98:	f7ff fa3e 	bl	8001f18 <__sinit>
 8002a9c:	89a3      	ldrh	r3, [r4, #12]
 8002a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002aa2:	0718      	lsls	r0, r3, #28
 8002aa4:	d422      	bmi.n	8002aec <__swsetup_r+0x64>
 8002aa6:	06d9      	lsls	r1, r3, #27
 8002aa8:	d407      	bmi.n	8002aba <__swsetup_r+0x32>
 8002aaa:	2309      	movs	r3, #9
 8002aac:	602b      	str	r3, [r5, #0]
 8002aae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ab2:	81a3      	strh	r3, [r4, #12]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	e034      	b.n	8002b24 <__swsetup_r+0x9c>
 8002aba:	0758      	lsls	r0, r3, #29
 8002abc:	d512      	bpl.n	8002ae4 <__swsetup_r+0x5c>
 8002abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ac0:	b141      	cbz	r1, 8002ad4 <__swsetup_r+0x4c>
 8002ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ac6:	4299      	cmp	r1, r3
 8002ac8:	d002      	beq.n	8002ad0 <__swsetup_r+0x48>
 8002aca:	4628      	mov	r0, r5
 8002acc:	f7ff fb2c 	bl	8002128 <_free_r>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	6363      	str	r3, [r4, #52]	; 0x34
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ada:	81a3      	strh	r3, [r4, #12]
 8002adc:	2300      	movs	r3, #0
 8002ade:	6063      	str	r3, [r4, #4]
 8002ae0:	6923      	ldr	r3, [r4, #16]
 8002ae2:	6023      	str	r3, [r4, #0]
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	6923      	ldr	r3, [r4, #16]
 8002aee:	b94b      	cbnz	r3, 8002b04 <__swsetup_r+0x7c>
 8002af0:	89a3      	ldrh	r3, [r4, #12]
 8002af2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afa:	d003      	beq.n	8002b04 <__swsetup_r+0x7c>
 8002afc:	4621      	mov	r1, r4
 8002afe:	4628      	mov	r0, r5
 8002b00:	f000 f850 	bl	8002ba4 <__smakebuf_r>
 8002b04:	89a0      	ldrh	r0, [r4, #12]
 8002b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b0a:	f010 0301 	ands.w	r3, r0, #1
 8002b0e:	d00a      	beq.n	8002b26 <__swsetup_r+0x9e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	60a3      	str	r3, [r4, #8]
 8002b14:	6963      	ldr	r3, [r4, #20]
 8002b16:	425b      	negs	r3, r3
 8002b18:	61a3      	str	r3, [r4, #24]
 8002b1a:	6923      	ldr	r3, [r4, #16]
 8002b1c:	b943      	cbnz	r3, 8002b30 <__swsetup_r+0xa8>
 8002b1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b22:	d1c4      	bne.n	8002aae <__swsetup_r+0x26>
 8002b24:	bd38      	pop	{r3, r4, r5, pc}
 8002b26:	0781      	lsls	r1, r0, #30
 8002b28:	bf58      	it	pl
 8002b2a:	6963      	ldrpl	r3, [r4, #20]
 8002b2c:	60a3      	str	r3, [r4, #8]
 8002b2e:	e7f4      	b.n	8002b1a <__swsetup_r+0x92>
 8002b30:	2000      	movs	r0, #0
 8002b32:	e7f7      	b.n	8002b24 <__swsetup_r+0x9c>
 8002b34:	20000064 	.word	0x20000064

08002b38 <_sbrk_r>:
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	4d06      	ldr	r5, [pc, #24]	; (8002b54 <_sbrk_r+0x1c>)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	602b      	str	r3, [r5, #0]
 8002b44:	f7ff f892 	bl	8001c6c <_sbrk>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d102      	bne.n	8002b52 <_sbrk_r+0x1a>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	b103      	cbz	r3, 8002b52 <_sbrk_r+0x1a>
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	20000258 	.word	0x20000258

08002b58 <__swhatbuf_r>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b60:	2900      	cmp	r1, #0
 8002b62:	b096      	sub	sp, #88	; 0x58
 8002b64:	4615      	mov	r5, r2
 8002b66:	461e      	mov	r6, r3
 8002b68:	da0d      	bge.n	8002b86 <__swhatbuf_r+0x2e>
 8002b6a:	89a3      	ldrh	r3, [r4, #12]
 8002b6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	bf0c      	ite	eq
 8002b76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002b7a:	2340      	movne	r3, #64	; 0x40
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	6031      	str	r1, [r6, #0]
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	b016      	add	sp, #88	; 0x58
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	466a      	mov	r2, sp
 8002b88:	f000 f848 	bl	8002c1c <_fstat_r>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	dbec      	blt.n	8002b6a <__swhatbuf_r+0x12>
 8002b90:	9901      	ldr	r1, [sp, #4]
 8002b92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002b96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002b9a:	4259      	negs	r1, r3
 8002b9c:	4159      	adcs	r1, r3
 8002b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba2:	e7eb      	b.n	8002b7c <__swhatbuf_r+0x24>

08002ba4 <__smakebuf_r>:
 8002ba4:	898b      	ldrh	r3, [r1, #12]
 8002ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ba8:	079d      	lsls	r5, r3, #30
 8002baa:	4606      	mov	r6, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	d507      	bpl.n	8002bc0 <__smakebuf_r+0x1c>
 8002bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	6123      	str	r3, [r4, #16]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6163      	str	r3, [r4, #20]
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	ab01      	add	r3, sp, #4
 8002bc2:	466a      	mov	r2, sp
 8002bc4:	f7ff ffc8 	bl	8002b58 <__swhatbuf_r>
 8002bc8:	9900      	ldr	r1, [sp, #0]
 8002bca:	4605      	mov	r5, r0
 8002bcc:	4630      	mov	r0, r6
 8002bce:	f7ff fb15 	bl	80021fc <_malloc_r>
 8002bd2:	b948      	cbnz	r0, 8002be8 <__smakebuf_r+0x44>
 8002bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bd8:	059a      	lsls	r2, r3, #22
 8002bda:	d4ef      	bmi.n	8002bbc <__smakebuf_r+0x18>
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	e7e3      	b.n	8002bb0 <__smakebuf_r+0xc>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	6020      	str	r0, [r4, #0]
 8002bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	9b00      	ldr	r3, [sp, #0]
 8002bf4:	6163      	str	r3, [r4, #20]
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	6120      	str	r0, [r4, #16]
 8002bfa:	b15b      	cbz	r3, 8002c14 <__smakebuf_r+0x70>
 8002bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f81d 	bl	8002c40 <_isatty_r>
 8002c06:	b128      	cbz	r0, 8002c14 <__smakebuf_r+0x70>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	431d      	orrs	r5, r3
 8002c18:	81a5      	strh	r5, [r4, #12]
 8002c1a:	e7cf      	b.n	8002bbc <__smakebuf_r+0x18>

08002c1c <_fstat_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d07      	ldr	r5, [pc, #28]	; (8002c3c <_fstat_r+0x20>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	f7fe fff9 	bl	8001c20 <_fstat>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	d102      	bne.n	8002c38 <_fstat_r+0x1c>
 8002c32:	682b      	ldr	r3, [r5, #0]
 8002c34:	b103      	cbz	r3, 8002c38 <_fstat_r+0x1c>
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000258 	.word	0x20000258

08002c40 <_isatty_r>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4d06      	ldr	r5, [pc, #24]	; (8002c5c <_isatty_r+0x1c>)
 8002c44:	2300      	movs	r3, #0
 8002c46:	4604      	mov	r4, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	f7fe fff7 	bl	8001c3e <_isatty>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_isatty_r+0x1a>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_isatty_r+0x1a>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	20000258 	.word	0x20000258

08002c60 <_init>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	bf00      	nop
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr

08002c6c <_fini>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr
