
VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c2c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d28  20001d28  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d112  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000295a  00000000  00000000  0002d281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b38  00000000  00000000  0002fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000844  00000000  00000000  00030718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022556  00000000  00000000  00030f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f2cb  00000000  00000000  000534b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3834  00000000  00000000  0006277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c64  00000000  00000000  00125fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00128c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006de0 	.word	0x08006de0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006de0 	.word	0x08006de0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f936 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f806 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f86c 	bl	80005ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 ff38 	bl	8006348 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x14>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 fc4c 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <SystemClock_Config+0xc8>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <SystemClock_Config+0xc8>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <SystemClock_Config+0xc8>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <SystemClock_Config+0xcc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a20      	ldr	r2, [pc, #128]	; (80005a8 <SystemClock_Config+0xcc>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <SystemClock_Config+0xcc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	2310      	movs	r3, #16
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2302      	movs	r3, #2
 8000546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000548:	2300      	movs	r3, #0
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800054c:	2310      	movs	r3, #16
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000550:	23c0      	movs	r3, #192	; 0xc0
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000558:	2304      	movs	r3, #4
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 feab 	bl	80022bc <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 f846 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f90e 	bl	80027ac <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000596:	f000 f831 	bl	80005fc <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3750      	adds	r7, #80	; 0x50
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40007000 	.word	0x40007000

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_MspInit+0x4c>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <HAL_MspInit+0x4c>)
 8000618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061c:	6453      	str	r3, [r2, #68]	; 0x44
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_MspInit+0x4c>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x4c>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x4c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	6413      	str	r3, [r2, #64]	; 0x40
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x4c>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f89a 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <OTG_FS_IRQHandler+0x10>)
 80006b2:	f000 fcd5 	bl	8001060 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200015fc 	.word	0x200015fc

080006c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006ea:	490e      	ldr	r1, [pc, #56]	; (8000724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000700:	4c0b      	ldr	r4, [pc, #44]	; (8000730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800070e:	f7ff ffd7 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f006 fb41 	bl	8006d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f7ff fed5 	bl	80004c4 <main>
  bx  lr    
 800071a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800071c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000728:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 800072c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000730:	20001d28 	.word	0x20001d28

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_Init+0x40>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <HAL_Init+0x40>)
 8000742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_Init+0x40>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_Init+0x40>)
 800074e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x40>)
 800075a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f94f 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff ff4c 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023c00 	.word	0x40023c00

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f967 	bl	8000a6e <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f92f 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000118 	.word	0x20000118

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000118 	.word	0x20000118

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000824:	f7ff ffee 	bl	8000804 <HAL_GetTick>
 8000828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000834:	d005      	beq.n	8000842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_Delay+0x44>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000842:	bf00      	nop
 8000844:	f7ff ffde 	bl	8000804 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	429a      	cmp	r2, r3
 8000852:	d8f7      	bhi.n	8000844 <HAL_Delay+0x28>
  {
  }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008

08000864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800088c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <__NVIC_GetPriorityGrouping+0x18>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f003 0307 	and.w	r3, r3, #7
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <__NVIC_EnableIRQ+0x38>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff8e 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff29 	bl	8000864 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff3e 	bl	80008ac <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff8e 	bl	8000958 <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff31 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffa2 	bl	80009c0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e16b      	b.n	8000d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 815a 	bne.w	8000d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d005      	beq.n	8000ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d130      	bne.n	8000b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	f003 0201 	and.w	r2, r3, #1
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d017      	beq.n	8000b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d123      	bne.n	8000bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	69b9      	ldr	r1, [r7, #24]
 8000bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0203 	and.w	r2, r3, #3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80b4 	beq.w	8000d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b60      	ldr	r3, [pc, #384]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a5f      	ldr	r2, [pc, #380]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b5d      	ldr	r3, [pc, #372]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2a:	4a5b      	ldr	r2, [pc, #364]	; (8000d98 <HAL_GPIO_Init+0x310>)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <HAL_GPIO_Init+0x314>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d02b      	beq.n	8000cae <HAL_GPIO_Init+0x226>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a51      	ldr	r2, [pc, #324]	; (8000da0 <HAL_GPIO_Init+0x318>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d025      	beq.n	8000caa <HAL_GPIO_Init+0x222>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <HAL_GPIO_Init+0x31c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d01f      	beq.n	8000ca6 <HAL_GPIO_Init+0x21e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4f      	ldr	r2, [pc, #316]	; (8000da8 <HAL_GPIO_Init+0x320>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x21a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4e      	ldr	r2, [pc, #312]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x216>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4d      	ldr	r2, [pc, #308]	; (8000db0 <HAL_GPIO_Init+0x328>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x212>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <HAL_GPIO_Init+0x32c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x20e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x20a>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e00e      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c92:	2308      	movs	r3, #8
 8000c94:	e00c      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c96:	2306      	movs	r3, #6
 8000c98:	e00a      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	e008      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e004      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	f002 0203 	and.w	r2, r2, #3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc0:	4935      	ldr	r1, [pc, #212]	; (8000d98 <HAL_GPIO_Init+0x310>)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cf2:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d1c:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <HAL_GPIO_Init+0x334>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	f67f ae90 	bls.w	8000aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40021400 	.word	0x40021400
 8000db4:	40021800 	.word	0x40021800
 8000db8:	40021c00 	.word	0x40021c00
 8000dbc:	40013c00 	.word	0x40013c00

08000dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	b08f      	sub	sp, #60	; 0x3c
 8000dc4:	af0a      	add	r7, sp, #40	; 0x28
 8000dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e10f      	b.n	8000ff2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f005 fcb7 	bl	8006760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 ff98 	bl	8002d46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	687e      	ldr	r6, [r7, #4]
 8000e1e:	466d      	mov	r5, sp
 8000e20:	f106 0410 	add.w	r4, r6, #16
 8000e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e30:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e34:	1d33      	adds	r3, r6, #4
 8000e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f001 fe6f 	bl	8002b1c <USB_CoreInit>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2202      	movs	r2, #2
 8000e48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0d0      	b.n	8000ff2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 ff86 	bl	8002d68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e04a      	b.n	8000ef8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	333d      	adds	r3, #61	; 0x3d
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	333c      	adds	r3, #60	; 0x3c
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	b298      	uxth	r0, r3
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3344      	adds	r3, #68	; 0x44
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3340      	adds	r3, #64	; 0x40
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3348      	adds	r3, #72	; 0x48
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	334c      	adds	r3, #76	; 0x4c
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3354      	adds	r3, #84	; 0x54
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3af      	bcc.n	8000e62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e044      	b.n	8000f92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3b5      	bcc.n	8000f08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	687e      	ldr	r6, [r7, #4]
 8000fa4:	466d      	mov	r5, sp
 8000fa6:	f106 0410 	add.w	r4, r6, #16
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fba:	1d33      	adds	r3, r6, #4
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 ff1e 	bl	8002e00 <USB_DevInit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00d      	b.n	8000ff2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f86d 	bl	80040ca <USB_DevDisconnect>

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ffa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_PCD_Start+0x1c>
 8001012:	2302      	movs	r3, #2
 8001014:	e020      	b.n	8001058 <HAL_PCD_Start+0x5e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	2b01      	cmp	r3, #1
 8001024:	d109      	bne.n	800103a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fe70 	bl	8002d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f81d 	bl	8004088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08d      	sub	sp, #52	; 0x34
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f8db 	bl	8004232 <USB_GetMode>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 848a 	bne.w	8001998 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f83f 	bl	800410c <USB_ReadInterrupts>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8480 	beq.w	8001996 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f82c 	bl	800410c <USB_ReadInterrupts>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d107      	bne.n	80010ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f002 0202 	and.w	r2, r2, #2
 80010cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f81a 	bl	800410c <USB_ReadInterrupts>
 80010d8:	4603      	mov	r3, r0
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d161      	bne.n	80011a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0210 	bic.w	r2, r2, #16
 80010f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f003 020f 	and.w	r2, r3, #15
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	3304      	adds	r3, #4
 8001110:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	0c5b      	lsrs	r3, r3, #17
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	2b02      	cmp	r3, #2
 800111c:	d124      	bne.n	8001168 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d035      	beq.n	8001196 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	6a38      	ldr	r0, [r7, #32]
 800113e:	f002 fe51 	bl	8003de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114e:	441a      	add	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001160:	441a      	add	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	621a      	str	r2, [r3, #32]
 8001166:	e016      	b.n	8001196 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	0c5b      	lsrs	r3, r3, #17
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	2b06      	cmp	r3, #6
 8001172:	d110      	bne.n	8001196 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800117a:	2208      	movs	r2, #8
 800117c:	4619      	mov	r1, r3
 800117e:	6a38      	ldr	r0, [r7, #32]
 8001180:	f002 fe30 	bl	8003de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001190:	441a      	add	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0210 	orr.w	r2, r2, #16
 80011a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 ffae 	bl	800410c <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011ba:	f040 80a7 	bne.w	800130c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ffb3 	bl	8004132 <USB_ReadDevAllOutEpInterrupt>
 80011cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011ce:	e099      	b.n	8001304 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 808e 	beq.w	80012f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 ffd7 	bl	800419a <USB_ReadDevOutEPInterrupt>
 80011ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	015a      	lsls	r2, r3, #5
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	4413      	add	r3, r2
 8001200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001204:	461a      	mov	r2, r3
 8001206:	2301      	movs	r3, #1
 8001208:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800120a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fec3 	bl	8001f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001228:	461a      	mov	r2, r3
 800122a:	2308      	movs	r3, #8
 800122c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 ff99 	bl	8002168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	015a      	lsls	r2, r3, #5
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4413      	add	r3, r2
 8001248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800124c:	461a      	mov	r2, r3
 800124e:	2310      	movs	r3, #16
 8001250:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d030      	beq.n	80012be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001264:	2b80      	cmp	r3, #128	; 0x80
 8001266:	d109      	bne.n	800127c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	3304      	adds	r3, #4
 8001290:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	78db      	ldrb	r3, [r3, #3]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2200      	movs	r2, #0
 800129e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f005 fb60 	bl	800696c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	015a      	lsls	r2, r3, #5
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	4413      	add	r3, r2
 80012b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b8:	461a      	mov	r2, r3
 80012ba:	2302      	movs	r3, #2
 80012bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	2320      	movs	r3, #32
 80012d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f0:	461a      	mov	r2, r3
 80012f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3301      	adds	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	f47f af62 	bne.w	80011d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fefb 	bl	800410c <USB_ReadInterrupts>
 8001316:	4603      	mov	r3, r0
 8001318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001320:	f040 80db 	bne.w	80014da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 ff1c 	bl	8004166 <USB_ReadDevAllInEpInterrupt>
 800132e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001334:	e0cd      	b.n	80014d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80c2 	beq.w	80014c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f002 ff42 	bl	80041d6 <USB_ReadDevInEPInterrupt>
 8001352:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d057      	beq.n	800140e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	2201      	movs	r2, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	69f9      	ldr	r1, [r7, #28]
 800137a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800137e:	4013      	ands	r3, r2
 8001380:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	015a      	lsls	r2, r3, #5
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	4413      	add	r3, r2
 800138a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800138e:	461a      	mov	r2, r3
 8001390:	2301      	movs	r3, #1
 8001392:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d132      	bne.n	8001402 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	334c      	adds	r3, #76	; 0x4c
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4403      	add	r3, r0
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4419      	add	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4403      	add	r3, r0
 80013d0:	334c      	adds	r3, #76	; 0x4c
 80013d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d113      	bne.n	8001402 <HAL_PCD_IRQHandler+0x3a2>
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3354      	adds	r3, #84	; 0x54
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d108      	bne.n	8001402 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013fa:	461a      	mov	r2, r3
 80013fc:	2101      	movs	r1, #1
 80013fe:	f002 ff49 	bl	8004294 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f005 fa2a 	bl	8006862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001424:	461a      	mov	r2, r3
 8001426:	2308      	movs	r3, #8
 8001428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001440:	461a      	mov	r2, r3
 8001442:	2310      	movs	r3, #16
 8001444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800145c:	461a      	mov	r2, r3
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800146c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	f001 fe2a 	bl	80030c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3338      	adds	r3, #56	; 0x38
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	78db      	ldrb	r3, [r3, #3]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2200      	movs	r2, #0
 8001494:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f005 fa77 	bl	8006990 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ae:	461a      	mov	r2, r3
 80014b0:	2302      	movs	r3, #2
 80014b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fcdb 	bl	8001e7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f af2e 	bne.w	8001336 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe14 	bl	800410c <USB_ReadInterrupts>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ee:	d122      	bne.n	8001536 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001516:	2100      	movs	r1, #0
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fec3 	bl	80022a4 <HAL_PCDEx_LPM_Callback>
 800151e:	e002      	b.n	8001526 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f005 fa15 	bl	8006950 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fde6 	bl	800410c <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800154a:	d112      	bne.n	8001572 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	d102      	bne.n	8001562 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f005 f9d1 	bl	8006904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001570:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fdc8 	bl	800410c <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001586:	f040 80b7 	bne.w	80016f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2110      	movs	r1, #16
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fd8f 	bl	80030c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ae:	e046      	b.n	800163e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015bc:	461a      	mov	r2, r3
 80015be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d4:	0151      	lsls	r1, r2, #5
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	440a      	add	r2, r1
 80015da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f0:	461a      	mov	r2, r3
 80015f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001608:	0151      	lsls	r1, r2, #5
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	440a      	add	r2, r1
 800160e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001616:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001628:	0151      	lsls	r1, r2, #5
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	440a      	add	r2, r1
 800162e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001636:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	3301      	adds	r3, #1
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001644:	429a      	cmp	r2, r3
 8001646:	d3b3      	bcc.n	80015b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001656:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800165a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d016      	beq.n	8001692 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001674:	f043 030b 	orr.w	r3, r3, #11
 8001678:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800168a:	f043 030b 	orr.w	r3, r3, #11
 800168e:	6453      	str	r3, [r2, #68]	; 0x44
 8001690:	e015      	b.n	80016be <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b8:	f043 030b 	orr.w	r3, r3, #11
 80016bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016e2:	461a      	mov	r2, r3
 80016e4:	f002 fdd6 	bl	8004294 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fd05 	bl	800410c <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170c:	d124      	bne.n	8001758 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fd9b 	bl	800424e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fd50 	bl	80031c2 <USB_GetDevSpeed>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681c      	ldr	r4, [r3, #0]
 800172e:	f001 f9e9 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8001732:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4620      	mov	r0, r4
 800173e:	f001 fa4f 	bl	8002be0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 f8b5 	bl	80068b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001756:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fcd5 	bl	800410c <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b08      	cmp	r3, #8
 800176a:	d10a      	bne.n	8001782 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f005 f892 	bl	8006896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 0208 	and.w	r2, r2, #8
 8001780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fcc0 	bl	800410c <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	2b80      	cmp	r3, #128	; 0x80
 8001794:	d122      	bne.n	80017dc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	e014      	b.n	80017d2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fb27 	bl	8001e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3301      	adds	r3, #1
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	429a      	cmp	r2, r3
 80017da:	d3e5      	bcc.n	80017a8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fc93 	bl	800410c <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f0:	d13b      	bne.n	800186a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e02b      	b.n	8001850 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	3340      	adds	r3, #64	; 0x40
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d115      	bne.n	800184a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800181e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	da12      	bge.n	800184a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	333f      	adds	r3, #63	; 0x3f
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fae8 	bl	8001e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	429a      	cmp	r2, r3
 8001858:	d3ce      	bcc.n	80017f8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fc4c 	bl	800410c <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800187e:	d155      	bne.n	800192c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e045      	b.n	8001912 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12e      	bne.n	800190c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da2b      	bge.n	800190c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d121      	bne.n	800190c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001908:	6053      	str	r3, [r2, #4]
            break;
 800190a:	e007      	b.n	800191c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3301      	adds	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001918:	429a      	cmp	r2, r3
 800191a:	d3b4      	bcc.n	8001886 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fbeb 	bl	800410c <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d10a      	bne.n	8001958 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f005 f836 	bl	80069b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fbd5 	bl	800410c <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d115      	bne.n	8001998 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f005 f826 	bl	80069d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	e000      	b.n	8001998 <HAL_PCD_IRQHandler+0x938>
      return;
 8001996:	bf00      	nop
    }
  }
}
 8001998:	3734      	adds	r7, #52	; 0x34
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}

0800199e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_PCD_SetAddress+0x1a>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e013      	b.n	80019e0 <HAL_PCD_SetAddress+0x42>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fb33 	bl	800403c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	70fb      	strb	r3, [r7, #3]
 80019fa:	460b      	mov	r3, r1
 80019fc:	803b      	strh	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0f      	bge.n	8001a2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 020f 	and.w	r2, r3, #15
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	3338      	adds	r3, #56	; 0x38
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
 8001a2c:	e00f      	b.n	8001a4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 020f 	and.w	r2, r3, #15
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a5a:	883a      	ldrh	r2, [r7, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	78ba      	ldrb	r2, [r7, #2]
 8001a64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a78:	78bb      	ldrb	r3, [r7, #2]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d102      	bne.n	8001a84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_PCD_EP_Open+0xaa>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e00e      	b.n	8001ab0 <HAL_PCD_EP_Open+0xc8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fbb3 	bl	800320c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001aae:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da0f      	bge.n	8001aec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3338      	adds	r3, #56	; 0x38
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e00f      	b.n	8001b0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	3304      	adds	r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_PCD_EP_Close+0x6e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e00e      	b.n	8001b44 <HAL_PCD_EP_Close+0x8c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fbf1 	bl	800331c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f003 020f 	and.w	r2, r3, #15
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8e:	7afb      	ldrb	r3, [r7, #11]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	f001 fed0 	bl	8003964 <USB_EP0StartXfer>
 8001bc4:	e008      	b.n	8001bd8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	f001 fc7e 	bl	80034d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c04:	681b      	ldr	r3, [r3, #0]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3338      	adds	r3, #56	; 0x38
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	3304      	adds	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	6979      	ldr	r1, [r7, #20]
 8001c84:	f001 fe6e 	bl	8003964 <USB_EP0StartXfer>
 8001c88:	e008      	b.n	8001c9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6979      	ldr	r1, [r7, #20]
 8001c98:	f001 fc1c 	bl	80034d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d901      	bls.n	8001cc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e050      	b.n	8001d66 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0f      	bge.n	8001cec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00d      	b.n	8001d08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_EP_SetStall+0x82>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e01e      	b.n	8001d66 <HAL_PCD_EP_SetStall+0xc0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f8ac 	bl	8003e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	b2d9      	uxtb	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d56:	461a      	mov	r2, r3
 8001d58:	f002 fa9c 	bl	8004294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d901      	bls.n	8001d8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e042      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da0f      	bge.n	8001db4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	3338      	adds	r3, #56	; 0x38
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	705a      	strb	r2, [r3, #1]
 8001db2:	e00f      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_ClrStall+0x86>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa4>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 f8b4 	bl	8003f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0c      	bge.n	8001e48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e00c      	b.n	8001e62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 fed3 	bl	8003c14 <USB_EPStopXfer>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3338      	adds	r3, #56	; 0x38
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d901      	bls.n	8001eb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e06c      	b.n	8001f8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d902      	bls.n	8001ed0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed8:	e02b      	b.n	8001f32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d902      	bls.n	8001ef6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4603      	mov	r3, r0
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f001 ff27 	bl	8003d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	441a      	add	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a1a      	ldr	r2, [r3, #32]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d809      	bhi.n	8001f5c <PCD_WriteEmptyTxFifo+0xe0>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d203      	bcs.n	8001f5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1be      	bne.n	8001eda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d811      	bhi.n	8001f8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	2201      	movs	r2, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	6939      	ldr	r1, [r7, #16]
 8001f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f88:	4013      	ands	r3, r2
 8001f8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	333c      	adds	r3, #60	; 0x3c
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d17b      	bne.n	80020c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d015      	beq.n	8002004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4a61      	ldr	r2, [pc, #388]	; (8002160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	f240 80b9 	bls.w	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80b3 	beq.w	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002000:	6093      	str	r3, [r2, #8]
 8002002:	e0a7      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	2320      	movs	r3, #32
 800201e:	6093      	str	r3, [r2, #8]
 8002020:	e098      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 8093 	bne.w	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d90f      	bls.n	8002056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	e07e      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	0159      	lsls	r1, r3, #5
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	440b      	add	r3, r1
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d114      	bne.n	80020b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020a0:	461a      	mov	r2, r3
 80020a2:	2101      	movs	r1, #1
 80020a4:	f002 f8f6 	bl	8004294 <USB_EP0_OutStart>
 80020a8:	e006      	b.n	80020b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	441a      	add	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f004 fbb4 	bl	800682c <HAL_PCD_DataOutStageCallback>
 80020c4:	e046      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d124      	bne.n	8002118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e4:	461a      	mov	r2, r3
 80020e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ea:	6093      	str	r3, [r2, #8]
 80020ec:	e032      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	2320      	movs	r3, #32
 8002108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f004 fb8b 	bl	800682c <HAL_PCD_DataOutStageCallback>
 8002116:	e01d      	b.n	8002154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d114      	bne.n	8002148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d108      	bne.n	8002148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002140:	461a      	mov	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f002 f8a6 	bl	8004294 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 fb6c 	bl	800682c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	4f54300a 	.word	0x4f54300a
 8002164:	4f54310a 	.word	0x4f54310a

08002168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	333c      	adds	r3, #60	; 0x3c
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d90e      	bls.n	80021bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f004 fb23 	bl	8006808 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d90c      	bls.n	80021e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021dc:	461a      	mov	r2, r3
 80021de:	2101      	movs	r1, #1
 80021e0:	f002 f858 	bl	8004294 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	4f54300a 	.word	0x4f54300a

080021f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
 8002200:	4613      	mov	r3, r2
 8002202:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d107      	bne.n	8002222 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002212:	883b      	ldrh	r3, [r7, #0]
 8002214:	0419      	lsls	r1, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	430a      	orrs	r2, r1
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
 8002220:	e028      	b.n	8002274 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4413      	add	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e00d      	b.n	8002252 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3340      	adds	r3, #64	; 0x40
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	3b01      	subs	r3, #1
 8002258:	429a      	cmp	r2, r3
 800225a:	d3ec      	bcc.n	8002236 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800225c:	883b      	ldrh	r3, [r7, #0]
 800225e:	0418      	lsls	r0, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	3b01      	subs	r3, #1
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4302      	orrs	r2, r0
 800226c:	3340      	adds	r3, #64	; 0x40
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e267      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d075      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x108>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e242      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x74>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fa46 	bl	8000804 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe fa42 	bl	8000804 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e207      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xc0>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fa32 	bl	8000804 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fa2e 	bl	8000804 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1f3      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0xe8>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1c7      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe f9e7 	bl	8000804 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243a:	f7fe f9e3 	bl	8000804 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1a8      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe f9c6 	bl	8000804 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247c:	f7fe f9c2 	bl	8000804 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e187      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe f9a6 	bl	8000804 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe f9a2 	bl	8000804 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e167      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x200>
 80024da:	e01b      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe f98f 	bl	8000804 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	e00e      	b.n	8002508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ea:	f7fe f98b 	bl	8000804 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d907      	bls.n	8002508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e150      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	42470000 	.word	0x42470000
 8002504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ea      	bne.n	80024ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8097 	beq.w	8002650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b77      	ldr	r3, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7fe f94b 	bl	8000804 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7fe f947 	bl	8000804 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e10c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2ea>
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a63      	ldr	r2, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x30c>
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5e      	ldr	r2, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a5b      	ldr	r2, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025c8:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe f90c 	bl	8000804 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe f908 	bl	8000804 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cb      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ee      	beq.n	80025f0 <HAL_RCC_OscConfig+0x334>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fe f8f6 	bl	8000804 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe f8f2 	bl	8000804 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b5      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a1 	beq.w	800279c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d05c      	beq.n	8002720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d141      	bne.n	80026f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe f8c6 	bl	8000804 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe f8c2 	bl	8000804 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	491b      	ldr	r1, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe f89b 	bl	8000804 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe f897 	bl	8000804 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x416>
 80026f0:	e054      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe f884 	bl	8000804 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe f880 	bl	8000804 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e045      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
 800271e:	e03d      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e038      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7fd ffb2 	bl	8000804 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fd ffae 	bl	8000804 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd ff12 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	08006e40 	.word	0x08006e40
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b090      	sub	sp, #64	; 0x40
 800297e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d00d      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x40>
 800299c:	2b08      	cmp	r3, #8
 800299e:	f200 80a1 	bhi.w	8002ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x34>
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029aa:	e09b      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_GetSysClockFreq+0x184>)
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029b0:	e09b      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029b6:	e098      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b4f      	ldr	r3, [pc, #316]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d028      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	627a      	str	r2, [r7, #36]	; 0x24
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029e0:	2100      	movs	r1, #0
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e4:	fb03 f201 	mul.w	r2, r3, r1
 80029e8:	2300      	movs	r3, #0
 80029ea:	fb00 f303 	mul.w	r3, r0, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	4a43      	ldr	r2, [pc, #268]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80029f2:	fba0 1202 	umull	r1, r2, r0, r2
 80029f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f8:	460a      	mov	r2, r1
 80029fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80029fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fe:	4413      	add	r3, r2
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	2200      	movs	r2, #0
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	61fa      	str	r2, [r7, #28]
 8002a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a12:	f7fd fbd9 	bl	80001c8 <__aeabi_uldivmod>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1e:	e053      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	617a      	str	r2, [r7, #20]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a32:	f04f 0b00 	mov.w	fp, #0
 8002a36:	4652      	mov	r2, sl
 8002a38:	465b      	mov	r3, fp
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	0159      	lsls	r1, r3, #5
 8002a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a48:	0150      	lsls	r0, r2, #5
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a52:	eb63 090b 	sbc.w	r9, r3, fp
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	00eb      	lsls	r3, r5, #3
 8002a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a80:	00e2      	lsls	r2, r4, #3
 8002a82:	4614      	mov	r4, r2
 8002a84:	461d      	mov	r5, r3
 8002a86:	eb14 030a 	adds.w	r3, r4, sl
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	eb45 030b 	adc.w	r3, r5, fp
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	028b      	lsls	r3, r1, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	028a      	lsls	r2, r1, #10
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	60fa      	str	r2, [r7, #12]
 8002ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002abc:	f7fd fb84 	bl	80001c8 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3740      	adds	r7, #64	; 0x40
 8002af0:	46bd      	mov	sp, r7
 8002af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	017d7840 	.word	0x017d7840

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000

08002b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	f107 001c 	add.w	r0, r7, #28
 8002b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d122      	bne.n	8002b7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f001 fbee 	bl	8004350 <USB_CoreReset>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e01a      	b.n	8002bb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f001 fbe2 	bl	8004350 <USB_CoreReset>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba2:	e005      	b.n	8002bb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10b      	bne.n	8002bce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f043 0206 	orr.w	r2, r3, #6
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bda:	b004      	add	sp, #16
 8002bdc:	4770      	bx	lr
	...

08002be0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d165      	bne.n	8002cc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <USB_SetTurnaroundTime+0x11c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d906      	bls.n	8002c0a <USB_SetTurnaroundTime+0x2a>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <USB_SetTurnaroundTime+0x120>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d202      	bcs.n	8002c0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c04:	230f      	movs	r3, #15
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e062      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <USB_SetTurnaroundTime+0x120>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d306      	bcc.n	8002c20 <USB_SetTurnaroundTime+0x40>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <USB_SetTurnaroundTime+0x124>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d202      	bcs.n	8002c20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c1a:	230e      	movs	r3, #14
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e057      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <USB_SetTurnaroundTime+0x124>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d306      	bcc.n	8002c36 <USB_SetTurnaroundTime+0x56>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a37      	ldr	r2, [pc, #220]	; (8002d08 <USB_SetTurnaroundTime+0x128>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d202      	bcs.n	8002c36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c30:	230d      	movs	r3, #13
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e04c      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <USB_SetTurnaroundTime+0x128>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d306      	bcc.n	8002c4c <USB_SetTurnaroundTime+0x6c>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <USB_SetTurnaroundTime+0x12c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d802      	bhi.n	8002c4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c46:	230c      	movs	r3, #12
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e041      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <USB_SetTurnaroundTime+0x12c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d906      	bls.n	8002c62 <USB_SetTurnaroundTime+0x82>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4a2e      	ldr	r2, [pc, #184]	; (8002d10 <USB_SetTurnaroundTime+0x130>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d802      	bhi.n	8002c62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e036      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <USB_SetTurnaroundTime+0x130>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d906      	bls.n	8002c78 <USB_SetTurnaroundTime+0x98>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <USB_SetTurnaroundTime+0x134>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d802      	bhi.n	8002c78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c72:	230a      	movs	r3, #10
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e02b      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <USB_SetTurnaroundTime+0x134>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d906      	bls.n	8002c8e <USB_SetTurnaroundTime+0xae>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <USB_SetTurnaroundTime+0x138>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d202      	bcs.n	8002c8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c88:	2309      	movs	r3, #9
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e020      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <USB_SetTurnaroundTime+0x138>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d306      	bcc.n	8002ca4 <USB_SetTurnaroundTime+0xc4>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <USB_SetTurnaroundTime+0x13c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d802      	bhi.n	8002ca4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e015      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <USB_SetTurnaroundTime+0x13c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d906      	bls.n	8002cba <USB_SetTurnaroundTime+0xda>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <USB_SetTurnaroundTime+0x140>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d202      	bcs.n	8002cba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00a      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cba:	2306      	movs	r3, #6
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e007      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cc6:	2309      	movs	r3, #9
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e001      	b.n	8002cd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ccc:	2309      	movs	r3, #9
 8002cce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	029b      	lsls	r3, r3, #10
 8002ce4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	00d8acbf 	.word	0x00d8acbf
 8002d00:	00e4e1c0 	.word	0x00e4e1c0
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	01067380 	.word	0x01067380
 8002d0c:	011a499f 	.word	0x011a499f
 8002d10:	01312cff 	.word	0x01312cff
 8002d14:	014ca43f 	.word	0x014ca43f
 8002d18:	016e3600 	.word	0x016e3600
 8002d1c:	01a6ab1f 	.word	0x01a6ab1f
 8002d20:	01e84800 	.word	0x01e84800

08002d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d115      	bne.n	8002db6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fd fd40 	bl	800081c <HAL_Delay>
      ms++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f001 fa45 	bl	8004232 <USB_GetMode>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d01e      	beq.n	8002dec <USB_SetCurrentMode+0x84>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b31      	cmp	r3, #49	; 0x31
 8002db2:	d9f0      	bls.n	8002d96 <USB_SetCurrentMode+0x2e>
 8002db4:	e01a      	b.n	8002dec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d115      	bne.n	8002de8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7fd fd27 	bl	800081c <HAL_Delay>
      ms++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f001 fa2c 	bl	8004232 <USB_GetMode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <USB_SetCurrentMode+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b31      	cmp	r3, #49	; 0x31
 8002de4:	d9f0      	bls.n	8002dc8 <USB_SetCurrentMode+0x60>
 8002de6:	e001      	b.n	8002dec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e005      	b.n	8002df8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b32      	cmp	r3, #50	; 0x32
 8002df0:	d101      	bne.n	8002df6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e00:	b084      	sub	sp, #16
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e009      	b.n	8002e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	3340      	adds	r3, #64	; 0x40
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	3301      	adds	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0e      	cmp	r3, #14
 8002e38:	d9f2      	bls.n	8002e20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11c      	bne.n	8002e7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
 8002e78:	e00b      	b.n	8002e92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eac:	461a      	mov	r2, r3
 8002eae:	680b      	ldr	r3, [r1, #0]
 8002eb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10c      	bne.n	8002ed2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f965 	bl	8003190 <USB_SetDevSpeed>
 8002ec6:	e008      	b.n	8002eda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ec8:	2101      	movs	r1, #1
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f960 	bl	8003190 <USB_SetDevSpeed>
 8002ed0:	e003      	b.n	8002eda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f95b 	bl	8003190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002eda:	2110      	movs	r1, #16
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f8f3 	bl	80030c8 <USB_FlushTxFifo>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f91f 	bl	8003130 <USB_FlushRxFifo>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f02:	461a      	mov	r2, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2300      	movs	r3, #0
 8002f12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e043      	b.n	8002fae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f3c:	d118      	bne.n	8002f70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e013      	b.n	8002f82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f66:	461a      	mov	r2, r3
 8002f68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e008      	b.n	8002f82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3301      	adds	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3b7      	bcc.n	8002f26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	e043      	b.n	8003044 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd2:	d118      	bne.n	8003006 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e013      	b.n	8003018 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e008      	b.n	8003018 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2300      	movs	r3, #0
 8003016:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	2300      	movs	r3, #0
 8003028:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800303c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3301      	adds	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3b7      	bcc.n	8002fbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800305e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800306c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <USB_DevInit+0x2c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030c0:	b004      	add	sp, #16
 80030c2:	4770      	bx	lr
 80030c4:	803c3800 	.word	0x803c3800

080030c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <USB_FlushTxFifo+0x64>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e01b      	b.n	8003120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	daf2      	bge.n	80030d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	019b      	lsls	r3, r3, #6
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <USB_FlushTxFifo+0x64>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e006      	b.n	8003120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	d0f0      	beq.n	8003100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	00030d40 	.word	0x00030d40

08003130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a11      	ldr	r2, [pc, #68]	; (800318c <USB_FlushRxFifo+0x5c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e018      	b.n	8003180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	daf2      	bge.n	800313c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2210      	movs	r2, #16
 800315e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <USB_FlushRxFifo+0x5c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e006      	b.n	8003180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d0f0      	beq.n	8003160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	00030d40 	.word	0x00030d40

08003190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0306 	and.w	r3, r3, #6
 80031da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]
 80031e6:	e00a      	b.n	80031fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d002      	beq.n	80031f4 <USB_GetDevSpeed+0x32>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d102      	bne.n	80031fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031f4:	2302      	movs	r3, #2
 80031f6:	75fb      	strb	r3, [r7, #23]
 80031f8:	e001      	b.n	80031fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031fa:	230f      	movs	r3, #15
 80031fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d13a      	bne.n	800329e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	b29b      	uxth	r3, r3
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003246:	4313      	orrs	r3, r2
 8003248:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d155      	bne.n	800330c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800327c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	059b      	lsls	r3, r3, #22
 8003282:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003284:	4313      	orrs	r3, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	440a      	add	r2, r1
 800328e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e036      	b.n	800330c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11a      	bne.n	800330c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032f2:	430b      	orrs	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	0151      	lsls	r1, r2, #5
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	440a      	add	r2, r1
 80032fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d161      	bne.n	80033fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334e:	d11f      	bne.n	8003390 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800336e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	440a      	add	r2, r1
 8003386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800338a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800338e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b0:	4013      	ands	r3, r2
 80033b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d4:	4013      	ands	r3, r2
 80033d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	0159      	lsls	r1, r3, #5
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	440b      	add	r3, r1
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	4619      	mov	r1, r3
 80033f4:	4b35      	ldr	r3, [pc, #212]	; (80034cc <USB_DeactivateEndpoint+0x1b0>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
 80033fa:	e060      	b.n	80034be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800340e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003412:	d11f      	bne.n	8003454 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800342e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003432:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800344e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	43db      	mvns	r3, r3
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003474:	4013      	ands	r3, r2
 8003476:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	43db      	mvns	r3, r3
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003498:	4013      	ands	r3, r2
 800349a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0159      	lsls	r1, r3, #5
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	4619      	mov	r1, r3
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <USB_DeactivateEndpoint+0x1b4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	ec337800 	.word	0xec337800
 80034d0:	eff37800 	.word	0xeff37800

080034d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 815c 	bne.w	80037ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d132      	bne.n	8003564 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	0151      	lsls	r1, r2, #5
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	440a      	add	r2, r1
 8003514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800351c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	440a      	add	r2, r1
 8003538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	0151      	lsls	r1, r2, #5
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	440a      	add	r2, r1
 8003558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355c:	0cdb      	lsrs	r3, r3, #19
 800355e:	04db      	lsls	r3, r3, #19
 8003560:	6113      	str	r3, [r2, #16]
 8003562:	e074      	b.n	800364e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	0cdb      	lsrs	r3, r3, #19
 8003580:	04db      	lsls	r3, r3, #19
 8003582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	440a      	add	r2, r1
 800359a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	440b      	add	r3, r1
 80035c0:	1e59      	subs	r1, r3, #1
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035cc:	4b9d      	ldr	r3, [pc, #628]	; (8003844 <USB_EPStartXfer+0x370>)
 80035ce:	400b      	ands	r3, r1
 80035d0:	69b9      	ldr	r1, [r7, #24]
 80035d2:	0148      	lsls	r0, r1, #5
 80035d4:	69f9      	ldr	r1, [r7, #28]
 80035d6:	4401      	add	r1, r0
 80035d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035dc:	4313      	orrs	r3, r2
 80035de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	69b9      	ldr	r1, [r7, #24]
 80035f8:	0148      	lsls	r0, r1, #5
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	4401      	add	r1, r0
 80035fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	791b      	ldrb	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d11f      	bne.n	800364e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800362c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	440a      	add	r2, r1
 8003644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800364c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d14b      	bne.n	80036ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	791b      	ldrb	r3, [r3, #4]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d128      	bne.n	80036ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d110      	bne.n	80036aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	440a      	add	r2, r1
 800369e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e00f      	b.n	80036ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e133      	b.n	8003954 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800370a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	791b      	ldrb	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d015      	beq.n	8003740 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 811b 	beq.w	8003954 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	69f9      	ldr	r1, [r7, #28]
 8003736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800373a:	4313      	orrs	r3, r2
 800373c:	634b      	str	r3, [r1, #52]	; 0x34
 800373e:	e109      	b.n	8003954 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d110      	bne.n	8003772 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	440a      	add	r2, r1
 8003766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e00f      	b.n	8003792 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	0151      	lsls	r1, r2, #5
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	440a      	add	r2, r1
 8003788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	b298      	uxth	r0, r3
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fade 	bl	8003d68 <USB_WritePacket>
 80037ac:	e0d2      	b.n	8003954 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c8:	0cdb      	lsrs	r3, r3, #19
 80037ca:	04db      	lsls	r3, r3, #19
 80037cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d126      	bne.n	8003848 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	0148      	lsls	r0, r1, #5
 8003814:	69f9      	ldr	r1, [r7, #28]
 8003816:	4401      	add	r1, r0
 8003818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800383a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800383e:	6113      	str	r3, [r2, #16]
 8003840:	e03a      	b.n	80038b8 <USB_EPStartXfer+0x3e4>
 8003842:	bf00      	nop
 8003844:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4413      	add	r3, r2
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	8afa      	ldrh	r2, [r7, #22]
 8003864:	fb03 f202 	mul.w	r2, r3, r2
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	8afb      	ldrh	r3, [r7, #22]
 800387c:	04d9      	lsls	r1, r3, #19
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <USB_EPStartXfer+0x48c>)
 8003880:	400b      	ands	r3, r1
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	0148      	lsls	r0, r1, #5
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	4401      	add	r1, r0
 800388a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800388e:	4313      	orrs	r3, r2
 8003890:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	0148      	lsls	r0, r1, #5
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	4401      	add	r1, r0
 80038b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038b4:	4313      	orrs	r3, r2
 80038b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10d      	bne.n	80038da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6919      	ldr	r1, [r3, #16]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	460a      	mov	r2, r1
 80038d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d128      	bne.n	8003934 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d110      	bne.n	8003914 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	440a      	add	r2, r1
 8003908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800390c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e00f      	b.n	8003934 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	1ff80000 	.word	0x1ff80000

08003964 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 80ce 	bne.w	8003b22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d132      	bne.n	80039f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ec:	0cdb      	lsrs	r3, r3, #19
 80039ee:	04db      	lsls	r3, r3, #19
 80039f0:	6113      	str	r3, [r2, #16]
 80039f2:	e04e      	b.n	8003a92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0e:	0cdb      	lsrs	r3, r3, #19
 8003a10:	04db      	lsls	r3, r3, #19
 8003a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d903      	bls.n	8003a4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	6939      	ldr	r1, [r7, #16]
 8003a84:	0148      	lsls	r0, r1, #5
 8003a86:	6979      	ldr	r1, [r7, #20]
 8003a88:	4401      	add	r1, r0
 8003a8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d11e      	bne.n	8003ad6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e097      	b.n	8003c06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003af4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8083 	beq.w	8003c06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	634b      	str	r3, [r1, #52]	; 0x34
 8003b20:	e071      	b.n	8003c06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3c:	0cdb      	lsrs	r3, r3, #19
 8003b3e:	04db      	lsls	r3, r3, #19
 8003b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	0151      	lsls	r1, r2, #5
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	440a      	add	r2, r1
 8003b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb4:	6939      	ldr	r1, [r7, #16]
 8003bb6:	0148      	lsls	r0, r1, #5
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	4401      	add	r1, r0
 8003bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10d      	bne.n	8003be6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	460a      	mov	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	785b      	ldrb	r3, [r3, #1]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d14a      	bne.n	8003cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4a:	f040 8086 	bne.w	8003d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d902      	bls.n	8003cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8003caa:	e056      	b.n	8003d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc4:	d0e7      	beq.n	8003c96 <USB_EPStopXfer+0x82>
 8003cc6:	e048      	b.n	8003d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce0:	d13b      	bne.n	8003d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d902      	bls.n	8003d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d3e:	e00c      	b.n	8003d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d58:	d0e7      	beq.n	8003d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	460b      	mov	r3, r1
 8003d78:	71fb      	strb	r3, [r7, #7]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d123      	bne.n	8003dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003d8e:	88bb      	ldrh	r3, [r7, #4]
 8003d90:	3303      	adds	r3, #3
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e018      	b.n	8003dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	031a      	lsls	r2, r3, #12
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	461a      	mov	r2, r3
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3e2      	bcc.n	8003d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3724      	adds	r7, #36	; 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	e014      	b.n	8003e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	3301      	adds	r3, #1
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	3301      	adds	r3, #1
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	3301      	adds	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	3301      	adds	r3, #1
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3e6      	bcc.n	8003e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e42:	8bfb      	ldrh	r3, [r7, #30]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01e      	beq.n	8003e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e52:	461a      	mov	r2, r3
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	3301      	adds	r3, #1
 8003e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	3301      	adds	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003e7a:	8bfb      	ldrh	r3, [r7, #30]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ea      	bne.n	8003e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	372c      	adds	r7, #44	; 0x2c
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12c      	bne.n	8003f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db12      	blt.n	8003ee8 <USB_EPSetStall+0x54>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00f      	beq.n	8003ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e02b      	b.n	8003f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db12      	blt.n	8003f42 <USB_EPSetStall+0xae>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00f      	beq.n	8003f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d128      	bne.n	8003fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <USB_EPClearStall+0x4c>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	791b      	ldrb	r3, [r3, #4]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d138      	bne.n	800402e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e027      	b.n	800402e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d003      	beq.n	800400e <USB_EPClearStall+0x9e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	791b      	ldrb	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d10f      	bne.n	800402e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800405e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b6:	f023 0302 	bic.w	r3, r3, #2
 80040ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040e4:	f023 0303 	bic.w	r3, r3, #3
 80040e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0c1b      	lsrs	r3, r3, #16
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	b29b      	uxth	r3, r3
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041c8:	68bb      	ldr	r3, [r7, #8]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	01db      	lsls	r3, r3, #7
 8004208:	b2db      	uxtb	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004224:	68bb      	ldr	r3, [r7, #8]
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0301 	and.w	r3, r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	460b      	mov	r3, r1
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	333c      	adds	r3, #60	; 0x3c
 80042aa:	3304      	adds	r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4a26      	ldr	r2, [pc, #152]	; (800434c <USB_EP0_OutStart+0xb8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d90a      	bls.n	80042ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c8:	d101      	bne.n	80042ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e037      	b.n	800433e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fc:	f043 0318 	orr.w	r3, r3, #24
 8004300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004310:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004314:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004316:	7afb      	ldrb	r3, [r7, #11]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10f      	bne.n	800433c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800433a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	4f54300a 	.word	0x4f54300a

08004350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <USB_CoreReset+0x64>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e01b      	b.n	80043a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	daf2      	bge.n	800435c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <USB_CoreReset+0x64>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d0f0      	beq.n	8004386 <USB_CoreReset+0x36>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	00030d40 	.word	0x00030d40

080043b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80043c8:	f002 fc9a 	bl	8006d00 <USBD_static_malloc>
 80043cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	32b0      	adds	r2, #176	; 0xb0
 80043de:	2100      	movs	r1, #0
 80043e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80043e4:	2302      	movs	r3, #2
 80043e6:	e0d4      	b.n	8004592 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80043e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80043ec:	2100      	movs	r1, #0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f002 fcca 	bl	8006d88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	32b0      	adds	r2, #176	; 0xb0
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	32b0      	adds	r2, #176	; 0xb0
 800440e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7c1b      	ldrb	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d138      	bne.n	8004492 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004420:	4b5e      	ldr	r3, [pc, #376]	; (800459c <USBD_CDC_Init+0x1e4>)
 8004422:	7819      	ldrb	r1, [r3, #0]
 8004424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004428:	2202      	movs	r2, #2
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f002 fb45 	bl	8006aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004430:	4b5a      	ldr	r3, [pc, #360]	; (800459c <USBD_CDC_Init+0x1e4>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	2201      	movs	r2, #1
 8004448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800444a:	4b55      	ldr	r3, [pc, #340]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 800444c:	7819      	ldrb	r1, [r3, #0]
 800444e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004452:	2202      	movs	r2, #2
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f002 fb30 	bl	8006aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004472:	2201      	movs	r2, #1
 8004474:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <USBD_CDC_Init+0x1ec>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f003 020f 	and.w	r2, r3, #15
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	; 0x26
 800448c:	2210      	movs	r2, #16
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e035      	b.n	80044fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004492:	4b42      	ldr	r3, [pc, #264]	; (800459c <USBD_CDC_Init+0x1e4>)
 8004494:	7819      	ldrb	r1, [r3, #0]
 8004496:	2340      	movs	r3, #64	; 0x40
 8004498:	2202      	movs	r2, #2
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f002 fb0d 	bl	8006aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044a0:	4b3e      	ldr	r3, [pc, #248]	; (800459c <USBD_CDC_Init+0x1e4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3324      	adds	r3, #36	; 0x24
 80044b6:	2201      	movs	r2, #1
 80044b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	2202      	movs	r2, #2
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f002 faf9 	bl	8006aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044c8:	4b35      	ldr	r3, [pc, #212]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80044e0:	2201      	movs	r2, #1
 80044e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80044e4:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <USBD_CDC_Init+0x1ec>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	f003 020f 	and.w	r2, r3, #15
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3326      	adds	r3, #38	; 0x26
 80044fa:	2210      	movs	r2, #16
 80044fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <USBD_CDC_Init+0x1ec>)
 8004500:	7819      	ldrb	r1, [r3, #0]
 8004502:	2308      	movs	r3, #8
 8004504:	2203      	movs	r2, #3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f002 fad7 	bl	8006aba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <USBD_CDC_Init+0x1ec>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2201      	movs	r2, #1
 8004524:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	33b0      	adds	r3, #176	; 0xb0
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800455c:	2302      	movs	r3, #2
 800455e:	e018      	b.n	8004592 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7c1b      	ldrb	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 800456a:	7819      	ldrb	r1, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f002 fb8e 	bl	8006c98 <USBD_LL_PrepareReceive>
 800457c:	e008      	b.n	8004590 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <USBD_CDC_Init+0x1e8>)
 8004580:	7819      	ldrb	r1, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004588:	2340      	movs	r3, #64	; 0x40
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 fb84 	bl	8006c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000093 	.word	0x20000093
 80045a0:	20000094 	.word	0x20000094
 80045a4:	20000095 	.word	0x20000095

080045a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80045b4:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <USBD_CDC_DeInit+0xf8>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f002 faa3 	bl	8006b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80045c0:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <USBD_CDC_DeInit+0xf8>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	2200      	movs	r2, #0
 80045d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <USBD_CDC_DeInit+0xfc>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f002 fa90 	bl	8006b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80045e6:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <USBD_CDC_DeInit+0xfc>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045fe:	2200      	movs	r2, #0
 8004600:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <USBD_CDC_DeInit+0x100>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f002 fa7c 	bl	8006b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <USBD_CDC_DeInit+0x100>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3324      	adds	r3, #36	; 0x24
 8004624:	2200      	movs	r2, #0
 8004626:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <USBD_CDC_DeInit+0x100>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3326      	adds	r3, #38	; 0x26
 800463e:	2200      	movs	r2, #0
 8004640:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	32b0      	adds	r2, #176	; 0xb0
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	33b0      	adds	r3, #176	; 0xb0
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	32b0      	adds	r2, #176	; 0xb0
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fb50 	bl	8006d1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	32b0      	adds	r2, #176	; 0xb0
 8004686:	2100      	movs	r1, #0
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000093 	.word	0x20000093
 80046a4:	20000094 	.word	0x20000094
 80046a8:	20000095 	.word	0x20000095

080046ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	32b0      	adds	r2, #176	; 0xb0
 80046c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0bf      	b.n	800485c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d050      	beq.n	800478a <USBD_CDC_Setup+0xde>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	f040 80af 	bne.w	800484c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	88db      	ldrh	r3, [r3, #6]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03a      	beq.n	800476c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b25b      	sxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da1b      	bge.n	8004738 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	33b0      	adds	r3, #176	; 0xb0
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004716:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	88d2      	ldrh	r2, [r2, #6]
 800471c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	88db      	ldrh	r3, [r3, #6]
 8004722:	2b07      	cmp	r3, #7
 8004724:	bf28      	it	cs
 8004726:	2307      	movcs	r3, #7
 8004728:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	89fa      	ldrh	r2, [r7, #14]
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 fd89 	bl	8006248 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004736:	e090      	b.n	800485a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	785a      	ldrb	r2, [r3, #1]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	88db      	ldrh	r3, [r3, #6]
 8004746:	2b3f      	cmp	r3, #63	; 0x3f
 8004748:	d803      	bhi.n	8004752 <USBD_CDC_Setup+0xa6>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	88db      	ldrh	r3, [r3, #6]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	e000      	b.n	8004754 <USBD_CDC_Setup+0xa8>
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004762:	461a      	mov	r2, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fd9b 	bl	80062a0 <USBD_CtlPrepareRx>
      break;
 800476a:	e076      	b.n	800485a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	33b0      	adds	r3, #176	; 0xb0
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	7850      	ldrb	r0, [r2, #1]
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4798      	blx	r3
      break;
 8004788:	e067      	b.n	800485a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d851      	bhi.n	8004836 <USBD_CDC_Setup+0x18a>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <USBD_CDC_Setup+0xec>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	080047c9 	.word	0x080047c9
 800479c:	08004845 	.word	0x08004845
 80047a0:	08004837 	.word	0x08004837
 80047a4:	08004837 	.word	0x08004837
 80047a8:	08004837 	.word	0x08004837
 80047ac:	08004837 	.word	0x08004837
 80047b0:	08004837 	.word	0x08004837
 80047b4:	08004837 	.word	0x08004837
 80047b8:	08004837 	.word	0x08004837
 80047bc:	08004837 	.word	0x08004837
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	0800481d 	.word	0x0800481d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d107      	bne.n	80047e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047d4:	f107 030a 	add.w	r3, r7, #10
 80047d8:	2202      	movs	r2, #2
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 fd33 	bl	8006248 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047e2:	e032      	b.n	800484a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fcbd 	bl	8006166 <USBD_CtlError>
            ret = USBD_FAIL;
 80047ec:	2303      	movs	r3, #3
 80047ee:	75fb      	strb	r3, [r7, #23]
          break;
 80047f0:	e02b      	b.n	800484a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047fe:	f107 030d 	add.w	r3, r7, #13
 8004802:	2201      	movs	r2, #1
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 fd1e 	bl	8006248 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800480c:	e01d      	b.n	800484a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fca8 	bl	8006166 <USBD_CtlError>
            ret = USBD_FAIL;
 8004816:	2303      	movs	r3, #3
 8004818:	75fb      	strb	r3, [r7, #23]
          break;
 800481a:	e016      	b.n	800484a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d00f      	beq.n	8004848 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 fc9b 	bl	8006166 <USBD_CtlError>
            ret = USBD_FAIL;
 8004830:	2303      	movs	r3, #3
 8004832:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004834:	e008      	b.n	8004848 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f001 fc94 	bl	8006166 <USBD_CtlError>
          ret = USBD_FAIL;
 800483e:	2303      	movs	r3, #3
 8004840:	75fb      	strb	r3, [r7, #23]
          break;
 8004842:	e002      	b.n	800484a <USBD_CDC_Setup+0x19e>
          break;
 8004844:	bf00      	nop
 8004846:	e008      	b.n	800485a <USBD_CDC_Setup+0x1ae>
          break;
 8004848:	bf00      	nop
      }
      break;
 800484a:	e006      	b.n	800485a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fc89 	bl	8006166 <USBD_CtlError>
      ret = USBD_FAIL;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	bf00      	nop
  }

  return (uint8_t)ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	32b0      	adds	r2, #176	; 0xb0
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800488a:	2303      	movs	r3, #3
 800488c:	e065      	b.n	800495a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	32b0      	adds	r2, #176	; 0xb0
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3318      	adds	r3, #24
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02f      	beq.n	8004918 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3318      	adds	r3, #24
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 010f 	and.w	r1, r3, #15
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	460b      	mov	r3, r1
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4403      	add	r3, r0
 80048e0:	3348      	adds	r3, #72	; 0x48
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d112      	bne.n	8004918 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 020f 	and.w	r2, r3, #15
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	3318      	adds	r3, #24
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800490a:	78f9      	ldrb	r1, [r7, #3]
 800490c:	2300      	movs	r3, #0
 800490e:	2200      	movs	r2, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f002 f9a0 	bl	8006c56 <USBD_LL_Transmit>
 8004916:	e01f      	b.n	8004958 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	33b0      	adds	r3, #176	; 0xb0
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d010      	beq.n	8004958 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	33b0      	adds	r3, #176	; 0xb0
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	32b0      	adds	r2, #176	; 0xb0
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	32b0      	adds	r2, #176	; 0xb0
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004990:	2303      	movs	r3, #3
 8004992:	e01a      	b.n	80049ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f002 f99e 	bl	8006cda <USBD_LL_GetRxDataSize>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	33b0      	adds	r3, #176	; 0xb0
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80049c4:	4611      	mov	r1, r2
 80049c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	32b0      	adds	r2, #176	; 0xb0
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e025      	b.n	8004a40 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	33b0      	adds	r3, #176	; 0xb0
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <USBD_CDC_EP0_RxReady+0x6c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a0e:	2bff      	cmp	r3, #255	; 0xff
 8004a10:	d015      	beq.n	8004a3e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	33b0      	adds	r3, #176	; 0xb0
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004a2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a32:	b292      	uxth	r2, r2
 8004a34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a50:	2182      	movs	r1, #130	; 0x82
 8004a52:	4818      	ldr	r0, [pc, #96]	; (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a54:	f000 fd4f 	bl	80054f6 <USBD_GetEpDesc>
 8004a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4815      	ldr	r0, [pc, #84]	; (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a5e:	f000 fd4a 	bl	80054f6 <USBD_GetEpDesc>
 8004a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a64:	2181      	movs	r1, #129	; 0x81
 8004a66:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004a68:	f000 fd45 	bl	80054f6 <USBD_GetEpDesc>
 8004a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2210      	movs	r2, #16
 8004a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a88:	711a      	strb	r2, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d006      	beq.n	8004aa2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9c:	711a      	strb	r2, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2243      	movs	r2, #67	; 0x43
 8004aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000050 	.word	0x20000050

08004ab8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ac0:	2182      	movs	r1, #130	; 0x82
 8004ac2:	4818      	ldr	r0, [pc, #96]	; (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ac4:	f000 fd17 	bl	80054f6 <USBD_GetEpDesc>
 8004ac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004aca:	2101      	movs	r1, #1
 8004acc:	4815      	ldr	r0, [pc, #84]	; (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ace:	f000 fd12 	bl	80054f6 <USBD_GetEpDesc>
 8004ad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ad4:	2181      	movs	r1, #129	; 0x81
 8004ad6:	4813      	ldr	r0, [pc, #76]	; (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ad8:	f000 fd0d 	bl	80054f6 <USBD_GetEpDesc>
 8004adc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	711a      	strb	r2, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f042 0202 	orr.w	r2, r2, #2
 8004afc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	711a      	strb	r2, [r3, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f042 0202 	orr.w	r2, r2, #2
 8004b10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2243      	movs	r2, #67	; 0x43
 8004b16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000050 	.word	0x20000050

08004b28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b30:	2182      	movs	r1, #130	; 0x82
 8004b32:	4818      	ldr	r0, [pc, #96]	; (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b34:	f000 fcdf 	bl	80054f6 <USBD_GetEpDesc>
 8004b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4815      	ldr	r0, [pc, #84]	; (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b3e:	f000 fcda 	bl	80054f6 <USBD_GetEpDesc>
 8004b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b44:	2181      	movs	r1, #129	; 0x81
 8004b46:	4813      	ldr	r0, [pc, #76]	; (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004b48:	f000 fcd5 	bl	80054f6 <USBD_GetEpDesc>
 8004b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2210      	movs	r2, #16
 8004b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b68:	711a      	strb	r2, [r3, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7c:	711a      	strb	r2, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2243      	movs	r2, #67	; 0x43
 8004b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b88:	4b02      	ldr	r3, [pc, #8]	; (8004b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000050 	.word	0x20000050

08004b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ba6:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e009      	b.n	8004be0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	33b0      	adds	r3, #176	; 0xb0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	32b0      	adds	r2, #176	; 0xb0
 8004c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e008      	b.n	8004c24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	32b0      	adds	r2, #176	; 0xb0
 8004c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e004      	b.n	8004c5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	32b0      	adds	r2, #176	; 0xb0
 8004c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	32b0      	adds	r2, #176	; 0xb0
 8004c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e025      	b.n	8004cea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11f      	bne.n	8004ce8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <USBD_CDC_TransmitPacket+0x88>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f003 020f 	and.w	r2, r3, #15
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4403      	add	r3, r0
 8004cca:	3318      	adds	r3, #24
 8004ccc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <USBD_CDC_TransmitPacket+0x88>)
 8004cd0:	7819      	ldrb	r1, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 ffb9 	bl	8006c56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000093 	.word	0x20000093

08004cf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	32b0      	adds	r2, #176	; 0xb0
 8004d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	32b0      	adds	r2, #176	; 0xb0
 8004d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e018      	b.n	8004d58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7c1b      	ldrb	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <USBD_CDC_ReceivePacket+0x68>)
 8004d30:	7819      	ldrb	r1, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 ffab 	bl	8006c98 <USBD_LL_PrepareReceive>
 8004d42:	e008      	b.n	8004d56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <USBD_CDC_ReceivePacket+0x68>)
 8004d46:	7819      	ldrb	r1, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f001 ffa1 	bl	8006c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000094 	.word	0x20000094

08004d64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e01f      	b.n	8004dbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	79fa      	ldrb	r2, [r7, #7]
 8004dae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f001 fe1b 	bl	80069ec <USBD_LL_Init>
 8004db6:	4603      	mov	r3, r0
 8004db8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e025      	b.n	8004e28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	32ae      	adds	r2, #174	; 0xae
 8004dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	32ae      	adds	r2, #174	; 0xae
 8004e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f107 020e 	add.w	r2, r7, #14
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4798      	blx	r3
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 fe23 	bl	8006a84 <USBD_LL_Start>
 8004e3e:	4603      	mov	r3, r0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	4611      	mov	r1, r2
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	78fa      	ldrb	r2, [r7, #3]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f908 	bl	80060f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d01a      	beq.n	8004f3c <USBD_LL_SetupStage+0x72>
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d822      	bhi.n	8004f50 <USBD_LL_SetupStage+0x86>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <USBD_LL_SetupStage+0x4a>
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d00a      	beq.n	8004f28 <USBD_LL_SetupStage+0x5e>
 8004f12:	e01d      	b.n	8004f50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb5f 	bl	80055e0 <USBD_StdDevReq>
 8004f22:	4603      	mov	r3, r0
 8004f24:	73fb      	strb	r3, [r7, #15]
      break;
 8004f26:	e020      	b.n	8004f6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbc7 	bl	80056c4 <USBD_StdItfReq>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3a:	e016      	b.n	8004f6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fc29 	bl	800579c <USBD_StdEPReq>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4e:	e00c      	b.n	8004f6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 fdf0 	bl	8006b44 <USBD_LL_StallEP>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
      break;
 8004f68:	bf00      	nop
  }

  return ret;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f86:	7afb      	ldrb	r3, [r7, #11]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d16e      	bne.n	800506a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	f040 8098 	bne.w	80050d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d913      	bls.n	8004fd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	1ad2      	subs	r2, r2, r3
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	bf28      	it	cs
 8004fc6:	4613      	movcs	r3, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f001 f984 	bl	80062da <USBD_CtlContinueRx>
 8004fd2:	e07d      	b.n	80050d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d014      	beq.n	800500c <USBD_LL_DataOutStage+0x98>
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d81d      	bhi.n	8005022 <USBD_LL_DataOutStage+0xae>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <USBD_LL_DataOutStage+0x7c>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d003      	beq.n	8004ff6 <USBD_LL_DataOutStage+0x82>
 8004fee:	e018      	b.n	8005022 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75bb      	strb	r3, [r7, #22]
            break;
 8004ff4:	e018      	b.n	8005028 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	4619      	mov	r1, r3
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fa5e 	bl	80054c2 <USBD_CoreFindIF>
 8005006:	4603      	mov	r3, r0
 8005008:	75bb      	strb	r3, [r7, #22]
            break;
 800500a:	e00d      	b.n	8005028 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005012:	b2db      	uxtb	r3, r3
 8005014:	4619      	mov	r1, r3
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fa60 	bl	80054dc <USBD_CoreFindEP>
 800501c:	4603      	mov	r3, r0
 800501e:	75bb      	strb	r3, [r7, #22]
            break;
 8005020:	e002      	b.n	8005028 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	75bb      	strb	r3, [r7, #22]
            break;
 8005026:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005028:	7dbb      	ldrb	r3, [r7, #22]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d119      	bne.n	8005062 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b03      	cmp	r3, #3
 8005038:	d113      	bne.n	8005062 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800503a:	7dba      	ldrb	r2, [r7, #22]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	32ae      	adds	r2, #174	; 0xae
 8005040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800504a:	7dba      	ldrb	r2, [r7, #22]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005052:	7dba      	ldrb	r2, [r7, #22]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	32ae      	adds	r2, #174	; 0xae
 8005058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f001 f94a 	bl	80062fc <USBD_CtlSendStatus>
 8005068:	e032      	b.n	80050d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	b2db      	uxtb	r3, r3
 8005072:	4619      	mov	r1, r3
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fa31 	bl	80054dc <USBD_CoreFindEP>
 800507a:	4603      	mov	r3, r0
 800507c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800507e:	7dbb      	ldrb	r3, [r7, #22]
 8005080:	2bff      	cmp	r3, #255	; 0xff
 8005082:	d025      	beq.n	80050d0 <USBD_LL_DataOutStage+0x15c>
 8005084:	7dbb      	ldrb	r3, [r7, #22]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d122      	bne.n	80050d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b03      	cmp	r3, #3
 8005094:	d117      	bne.n	80050c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005096:	7dba      	ldrb	r2, [r7, #22]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	32ae      	adds	r2, #174	; 0xae
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00f      	beq.n	80050c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80050a6:	7dba      	ldrb	r2, [r7, #22]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050ae:	7dba      	ldrb	r2, [r7, #22]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	32ae      	adds	r2, #174	; 0xae
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	7afa      	ldrb	r2, [r7, #11]
 80050bc:	4611      	mov	r1, r2
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	4798      	blx	r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	e000      	b.n	80050d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	460b      	mov	r3, r1
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d16f      	bne.n	80051ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3314      	adds	r3, #20
 80050f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d15a      	bne.n	80051b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	429a      	cmp	r2, r3
 8005108:	d914      	bls.n	8005134 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	461a      	mov	r2, r3
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f001 f8ac 	bl	800627e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005126:	2300      	movs	r3, #0
 8005128:	2200      	movs	r2, #0
 800512a:	2100      	movs	r1, #0
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f001 fdb3 	bl	8006c98 <USBD_LL_PrepareReceive>
 8005132:	e03f      	b.n	80051b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d11c      	bne.n	800517a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005148:	429a      	cmp	r2, r3
 800514a:	d316      	bcc.n	800517a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005156:	429a      	cmp	r2, r3
 8005158:	d20f      	bcs.n	800517a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 f88d 	bl	800627e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800516c:	2300      	movs	r3, #0
 800516e:	2200      	movs	r2, #0
 8005170:	2100      	movs	r1, #0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f001 fd90 	bl	8006c98 <USBD_LL_PrepareReceive>
 8005178:	e01c      	b.n	80051b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d10f      	bne.n	80051a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051a6:	2180      	movs	r1, #128	; 0x80
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f001 fccb 	bl	8006b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f001 f8b7 	bl	8006322 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03a      	beq.n	8005234 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7ff fe42 	bl	8004e48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051cc:	e032      	b.n	8005234 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	4619      	mov	r1, r3
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f97f 	bl	80054dc <USBD_CoreFindEP>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2bff      	cmp	r3, #255	; 0xff
 80051e6:	d025      	beq.n	8005234 <USBD_LL_DataInStage+0x15a>
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d122      	bne.n	8005234 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d11c      	bne.n	8005234 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80051fa:	7dfa      	ldrb	r2, [r7, #23]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	32ae      	adds	r2, #174	; 0xae
 8005200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800520a:	7dfa      	ldrb	r2, [r7, #23]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005212:	7dfa      	ldrb	r2, [r7, #23]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	32ae      	adds	r2, #174	; 0xae
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	7afa      	ldrb	r2, [r7, #11]
 8005220:	4611      	mov	r1, r2
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	4798      	blx	r3
 8005226:	4603      	mov	r3, r0
 8005228:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800522a:	7dbb      	ldrb	r3, [r7, #22]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005230:	7dbb      	ldrb	r3, [r7, #22]
 8005232:	e000      	b.n	8005236 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6852      	ldr	r2, [r2, #4]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	4611      	mov	r1, r2
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	2200      	movs	r2, #0
 80052a8:	2100      	movs	r1, #0
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fc05 	bl	8006aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2240      	movs	r2, #64	; 0x40
 80052bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	2200      	movs	r2, #0
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 fbf7 	bl	8006aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2240      	movs	r2, #64	; 0x40
 80052d6:	621a      	str	r2, [r3, #32]

  return ret;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2204      	movs	r2, #4
 800531c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b04      	cmp	r3, #4
 8005340:	d106      	bne.n	8005350 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d110      	bne.n	8005394 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	32ae      	adds	r2, #174	; 0xae
 80053b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e01c      	b.n	80053fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d115      	bne.n	80053f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32ae      	adds	r2, #174	; 0xae
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	32ae      	adds	r2, #174	; 0xae
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	4611      	mov	r1, r2
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	32ae      	adds	r2, #174	; 0xae
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	e01c      	b.n	800545e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d115      	bne.n	800545c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	32ae      	adds	r2, #174	; 0xae
 800543a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	32ae      	adds	r2, #174	; 0xae
 800544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	4611      	mov	r1, r2
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6852      	ldr	r2, [r2, #4]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	4611      	mov	r1, r2
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054b4:	2303      	movs	r3, #3
 80054b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	885b      	ldrh	r3, [r3, #2]
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	429a      	cmp	r2, r3
 800551c:	d920      	bls.n	8005560 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005526:	e013      	b.n	8005550 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005528:	f107 030a 	add.w	r3, r7, #10
 800552c:	4619      	mov	r1, r3
 800552e:	6978      	ldr	r0, [r7, #20]
 8005530:	f000 f81b 	bl	800556a <USBD_GetNextDesc>
 8005534:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d108      	bne.n	8005550 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	789b      	ldrb	r3, [r3, #2]
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	429a      	cmp	r2, r3
 800554a:	d008      	beq.n	800555e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	885b      	ldrh	r3, [r3, #2]
 8005554:	b29a      	uxth	r2, r3
 8005556:	897b      	ldrh	r3, [r7, #10]
 8005558:	429a      	cmp	r2, r3
 800555a:	d8e5      	bhi.n	8005528 <USBD_GetEpDesc+0x32>
 800555c:	e000      	b.n	8005560 <USBD_GetEpDesc+0x6a>
          break;
 800555e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005560:	693b      	ldr	r3, [r7, #16]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	b29a      	uxth	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055c2:	8a3b      	ldrh	r3, [r7, #16]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055d2:	89fb      	ldrh	r3, [r7, #14]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d005      	beq.n	8005606 <USBD_StdDevReq+0x26>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d857      	bhi.n	80056ae <USBD_StdDevReq+0xce>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00f      	beq.n	8005622 <USBD_StdDevReq+0x42>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d153      	bne.n	80056ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	32ae      	adds	r2, #174	; 0xae
 8005610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	e04a      	b.n	80056b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b09      	cmp	r3, #9
 8005628:	d83b      	bhi.n	80056a2 <USBD_StdDevReq+0xc2>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <USBD_StdDevReq+0x50>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005685 	.word	0x08005685
 8005634:	08005699 	.word	0x08005699
 8005638:	080056a3 	.word	0x080056a3
 800563c:	0800568f 	.word	0x0800568f
 8005640:	080056a3 	.word	0x080056a3
 8005644:	08005663 	.word	0x08005663
 8005648:	08005659 	.word	0x08005659
 800564c:	080056a3 	.word	0x080056a3
 8005650:	0800567b 	.word	0x0800567b
 8005654:	0800566d 	.word	0x0800566d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa3c 	bl	8005ad8 <USBD_GetDescriptor>
          break;
 8005660:	e024      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fba1 	bl	8005dac <USBD_SetAddress>
          break;
 800566a:	e01f      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fbe0 	bl	8005e34 <USBD_SetConfig>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
          break;
 8005678:	e018      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fc83 	bl	8005f88 <USBD_GetConfig>
          break;
 8005682:	e013      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fcb4 	bl	8005ff4 <USBD_GetStatus>
          break;
 800568c:	e00e      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fce3 	bl	800605c <USBD_SetFeature>
          break;
 8005696:	e009      	b.n	80056ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fd07 	bl	80060ae <USBD_ClrFeature>
          break;
 80056a0:	e004      	b.n	80056ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fd5e 	bl	8006166 <USBD_CtlError>
          break;
 80056aa:	bf00      	nop
      }
      break;
 80056ac:	e004      	b.n	80056b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fd58 	bl	8006166 <USBD_CtlError>
      break;
 80056b6:	bf00      	nop
  }

  return ret;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop

080056c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d005      	beq.n	80056ea <USBD_StdItfReq+0x26>
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d852      	bhi.n	8005788 <USBD_StdItfReq+0xc4>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <USBD_StdItfReq+0x26>
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d14e      	bne.n	8005788 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d840      	bhi.n	800577a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	889b      	ldrh	r3, [r3, #4]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d836      	bhi.n	8005770 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	889b      	ldrh	r3, [r3, #4]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fed9 	bl	80054c2 <USBD_CoreFindIF>
 8005710:	4603      	mov	r3, r0
 8005712:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	2bff      	cmp	r3, #255	; 0xff
 8005718:	d01d      	beq.n	8005756 <USBD_StdItfReq+0x92>
 800571a:	7bbb      	ldrb	r3, [r7, #14]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11a      	bne.n	8005756 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005720:	7bba      	ldrb	r2, [r7, #14]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32ae      	adds	r2, #174	; 0xae
 8005726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005730:	7bba      	ldrb	r2, [r7, #14]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005738:	7bba      	ldrb	r2, [r7, #14]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	32ae      	adds	r2, #174	; 0xae
 800573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
 800574a:	4603      	mov	r3, r0
 800574c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800574e:	e004      	b.n	800575a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005750:	2303      	movs	r3, #3
 8005752:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005754:	e001      	b.n	800575a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005756:	2303      	movs	r3, #3
 8005758:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	88db      	ldrh	r3, [r3, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d110      	bne.n	8005784 <USBD_StdItfReq+0xc0>
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10d      	bne.n	8005784 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fdc7 	bl	80062fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800576e:	e009      	b.n	8005784 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fcf7 	bl	8006166 <USBD_CtlError>
          break;
 8005778:	e004      	b.n	8005784 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fcf2 	bl	8006166 <USBD_CtlError>
          break;
 8005782:	e000      	b.n	8005786 <USBD_StdItfReq+0xc2>
          break;
 8005784:	bf00      	nop
      }
      break;
 8005786:	e004      	b.n	8005792 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fceb 	bl	8006166 <USBD_CtlError>
      break;
 8005790:	bf00      	nop
  }

  return ret;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	889b      	ldrh	r3, [r3, #4]
 80057ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d007      	beq.n	80057cc <USBD_StdEPReq+0x30>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	f200 817f 	bhi.w	8005ac0 <USBD_StdEPReq+0x324>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02a      	beq.n	800581c <USBD_StdEPReq+0x80>
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	f040 817a 	bne.w	8005ac0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff fe83 	bl	80054dc <USBD_CoreFindEP>
 80057d6:	4603      	mov	r3, r0
 80057d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057da:	7b7b      	ldrb	r3, [r7, #13]
 80057dc:	2bff      	cmp	r3, #255	; 0xff
 80057de:	f000 8174 	beq.w	8005aca <USBD_StdEPReq+0x32e>
 80057e2:	7b7b      	ldrb	r3, [r7, #13]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 8170 	bne.w	8005aca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80057ea:	7b7a      	ldrb	r2, [r7, #13]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80057f2:	7b7a      	ldrb	r2, [r7, #13]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	32ae      	adds	r2, #174	; 0xae
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8163 	beq.w	8005aca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005804:	7b7a      	ldrb	r2, [r7, #13]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32ae      	adds	r2, #174	; 0xae
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800581a:	e156      	b.n	8005aca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d008      	beq.n	8005836 <USBD_StdEPReq+0x9a>
 8005824:	2b03      	cmp	r3, #3
 8005826:	f300 8145 	bgt.w	8005ab4 <USBD_StdEPReq+0x318>
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 809b 	beq.w	8005966 <USBD_StdEPReq+0x1ca>
 8005830:	2b01      	cmp	r3, #1
 8005832:	d03c      	beq.n	80058ae <USBD_StdEPReq+0x112>
 8005834:	e13e      	b.n	8005ab4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d002      	beq.n	8005848 <USBD_StdEPReq+0xac>
 8005842:	2b03      	cmp	r3, #3
 8005844:	d016      	beq.n	8005874 <USBD_StdEPReq+0xd8>
 8005846:	e02c      	b.n	80058a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <USBD_StdEPReq+0xce>
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d00a      	beq.n	800586a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 f973 	bl	8006b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 f96f 	bl	8006b44 <USBD_LL_StallEP>
 8005866:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005868:	e020      	b.n	80058ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fc7a 	bl	8006166 <USBD_CtlError>
              break;
 8005872:	e01b      	b.n	80058ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	885b      	ldrh	r3, [r3, #2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10e      	bne.n	800589a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <USBD_StdEPReq+0xfe>
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	2b80      	cmp	r3, #128	; 0x80
 8005886:	d008      	beq.n	800589a <USBD_StdEPReq+0xfe>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	88db      	ldrh	r3, [r3, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005890:	7bbb      	ldrb	r3, [r7, #14]
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f955 	bl	8006b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fd2e 	bl	80062fc <USBD_CtlSendStatus>

              break;
 80058a0:	e004      	b.n	80058ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fc5e 	bl	8006166 <USBD_CtlError>
              break;
 80058aa:	bf00      	nop
          }
          break;
 80058ac:	e107      	b.n	8005abe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d002      	beq.n	80058c0 <USBD_StdEPReq+0x124>
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d016      	beq.n	80058ec <USBD_StdEPReq+0x150>
 80058be:	e04b      	b.n	8005958 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <USBD_StdEPReq+0x146>
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d00a      	beq.n	80058e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 f937 	bl	8006b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 f933 	bl	8006b44 <USBD_LL_StallEP>
 80058de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058e0:	e040      	b.n	8005964 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fc3e 	bl	8006166 <USBD_CtlError>
              break;
 80058ea:	e03b      	b.n	8005964 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	885b      	ldrh	r3, [r3, #2]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d136      	bne.n	8005962 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 f93d 	bl	8006b82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fcf7 	bl	80062fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fde2 	bl	80054dc <USBD_CoreFindEP>
 8005918:	4603      	mov	r3, r0
 800591a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800591c:	7b7b      	ldrb	r3, [r7, #13]
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	d01f      	beq.n	8005962 <USBD_StdEPReq+0x1c6>
 8005922:	7b7b      	ldrb	r3, [r7, #13]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11c      	bne.n	8005962 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005928:	7b7a      	ldrb	r2, [r7, #13]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005930:	7b7a      	ldrb	r2, [r7, #13]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	32ae      	adds	r2, #174	; 0xae
 8005936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005940:	7b7a      	ldrb	r2, [r7, #13]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	32ae      	adds	r2, #174	; 0xae
 8005946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005956:	e004      	b.n	8005962 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fc03 	bl	8006166 <USBD_CtlError>
              break;
 8005960:	e000      	b.n	8005964 <USBD_StdEPReq+0x1c8>
              break;
 8005962:	bf00      	nop
          }
          break;
 8005964:	e0ab      	b.n	8005abe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d002      	beq.n	8005978 <USBD_StdEPReq+0x1dc>
 8005972:	2b03      	cmp	r3, #3
 8005974:	d032      	beq.n	80059dc <USBD_StdEPReq+0x240>
 8005976:	e097      	b.n	8005aa8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <USBD_StdEPReq+0x1f2>
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d004      	beq.n	800598e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fbed 	bl	8006166 <USBD_CtlError>
                break;
 800598c:	e091      	b.n	8005ab2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800598e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da0b      	bge.n	80059ae <USBD_StdEPReq+0x212>
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	3310      	adds	r3, #16
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	3304      	adds	r3, #4
 80059ac:	e00b      	b.n	80059c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	3304      	adds	r3, #4
 80059c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2202      	movs	r2, #2
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fc37 	bl	8006248 <USBD_CtlSendData>
              break;
 80059da:	e06a      	b.n	8005ab2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	da11      	bge.n	8005a08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3324      	adds	r3, #36	; 0x24
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d117      	bne.n	8005a2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fbb0 	bl	8006166 <USBD_CtlError>
                  break;
 8005a06:	e054      	b.n	8005ab2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	f003 020f 	and.w	r2, r3, #15
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fb9d 	bl	8006166 <USBD_CtlError>
                  break;
 8005a2c:	e041      	b.n	8005ab2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da0b      	bge.n	8005a4e <USBD_StdEPReq+0x2b2>
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	3310      	adds	r3, #16
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	e00b      	b.n	8005a66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	3304      	adds	r3, #4
 8005a66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <USBD_StdEPReq+0x2d8>
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d103      	bne.n	8005a7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e00e      	b.n	8005a9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 f89d 	bl	8006bc0 <USBD_LL_IsStallEP>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fbd1 	bl	8006248 <USBD_CtlSendData>
              break;
 8005aa6:	e004      	b.n	8005ab2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb5b 	bl	8006166 <USBD_CtlError>
              break;
 8005ab0:	bf00      	nop
          }
          break;
 8005ab2:	e004      	b.n	8005abe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb55 	bl	8006166 <USBD_CtlError>
          break;
 8005abc:	bf00      	nop
      }
      break;
 8005abe:	e005      	b.n	8005acc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fb4f 	bl	8006166 <USBD_CtlError>
      break;
 8005ac8:	e000      	b.n	8005acc <USBD_StdEPReq+0x330>
      break;
 8005aca:	bf00      	nop
  }

  return ret;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	885b      	ldrh	r3, [r3, #2]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	f200 8128 	bhi.w	8005d4e <USBD_GetDescriptor+0x276>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <USBD_GetDescriptor+0x2c>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b39 	.word	0x08005b39
 8005b0c:	08005b79 	.word	0x08005b79
 8005b10:	08005d4f 	.word	0x08005d4f
 8005b14:	08005d4f 	.word	0x08005d4f
 8005b18:	08005cef 	.word	0x08005cef
 8005b1c:	08005d1b 	.word	0x08005d1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	7c12      	ldrb	r2, [r2, #16]
 8005b2c:	f107 0108 	add.w	r1, r7, #8
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
 8005b34:	60f8      	str	r0, [r7, #12]
      break;
 8005b36:	e112      	b.n	8005d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	7c1b      	ldrb	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10d      	bne.n	8005b5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f107 0208 	add.w	r2, r7, #8
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	2202      	movs	r2, #2
 8005b58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b5a:	e100      	b.n	8005d5e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	f107 0208 	add.w	r2, r7, #8
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
 8005b6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	2202      	movs	r2, #2
 8005b74:	701a      	strb	r2, [r3, #0]
      break;
 8005b76:	e0f2      	b.n	8005d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	885b      	ldrh	r3, [r3, #2]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	f200 80ac 	bhi.w	8005cdc <USBD_GetDescriptor+0x204>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <USBD_GetDescriptor+0xb4>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bd9 	.word	0x08005bd9
 8005b94:	08005c0d 	.word	0x08005c0d
 8005b98:	08005c41 	.word	0x08005c41
 8005b9c:	08005c75 	.word	0x08005c75
 8005ba0:	08005ca9 	.word	0x08005ca9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	7c12      	ldrb	r2, [r2, #16]
 8005bbc:	f107 0108 	add.w	r1, r7, #8
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bc6:	e091      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 facb 	bl	8006166 <USBD_CtlError>
            err++;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bd6:	e089      	b.n	8005cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	7c12      	ldrb	r2, [r2, #16]
 8005bf0:	f107 0108 	add.w	r1, r7, #8
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4798      	blx	r3
 8005bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bfa:	e077      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fab1 	bl	8006166 <USBD_CtlError>
            err++;
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	3301      	adds	r3, #1
 8005c08:	72fb      	strb	r3, [r7, #11]
          break;
 8005c0a:	e06f      	b.n	8005cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	7c12      	ldrb	r2, [r2, #16]
 8005c24:	f107 0108 	add.w	r1, r7, #8
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4798      	blx	r3
 8005c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c2e:	e05d      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa97 	bl	8006166 <USBD_CtlError>
            err++;
 8005c38:	7afb      	ldrb	r3, [r7, #11]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c3e:	e055      	b.n	8005cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	7c12      	ldrb	r2, [r2, #16]
 8005c58:	f107 0108 	add.w	r1, r7, #8
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
 8005c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c62:	e043      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa7d 	bl	8006166 <USBD_CtlError>
            err++;
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	72fb      	strb	r3, [r7, #11]
          break;
 8005c72:	e03b      	b.n	8005cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	7c12      	ldrb	r2, [r2, #16]
 8005c8c:	f107 0108 	add.w	r1, r7, #8
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c96:	e029      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa63 	bl	8006166 <USBD_CtlError>
            err++;
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ca6:	e021      	b.n	8005cec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	7c12      	ldrb	r2, [r2, #16]
 8005cc0:	f107 0108 	add.w	r1, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cca:	e00f      	b.n	8005cec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa49 	bl	8006166 <USBD_CtlError>
            err++;
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cda:	e007      	b.n	8005cec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa41 	bl	8006166 <USBD_CtlError>
          err++;
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005cea:	bf00      	nop
      }
      break;
 8005cec:	e037      	b.n	8005d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7c1b      	ldrb	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	f107 0208 	add.w	r2, r7, #8
 8005d02:	4610      	mov	r0, r2
 8005d04:	4798      	blx	r3
 8005d06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d08:	e029      	b.n	8005d5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa2a 	bl	8006166 <USBD_CtlError>
        err++;
 8005d12:	7afb      	ldrb	r3, [r7, #11]
 8005d14:	3301      	adds	r3, #1
 8005d16:	72fb      	strb	r3, [r7, #11]
      break;
 8005d18:	e021      	b.n	8005d5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7c1b      	ldrb	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	f107 0208 	add.w	r2, r7, #8
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4798      	blx	r3
 8005d32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	2207      	movs	r2, #7
 8005d3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d3c:	e00f      	b.n	8005d5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fa10 	bl	8006166 <USBD_CtlError>
        err++;
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d4c:	e007      	b.n	8005d5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa08 	bl	8006166 <USBD_CtlError>
      err++;
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d5c:	bf00      	nop
  }

  if (err != 0U)
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11e      	bne.n	8005da2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	88db      	ldrh	r3, [r3, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d016      	beq.n	8005d9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d6c:	893b      	ldrh	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00e      	beq.n	8005d90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	88da      	ldrh	r2, [r3, #6]
 8005d76:	893b      	ldrh	r3, [r7, #8]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bf28      	it	cs
 8005d7c:	4613      	movcs	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d82:	893b      	ldrh	r3, [r7, #8]
 8005d84:	461a      	mov	r2, r3
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa5d 	bl	8006248 <USBD_CtlSendData>
 8005d8e:	e009      	b.n	8005da4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9e7 	bl	8006166 <USBD_CtlError>
 8005d98:	e004      	b.n	8005da4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 faae 	bl	80062fc <USBD_CtlSendStatus>
 8005da0:	e000      	b.n	8005da4 <USBD_GetDescriptor+0x2cc>
    return;
 8005da2:	bf00      	nop
  }
}
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop

08005dac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	889b      	ldrh	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d131      	bne.n	8005e22 <USBD_SetAddress+0x76>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	88db      	ldrh	r3, [r3, #6]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d12d      	bne.n	8005e22 <USBD_SetAddress+0x76>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	885b      	ldrh	r3, [r3, #2]
 8005dca:	2b7f      	cmp	r3, #127	; 0x7f
 8005dcc:	d829      	bhi.n	8005e22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d104      	bne.n	8005df0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f9bc 	bl	8006166 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dee:	e01d      	b.n	8005e2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 ff0b 	bl	8006c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa7a 	bl	80062fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e16:	e009      	b.n	8005e2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e20:	e004      	b.n	8005e2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f99e 	bl	8006166 <USBD_CtlError>
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	885b      	ldrh	r3, [r3, #2]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	4b4e      	ldr	r3, [pc, #312]	; (8005f84 <USBD_SetConfig+0x150>)
 8005e4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e4c:	4b4d      	ldr	r3, [pc, #308]	; (8005f84 <USBD_SetConfig+0x150>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d905      	bls.n	8005e60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f985 	bl	8006166 <USBD_CtlError>
    return USBD_FAIL;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e08c      	b.n	8005f7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d002      	beq.n	8005e72 <USBD_SetConfig+0x3e>
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d029      	beq.n	8005ec4 <USBD_SetConfig+0x90>
 8005e70:	e075      	b.n	8005f5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e72:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <USBD_SetConfig+0x150>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d020      	beq.n	8005ebc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e7a:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <USBD_SetConfig+0x150>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e84:	4b3f      	ldr	r3, [pc, #252]	; (8005f84 <USBD_SetConfig+0x150>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fe ffe7 	bl	8004e5e <USBD_SetClassConfig>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f962 	bl	8006166 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005eaa:	e065      	b.n	8005f78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa25 	bl	80062fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005eba:	e05d      	b.n	8005f78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa1d 	bl	80062fc <USBD_CtlSendStatus>
      break;
 8005ec2:	e059      	b.n	8005f78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ec4:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <USBD_SetConfig+0x150>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d112      	bne.n	8005ef2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <USBD_SetConfig+0x150>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <USBD_SetConfig+0x150>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fe ffd6 	bl	8004e96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa06 	bl	80062fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ef0:	e042      	b.n	8005f78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <USBD_SetConfig+0x150>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d02a      	beq.n	8005f56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fe ffc4 	bl	8004e96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <USBD_SetConfig+0x150>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <USBD_SetConfig+0x150>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe ff9d 	bl	8004e5e <USBD_SetClassConfig>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00f      	beq.n	8005f4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f918 	bl	8006166 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fe ffa9 	bl	8004e96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f4c:	e014      	b.n	8005f78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9d4 	bl	80062fc <USBD_CtlSendStatus>
      break;
 8005f54:	e010      	b.n	8005f78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9d0 	bl	80062fc <USBD_CtlSendStatus>
      break;
 8005f5c:	e00c      	b.n	8005f78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f900 	bl	8006166 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <USBD_SetConfig+0x150>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fe ff92 	bl	8004e96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f72:	2303      	movs	r3, #3
 8005f74:	73fb      	strb	r3, [r7, #15]
      break;
 8005f76:	bf00      	nop
  }

  return ret;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	2000011c 	.word	0x2000011c

08005f88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d004      	beq.n	8005fa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f8e2 	bl	8006166 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fa2:	e023      	b.n	8005fec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	dc02      	bgt.n	8005fb6 <USBD_GetConfig+0x2e>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dc03      	bgt.n	8005fbc <USBD_GetConfig+0x34>
 8005fb4:	e015      	b.n	8005fe2 <USBD_GetConfig+0x5a>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d00b      	beq.n	8005fd2 <USBD_GetConfig+0x4a>
 8005fba:	e012      	b.n	8005fe2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f93c 	bl	8006248 <USBD_CtlSendData>
        break;
 8005fd0:	e00c      	b.n	8005fec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f934 	bl	8006248 <USBD_CtlSendData>
        break;
 8005fe0:	e004      	b.n	8005fec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f8be 	bl	8006166 <USBD_CtlError>
        break;
 8005fea:	bf00      	nop
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006004:	b2db      	uxtb	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	2b02      	cmp	r3, #2
 800600a:	d81e      	bhi.n	800604a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	88db      	ldrh	r3, [r3, #6]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d004      	beq.n	800601e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8a5 	bl	8006166 <USBD_CtlError>
        break;
 800601c:	e01a      	b.n	8006054 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f043 0202 	orr.w	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	330c      	adds	r3, #12
 800603e:	2202      	movs	r2, #2
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f900 	bl	8006248 <USBD_CtlSendData>
      break;
 8006048:	e004      	b.n	8006054 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f88a 	bl	8006166 <USBD_CtlError>
      break;
 8006052:	bf00      	nop
  }
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	885b      	ldrh	r3, [r3, #2]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d107      	bne.n	800607e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f940 	bl	80062fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800607c:	e013      	b.n	80060a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	885b      	ldrh	r3, [r3, #2]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d10b      	bne.n	800609e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	889b      	ldrh	r3, [r3, #4]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	b29b      	uxth	r3, r3
 800608e:	b2da      	uxtb	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f930 	bl	80062fc <USBD_CtlSendStatus>
}
 800609c:	e003      	b.n	80060a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f860 	bl	8006166 <USBD_CtlError>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d80b      	bhi.n	80060de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	885b      	ldrh	r3, [r3, #2]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10c      	bne.n	80060e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f910 	bl	80062fc <USBD_CtlSendStatus>
      }
      break;
 80060dc:	e004      	b.n	80060e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f840 	bl	8006166 <USBD_CtlError>
      break;
 80060e6:	e000      	b.n	80060ea <USBD_ClrFeature+0x3c>
      break;
 80060e8:	bf00      	nop
  }
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fa41 	bl	80055a4 <SWAPBYTE>
 8006122:	4603      	mov	r3, r0
 8006124:	461a      	mov	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3301      	adds	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff fa34 	bl	80055a4 <SWAPBYTE>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fa27 	bl	80055a4 <SWAPBYTE>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	80da      	strh	r2, [r3, #6]
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fce6 	bl	8006b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006178:	2100      	movs	r1, #0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fce2 	bl	8006b44 <USBD_LL_StallEP>
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d036      	beq.n	800620c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061a2:	6938      	ldr	r0, [r7, #16]
 80061a4:	f000 f836 	bl	8006214 <USBD_GetLen>
 80061a8:	4603      	mov	r3, r0
 80061aa:	3301      	adds	r3, #1
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	4413      	add	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	3301      	adds	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4413      	add	r3, r2
 80061ce:	2203      	movs	r2, #3
 80061d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	3301      	adds	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061d8:	e013      	b.n	8006202 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	7812      	ldrb	r2, [r2, #0]
 80061e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	613b      	str	r3, [r7, #16]
    idx++;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
 80061ee:	3301      	adds	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4413      	add	r3, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	3301      	adds	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e7      	bne.n	80061da <USBD_GetString+0x52>
 800620a:	e000      	b.n	800620e <USBD_GetString+0x86>
    return;
 800620c:	bf00      	nop
  }
}
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006224:	e005      	b.n	8006232 <USBD_GetLen+0x1e>
  {
    len++;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	3301      	adds	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	3301      	adds	r3, #1
 8006230:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f5      	bne.n	8006226 <USBD_GetLen+0x12>
  }

  return len;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2202      	movs	r2, #2
 8006258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	2100      	movs	r1, #0
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fcf1 	bl	8006c56 <USBD_LL_Transmit>

  return USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fce0 	bl	8006c56 <USBD_LL_Transmit>

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2203      	movs	r2, #3
 80062b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	2100      	movs	r1, #0
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fce4 	bl	8006c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	2100      	movs	r1, #0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fcd3 	bl	8006c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800630c:	2300      	movs	r3, #0
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc9f 	bl	8006c56 <USBD_LL_Transmit>

  return USBD_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2205      	movs	r2, #5
 800632e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006332:	2300      	movs	r3, #0
 8006334:	2200      	movs	r2, #0
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fcad 	bl	8006c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800634c:	2200      	movs	r2, #0
 800634e:	4912      	ldr	r1, [pc, #72]	; (8006398 <MX_USB_DEVICE_Init+0x50>)
 8006350:	4812      	ldr	r0, [pc, #72]	; (800639c <MX_USB_DEVICE_Init+0x54>)
 8006352:	f7fe fd07 	bl	8004d64 <USBD_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800635c:	f7fa f94e 	bl	80005fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006360:	490f      	ldr	r1, [pc, #60]	; (80063a0 <MX_USB_DEVICE_Init+0x58>)
 8006362:	480e      	ldr	r0, [pc, #56]	; (800639c <MX_USB_DEVICE_Init+0x54>)
 8006364:	f7fe fd2e 	bl	8004dc4 <USBD_RegisterClass>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800636e:	f7fa f945 	bl	80005fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006372:	490c      	ldr	r1, [pc, #48]	; (80063a4 <MX_USB_DEVICE_Init+0x5c>)
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <MX_USB_DEVICE_Init+0x54>)
 8006376:	f7fe fc1f 	bl	8004bb8 <USBD_CDC_RegisterInterface>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006380:	f7fa f93c 	bl	80005fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006384:	4805      	ldr	r0, [pc, #20]	; (800639c <MX_USB_DEVICE_Init+0x54>)
 8006386:	f7fe fd53 	bl	8004e30 <USBD_Start>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006390:	f7fa f934 	bl	80005fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006394:	bf00      	nop
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200000ac 	.word	0x200000ac
 800639c:	20000120 	.word	0x20000120
 80063a0:	20000018 	.word	0x20000018
 80063a4:	20000098 	.word	0x20000098

080063a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063ac:	2200      	movs	r2, #0
 80063ae:	4905      	ldr	r1, [pc, #20]	; (80063c4 <CDC_Init_FS+0x1c>)
 80063b0:	4805      	ldr	r0, [pc, #20]	; (80063c8 <CDC_Init_FS+0x20>)
 80063b2:	f7fe fc1b 	bl	8004bec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063b6:	4905      	ldr	r1, [pc, #20]	; (80063cc <CDC_Init_FS+0x24>)
 80063b8:	4803      	ldr	r0, [pc, #12]	; (80063c8 <CDC_Init_FS+0x20>)
 80063ba:	f7fe fc39 	bl	8004c30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20000bfc 	.word	0x20000bfc
 80063c8:	20000120 	.word	0x20000120
 80063cc:	200003fc 	.word	0x200003fc

080063d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
 80063ec:	4613      	mov	r3, r2
 80063ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	2b23      	cmp	r3, #35	; 0x23
 80063f4:	d84a      	bhi.n	800648c <CDC_Control_FS+0xac>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <CDC_Control_FS+0x1c>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	0800648d 	.word	0x0800648d
 8006400:	0800648d 	.word	0x0800648d
 8006404:	0800648d 	.word	0x0800648d
 8006408:	0800648d 	.word	0x0800648d
 800640c:	0800648d 	.word	0x0800648d
 8006410:	0800648d 	.word	0x0800648d
 8006414:	0800648d 	.word	0x0800648d
 8006418:	0800648d 	.word	0x0800648d
 800641c:	0800648d 	.word	0x0800648d
 8006420:	0800648d 	.word	0x0800648d
 8006424:	0800648d 	.word	0x0800648d
 8006428:	0800648d 	.word	0x0800648d
 800642c:	0800648d 	.word	0x0800648d
 8006430:	0800648d 	.word	0x0800648d
 8006434:	0800648d 	.word	0x0800648d
 8006438:	0800648d 	.word	0x0800648d
 800643c:	0800648d 	.word	0x0800648d
 8006440:	0800648d 	.word	0x0800648d
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800648d 	.word	0x0800648d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	0800648d 	.word	0x0800648d
 8006454:	0800648d 	.word	0x0800648d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800648d 	.word	0x0800648d
 8006460:	0800648d 	.word	0x0800648d
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	0800648d 	.word	0x0800648d
 8006474:	0800648d 	.word	0x0800648d
 8006478:	0800648d 	.word	0x0800648d
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800648d 	.word	0x0800648d
 8006484:	0800648d 	.word	0x0800648d
 8006488:	0800648d 	.word	0x0800648d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800648c:	bf00      	nop
  }

  return (USBD_OK);
 800648e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4808      	ldr	r0, [pc, #32]	; (80064cc <CDC_Receive_FS+0x30>)
 80064aa:	f7fe fbc1 	bl	8004c30 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064ae:	4807      	ldr	r0, [pc, #28]	; (80064cc <CDC_Receive_FS+0x30>)
 80064b0:	f7fe fc22 	bl	8004cf8 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f807 	bl	80064d0 <CDC_Transmit_FS>
	return (USBD_OK);
 80064c2:	2300      	movs	r3, #0
	return (USBD_OK);
  /* USER CODE END 6 */
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000120 	.word	0x20000120

080064d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80064e0:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <CDC_Transmit_FS+0x48>)
 80064e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e00b      	b.n	800650e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80064f6:	887b      	ldrh	r3, [r7, #2]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4806      	ldr	r0, [pc, #24]	; (8006518 <CDC_Transmit_FS+0x48>)
 80064fe:	f7fe fb75 	bl	8004bec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006502:	4805      	ldr	r0, [pc, #20]	; (8006518 <CDC_Transmit_FS+0x48>)
 8006504:	f7fe fbb2 	bl	8004c6c <USBD_CDC_TransmitPacket>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000120 	.word	0x20000120

0800651c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800652e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006532:	4618      	mov	r0, r3
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2212      	movs	r2, #18
 8006550:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006552:	4b03      	ldr	r3, [pc, #12]	; (8006560 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	200000c8 	.word	0x200000c8

08006564 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2204      	movs	r2, #4
 8006574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006576:	4b03      	ldr	r3, [pc, #12]	; (8006584 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	200000dc 	.word	0x200000dc

08006588 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	6039      	str	r1, [r7, #0]
 8006592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d105      	bne.n	80065a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	4907      	ldr	r1, [pc, #28]	; (80065bc <USBD_FS_ProductStrDescriptor+0x34>)
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80065a0:	f7ff fdf2 	bl	8006188 <USBD_GetString>
 80065a4:	e004      	b.n	80065b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	4904      	ldr	r1, [pc, #16]	; (80065bc <USBD_FS_ProductStrDescriptor+0x34>)
 80065aa:	4805      	ldr	r0, [pc, #20]	; (80065c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80065ac:	f7ff fdec 	bl	8006188 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065b0:	4b02      	ldr	r3, [pc, #8]	; (80065bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200013fc 	.word	0x200013fc
 80065c0:	08006df8 	.word	0x08006df8

080065c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	4904      	ldr	r1, [pc, #16]	; (80065e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80065d4:	4804      	ldr	r0, [pc, #16]	; (80065e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80065d6:	f7ff fdd7 	bl	8006188 <USBD_GetString>
  return USBD_StrDesc;
 80065da:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200013fc 	.word	0x200013fc
 80065e8:	08006e10 	.word	0x08006e10

080065ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	221a      	movs	r2, #26
 80065fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065fe:	f000 f843 	bl	8006688 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006602:	4b02      	ldr	r3, [pc, #8]	; (800660c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200000e0 	.word	0x200000e0

08006610 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4907      	ldr	r1, [pc, #28]	; (8006644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006628:	f7ff fdae 	bl	8006188 <USBD_GetString>
 800662c:	e004      	b.n	8006638 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4904      	ldr	r1, [pc, #16]	; (8006644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006634:	f7ff fda8 	bl	8006188 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200013fc 	.word	0x200013fc
 8006648:	08006e24 	.word	0x08006e24

0800664c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d105      	bne.n	800666a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4907      	ldr	r1, [pc, #28]	; (8006680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006662:	4808      	ldr	r0, [pc, #32]	; (8006684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006664:	f7ff fd90 	bl	8006188 <USBD_GetString>
 8006668:	e004      	b.n	8006674 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	4904      	ldr	r1, [pc, #16]	; (8006680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800666e:	4805      	ldr	r0, [pc, #20]	; (8006684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006670:	f7ff fd8a 	bl	8006188 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006674:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200013fc 	.word	0x200013fc
 8006684:	08006e30 	.word	0x08006e30

08006688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <Get_SerialNum+0x44>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <Get_SerialNum+0x48>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <Get_SerialNum+0x4c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80066ae:	2208      	movs	r2, #8
 80066b0:	4909      	ldr	r1, [pc, #36]	; (80066d8 <Get_SerialNum+0x50>)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f814 	bl	80066e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80066b8:	2204      	movs	r2, #4
 80066ba:	4908      	ldr	r1, [pc, #32]	; (80066dc <Get_SerialNum+0x54>)
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f000 f80f 	bl	80066e0 <IntToUnicode>
  }
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	1fff7a10 	.word	0x1fff7a10
 80066d0:	1fff7a14 	.word	0x1fff7a14
 80066d4:	1fff7a18 	.word	0x1fff7a18
 80066d8:	200000e2 	.word	0x200000e2
 80066dc:	200000f2 	.word	0x200000f2

080066e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
 80066f6:	e027      	b.n	8006748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	0f1b      	lsrs	r3, r3, #28
 80066fc:	2b09      	cmp	r3, #9
 80066fe:	d80b      	bhi.n	8006718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	0f1b      	lsrs	r3, r3, #28
 8006704:	b2da      	uxtb	r2, r3
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4619      	mov	r1, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	440b      	add	r3, r1
 8006710:	3230      	adds	r2, #48	; 0x30
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e00a      	b.n	800672e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	0f1b      	lsrs	r3, r3, #28
 800671c:	b2da      	uxtb	r2, r3
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4619      	mov	r1, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	440b      	add	r3, r1
 8006728:	3237      	adds	r2, #55	; 0x37
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	3301      	adds	r3, #1
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4413      	add	r3, r2
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	3301      	adds	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
 8006748:	7dfa      	ldrb	r2, [r7, #23]
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d3d3      	bcc.n	80066f8 <IntToUnicode+0x18>
  }
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006768:	f107 0314 	add.w	r3, r7, #20
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006780:	d13a      	bne.n	80067f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	6313      	str	r3, [r2, #48]	; 0x30
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800679e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80067a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a4:	2302      	movs	r3, #2
 80067a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ac:	2303      	movs	r3, #3
 80067ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067b0:	230a      	movs	r3, #10
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067b4:	f107 0314 	add.w	r3, r7, #20
 80067b8:	4619      	mov	r1, r3
 80067ba:	4812      	ldr	r0, [pc, #72]	; (8006804 <HAL_PCD_MspInit+0xa4>)
 80067bc:	f7fa f964 	bl	8000a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	4a0e      	ldr	r2, [pc, #56]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 80067c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ca:	6353      	str	r3, [r2, #52]	; 0x34
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 80067d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067da:	6453      	str	r3, [r2, #68]	; 0x44
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_PCD_MspInit+0xa0>)
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	2043      	movs	r0, #67	; 0x43
 80067ee:	f7fa f914 	bl	8000a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067f2:	2043      	movs	r0, #67	; 0x43
 80067f4:	f7fa f92d 	bl	8000a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067f8:	bf00      	nop
 80067fa:	3728      	adds	r7, #40	; 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	40020000 	.word	0x40020000

08006808 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f7fe fb53 	bl	8004eca <USBD_LL_SetupStage>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	4619      	mov	r1, r3
 8006856:	f7fe fb8d 	bl	8004f74 <USBD_LL_DataOutStage>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	334c      	adds	r3, #76	; 0x4c
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	4619      	mov	r1, r3
 800688a:	f7fe fc26 	bl	80050da <USBD_LL_DataInStage>
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe fd5a 	bl	800535e <USBD_LL_SOF>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80068ba:	2301      	movs	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
 80068ca:	e008      	b.n	80068de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d102      	bne.n	80068da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
 80068d8:	e001      	b.n	80068de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80068da:	f7f9 fe8f 	bl	80005fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068e4:	7bfa      	ldrb	r2, [r7, #15]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fcfa 	bl	80052e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fca2 	bl	800523e <USBD_LL_Reset>
}
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fcf5 	bl	8005302 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <HAL_PCD_SuspendCallback+0x48>)
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	4a03      	ldr	r2, [pc, #12]	; (800694c <HAL_PCD_SuspendCallback+0x48>)
 800693e:	f043 0306 	orr.w	r3, r3, #6
 8006942:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	e000ed00 	.word	0xe000ed00

08006950 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fce5 	bl	800532e <USBD_LL_Resume>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	4611      	mov	r1, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fd3d 	bl	8005402 <USBD_LL_IsoOUTIncomplete>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fcf9 	bl	800539e <USBD_LL_IsoINIncomplete>
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fd4f 	bl	8005466 <USBD_LL_DevConnected>
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fd4c 	bl	800547c <USBD_LL_DevDisconnected>
}
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d13c      	bne.n	8006a76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <USBD_LL_Init+0x94>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a0c:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a16:	2204      	movs	r2, #4
 8006a18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a1a:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a26:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a28:	2202      	movs	r2, #2
 8006a2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006a2c:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006a32:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a4a:	480d      	ldr	r0, [pc, #52]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a4c:	f7fa f9b8 	bl	8000dc0 <HAL_PCD_Init>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a56:	f7f9 fdd1 	bl	80005fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	4808      	ldr	r0, [pc, #32]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a5e:	f7fb fc10 	bl	8002282 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a62:	2240      	movs	r2, #64	; 0x40
 8006a64:	2100      	movs	r1, #0
 8006a66:	4806      	ldr	r0, [pc, #24]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a68:	f7fb fbc4 	bl	80021f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a6c:	2280      	movs	r2, #128	; 0x80
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4803      	ldr	r0, [pc, #12]	; (8006a80 <USBD_LL_Init+0x94>)
 8006a72:	f7fb fbbf 	bl	80021f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	200015fc 	.word	0x200015fc

08006a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fa faad 	bl	8000ffa <HAL_PCD_Start>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f942 	bl	8006d30 <USBD_Get_USB_Status>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	70fb      	strb	r3, [r7, #3]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70bb      	strb	r3, [r7, #2]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ae2:	78bb      	ldrb	r3, [r7, #2]
 8006ae4:	883a      	ldrh	r2, [r7, #0]
 8006ae6:	78f9      	ldrb	r1, [r7, #3]
 8006ae8:	f7fa ff7e 	bl	80019e8 <HAL_PCD_EP_Open>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f91c 	bl	8006d30 <USBD_Get_USB_Status>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fa ffc7 	bl	8001ab8 <HAL_PCD_EP_Close>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f8fd 	bl	8006d30 <USBD_Get_USB_Status>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b5e:	78fa      	ldrb	r2, [r7, #3]
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fb f89f 	bl	8001ca6 <HAL_PCD_EP_SetStall>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f8de 	bl	8006d30 <USBD_Get_USB_Status>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fb f8e4 	bl	8001d6e <HAL_PCD_EP_ClrStall>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 f8bf 	bl	8006d30 <USBD_Get_USB_Status>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da0b      	bge.n	8006bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	333e      	adds	r3, #62	; 0x3e
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	e00b      	b.n	8006c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fa feb1 	bl	800199e <HAL_PCD_SetAddress>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f874 	bl	8006d30 <USBD_Get_USB_Status>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
 8006c62:	460b      	mov	r3, r1
 8006c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c74:	7af9      	ldrb	r1, [r7, #11]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	f7fa ffca 	bl	8001c12 <HAL_PCD_EP_Transmit>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f853 	bl	8006d30 <USBD_Get_USB_Status>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006cb6:	7af9      	ldrb	r1, [r7, #11]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	f7fa ff46 	bl	8001b4c <HAL_PCD_EP_Receive>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f832 	bl	8006d30 <USBD_Get_USB_Status>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fa ff76 	bl	8001be2 <HAL_PCD_EP_GetRxCount>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d08:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_static_malloc+0x18>)
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	20001b08 	.word	0x20001b08

08006d1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d817      	bhi.n	8006d74 <USBD_Get_USB_Status+0x44>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_Get_USB_Status+0x1c>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d63 	.word	0x08006d63
 8006d54:	08006d69 	.word	0x08006d69
 8006d58:	08006d6f 	.word	0x08006d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d60:	e00b      	b.n	8006d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
    break;
 8006d66:	e008      	b.n	8006d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6c:	e005      	b.n	8006d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	73fb      	strb	r3, [r7, #15]
    break;
 8006d72:	e002      	b.n	8006d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	73fb      	strb	r3, [r7, #15]
    break;
 8006d78:	bf00      	nop
  }
  return usb_status;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <__libc_init_array>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	4d0d      	ldr	r5, [pc, #52]	; (8006dd0 <__libc_init_array+0x38>)
 8006d9c:	4c0d      	ldr	r4, [pc, #52]	; (8006dd4 <__libc_init_array+0x3c>)
 8006d9e:	1b64      	subs	r4, r4, r5
 8006da0:	10a4      	asrs	r4, r4, #2
 8006da2:	2600      	movs	r6, #0
 8006da4:	42a6      	cmp	r6, r4
 8006da6:	d109      	bne.n	8006dbc <__libc_init_array+0x24>
 8006da8:	4d0b      	ldr	r5, [pc, #44]	; (8006dd8 <__libc_init_array+0x40>)
 8006daa:	4c0c      	ldr	r4, [pc, #48]	; (8006ddc <__libc_init_array+0x44>)
 8006dac:	f000 f818 	bl	8006de0 <_init>
 8006db0:	1b64      	subs	r4, r4, r5
 8006db2:	10a4      	asrs	r4, r4, #2
 8006db4:	2600      	movs	r6, #0
 8006db6:	42a6      	cmp	r6, r4
 8006db8:	d105      	bne.n	8006dc6 <__libc_init_array+0x2e>
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc0:	4798      	blx	r3
 8006dc2:	3601      	adds	r6, #1
 8006dc4:	e7ee      	b.n	8006da4 <__libc_init_array+0xc>
 8006dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dca:	4798      	blx	r3
 8006dcc:	3601      	adds	r6, #1
 8006dce:	e7f2      	b.n	8006db6 <__libc_init_array+0x1e>
 8006dd0:	08006e58 	.word	0x08006e58
 8006dd4:	08006e58 	.word	0x08006e58
 8006dd8:	08006e58 	.word	0x08006e58
 8006ddc:	08006e5c 	.word	0x08006e5c

08006de0 <_init>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr

08006dec <_fini>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr
