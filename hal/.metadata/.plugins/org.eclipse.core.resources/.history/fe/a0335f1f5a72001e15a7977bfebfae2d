/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include <string.h>
#include <stdio.h>
/*
 * BOARD INFO :-
 *
 *	USART 1
 *	USART_TX	-	PA9			AF7
 *	USART_RX	- 	PA10		AF7
 *
 * */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
/* GLOBAL VARIABLES */
//UART	HandleTypeDef
UART_HandleTypeDef		Uart1;
UART_HandleTypeDef		Uart2;

void UART1_Init(void);
void UART2_Init(void);

uint8_t tx_buffer1[10]={1,2,3,4,5,6,7,8,9,10};
uint8_t rx_buffer1[10];

uint8_t tx_buffer2[10]={1,2,3,4,5,6,7,8,9,10};
uint8_t rx_buffer2[10];

uint32_t tx_count1,rx_count1;
uint32_t tx_count2,rx_count2;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1){
		tx_count1++;
	}
	if(huart->Instance == USART2)
	{
		tx_count1++;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	rx_count++;

}

int main(void)
{
	HAL_Init();
	UART1_Init();
	UART2_Init();

	HAL_UART_Transmit_IT(&Uart1,txbuffer,10);
	HAL_UART_Receive_IT(&Uart1,rxbuffer,10);
	while(1)
	{
	}
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
	HAL_IncTick();
}


void UART1_Init(void)
{
	// Configure Clock for UART
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	__HAL_RCC_USART1_CLK_ENABLE();
	// GPIO Configuration

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
	GpioStruct.Pull			= 	GPIO_NOPULL;
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;

	HAL_GPIO_Init(GPIOA,&GpioStruct);

	// USART1 Configuration
	Uart1.Instance				=	USART1; // USART1 Base Address is given
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART
	Uart1.Init.BaudRate			=	115200;
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
	Uart1.Init.Mode				=	UART_MODE_TX_RX;
	Uart1.Init.Parity			=	UART_PARITY_NONE;
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;

	HAL_UART_Init(&Uart1);

	// NVIC FOR priority and enabling IRQ

	HAL_NVIC_SetPriority(USART1_IRQn,0,0);
	HAL_NVIC_EnableIRQ(USART1_IRQn);

}

void UART2_Init(void)
{
	// Configure Clock for UART
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	__HAL_RCC_USART1_CLK_ENABLE();
	// GPIO Configuration

	GpioStruct.Pin			=	GPIO_PIN_2 | GPIO_PIN_3;
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
	GpioStruct.Alternate	=	GPIO_AF7_USART2;
	GpioStruct.Pull			= 	GPIO_NOPULL;
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;

	HAL_GPIO_Init(GPIOA,&GpioStruct);

	// USART1 Configuration
	Uart2.Instance				=	USART2; // USART1 Base Address is given
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART
	Uart2.Init.BaudRate			=	115200;
	Uart2.Init.WordLength		=	UART_WORDLENGTH_8B;
	Uart2.Init.StopBits			=	UART_STOPBITS_1;
	Uart2.Init.Mode				=	UART_MODE_TX_RX;
	Uart2.Init.Parity			=	UART_PARITY_NONE;
	Uart2.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
	Uart2.Init.OverSampling		=	UART_OVERSAMPLING_16;

	HAL_UART_Init(&Uart2);

	// NVIC FOR priority and enabling IRQ

	HAL_NVIC_SetPriority(USART2_IRQn,0,0);
	HAL_NVIC_EnableIRQ(USART2_IRQn);

}

void UART2_IRQHandler(void)
{
	HAL_UART_IRQHandler(&Uart2);
}


void UART1_IRQHandler(void)
{
	HAL_UART_IRQHandler(&Uart1);
}

