/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include <string.h>
#include <stdio.h>
#include "uart.h"


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
/* DEFINATIONS */
#define LED_PIN		GPIO_PIN_12
#define LED_PORT	GPIOD
#define BTN_PIN		GPIO_PIN_0
#define BTN_PORT	GPIOA
#define BTN2_PIN	GPIO_PIN_3
#define BTN2_PORT	GPIOD

/* GLOBAL VARIABLES */
void GPIO_PD12_Interrupt_Init(void);


int main(void)
{
	HAL_Init();
	UART1_Init();
	GPIO_PD12_Interrupt_Init();

	while(1)
	{

	}

//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
	HAL_IncTick();
}

void GPIO_PD12_Interrupt_Init(void)
{
	// 1.Configure PD 12 as LED o/p For toggling
	GPIO_InitTypeDef	Gpio_initstruct;
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();

	Gpio_initstruct.Pin 	= LED_PIN;
	Gpio_initstruct.Mode	= GPIO_MODE_OUTPUT_PP;
	Gpio_initstruct.Pull	= GPIO_NOPULL;
	Gpio_initstruct.Speed	= GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(LED_PORT,&Gpio_initstruct);

	// 2.Configure PA 0 as User Button to trigger interrupt
	Gpio_initstruct.Pin		= BTN_PIN;
	Gpio_initstruct.Mode	= GPIO_MODE_IT_RISING;
	Gpio_initstruct.Pull	= GPIO_NOPULL;
	Gpio_initstruct.Speed	= GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(BTN_PORT,&Gpio_initstruct);

	// 3.Configure PD 3 as External button for external; interrupt
	Gpio_initstruct.Pin		= BTN2_PIN;
	Gpio_initstruct.Mode	= GPIO_MODE_IT_RISING;
	Gpio_initstruct.Pull	= GPIO_NOPULL;
	Gpio_initstruct.Speed	= GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(BTN2_PORT,&Gpio_initstruct);

	// 3.Configure EXTI
	HAL_NVIC_SetPriority(EXTI0_IRQn,0,0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);

	HAL_NVIC_SetPriority(EXTI3_IRQn,3,0);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
	// Here we write our ISR
	HAL_GPIO_TogglePin(LED_PORT,LED_PIN);
	printf("Button Pressed!!\n\r");
}

void EXTI0_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(BTN_PIN);
}

void EXTI3_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(BTN2_PIN);
}
