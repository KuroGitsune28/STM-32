
006_DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c04  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ddc  08001ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ddc  08001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001de4  08001de4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de4  08001de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006bde  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000011d0  00000000  00000000  00026c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005f8  00000000  00000000  00027e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000048e  00000000  00000000  00028420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000017d7  00000000  00000000  000288ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007d08  00000000  00000000  0002a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c370c  00000000  00000000  00031d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000017f8  00000000  00000000  000f549c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  000f6c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001d94 	.word	0x08001d94

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08001d94 	.word	0x08001d94

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811b 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8118 	bls.w	80004a6 <__udivmoddi4+0x28e>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8106 	bcs.w	80004aa <__udivmoddi4+0x292>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8103 	bls.w	80004aa <__udivmoddi4+0x292>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ec 	beq.w	80004a0 <__udivmoddi4+0x288>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f7 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 808f 	bne.w	8000426 <__udivmoddi4+0x20e>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80ba 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f901 	lsl.w	r9, r0, r1
 800038e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fbb5 f8f0 	udiv	r8, r5, r0
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	fb00 5518 	mls	r5, r0, r8, r5
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d0:	fb00 4413 	mls	r4, r0, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003f6:	fba0 8302 	umull	r8, r3, r0, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	429c      	cmp	r4, r3
 8000400:	46c6      	mov	lr, r8
 8000402:	461d      	mov	r5, r3
 8000404:	d355      	bcc.n	80004b2 <__udivmoddi4+0x29a>
 8000406:	d052      	beq.n	80004ae <__udivmoddi4+0x296>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb9 030e 	subs.w	r3, r9, lr
 800040e:	eb64 0405 	sbc.w	r4, r4, r5
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40cb      	lsrs	r3, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c3 0120 	rsb	r1, r3, #32
 800042a:	fa02 fc03 	lsl.w	ip, r2, r3
 800042e:	fa20 f201 	lsr.w	r2, r0, r1
 8000432:	fa25 f101 	lsr.w	r1, r5, r1
 8000436:	409d      	lsls	r5, r3
 8000438:	432a      	orrs	r2, r5
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	fbb1 f0f7 	udiv	r0, r1, r7
 8000446:	fb07 1510 	mls	r5, r7, r0, r1
 800044a:	0c11      	lsrs	r1, r2, #16
 800044c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000450:	fb00 f50e 	mul.w	r5, r0, lr
 8000454:	428d      	cmp	r5, r1
 8000456:	fa04 f403 	lsl.w	r4, r4, r3
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x256>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 38ff 	add.w	r8, r0, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428d      	cmp	r5, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	1b49      	subs	r1, r1, r5
 8000470:	b292      	uxth	r2, r2
 8000472:	fbb1 f5f7 	udiv	r5, r1, r7
 8000476:	fb07 1115 	mls	r1, r7, r5, r1
 800047a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047e:	fb05 f10e 	mul.w	r1, r5, lr
 8000482:	4291      	cmp	r1, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x280>
 8000486:	eb1c 0202 	adds.w	r2, ip, r2
 800048a:	f105 38ff 	add.w	r8, r5, #4294967295
 800048e:	d216      	bcs.n	80004be <__udivmoddi4+0x2a6>
 8000490:	4291      	cmp	r1, r2
 8000492:	d914      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000494:	3d02      	subs	r5, #2
 8000496:	4462      	add	r2, ip
 8000498:	1a52      	subs	r2, r2, r1
 800049a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049e:	e739      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a0:	4631      	mov	r1, r6
 80004a2:	4630      	mov	r0, r6
 80004a4:	e709      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a6:	4639      	mov	r1, r7
 80004a8:	e6e7      	b.n	800027a <__udivmoddi4+0x62>
 80004aa:	4610      	mov	r0, r2
 80004ac:	e6fc      	b.n	80002a8 <__udivmoddi4+0x90>
 80004ae:	45c1      	cmp	r9, r8
 80004b0:	d2aa      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb63 050c 	sbc.w	r5, r3, ip
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4645      	mov	r5, r8
 80004c0:	e7ea      	b.n	8000498 <__udivmoddi4+0x280>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	46d0      	mov	r8, sl
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x124>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004d8:	4464      	add	r4, ip
 80004da:	3802      	subs	r0, #2
 80004dc:	e743      	b.n	8000366 <__udivmoddi4+0x14e>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <HAL_Init+0x40>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_Init+0x40>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x40>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f929 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	200f      	movs	r0, #15
 8000514:	f000 f80e 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f000 f806 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f93b 	bl	80007ce <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f903 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000028 	.word	0x20000028

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <__NVIC_EnableIRQ+0x34>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	e000e100 	.word	0xe000e100

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff2d 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff42 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff35 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ffa2 	bl	8000720 <SysTick_Config>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff fee0 	bl	80005b8 <HAL_GetTick>
 80007f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d101      	bne.n	8000804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e099      	b.n	8000938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2202      	movs	r2, #2
 8000808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 0201 	bic.w	r2, r2, #1
 8000822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000824:	e00f      	b.n	8000846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000826:	f7ff fec7 	bl	80005b8 <HAL_GetTick>
 800082a:	4602      	mov	r2, r0
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2b05      	cmp	r3, #5
 8000832:	d908      	bls.n	8000846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2220      	movs	r2, #32
 8000838:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2203      	movs	r2, #3
 800083e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000842:	2303      	movs	r3, #3
 8000844:	e078      	b.n	8000938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1e8      	bne.n	8000826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <HAL_DMA_Init+0x158>)
 8000860:	4013      	ands	r3, r2
 8000862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800087e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800088a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6a1b      	ldr	r3, [r3, #32]
 8000890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	2b04      	cmp	r3, #4
 800089e:	d107      	bne.n	80008b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4313      	orrs	r3, r2
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	f023 0307 	bic.w	r3, r3, #7
 80008c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d117      	bne.n	800090a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00e      	beq.n	800090a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f000 fa6d 	bl	8000dcc <DMA_CheckFifoParam>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2240      	movs	r2, #64	; 0x40
 80008fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000906:	2301      	movs	r3, #1
 8000908:	e016      	b.n	8000938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 fa26 	bl	8000d64 <DMA_CalcBaseAndBitshift>
 8000918:	4603      	mov	r3, r0
 800091a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000920:	223f      	movs	r2, #63	; 0x3f
 8000922:	409a      	lsls	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	f010803f 	.word	0xf010803f

08000944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <HAL_DMA_Start_IT+0x26>
 8000966:	2302      	movs	r3, #2
 8000968:	e040      	b.n	80009ec <HAL_DMA_Start_IT+0xa8>
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d12f      	bne.n	80009de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2202      	movs	r2, #2
 8000982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f000 f9b8 	bl	8000d08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099c:	223f      	movs	r2, #63	; 0x3f
 800099e:	409a      	lsls	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0216 	orr.w	r2, r2, #22
 80009b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d007      	beq.n	80009cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0208 	orr.w	r2, r2, #8
 80009ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e005      	b.n	80009ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009e6:	2302      	movs	r3, #2
 80009e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a00:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <HAL_DMA_IRQHandler+0x248>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a8e      	ldr	r2, [pc, #568]	; (8000c40 <HAL_DMA_IRQHandler+0x24c>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0a9b      	lsrs	r3, r3, #10
 8000a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1e:	2208      	movs	r2, #8
 8000a20:	409a      	lsls	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d01a      	beq.n	8000a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	2201      	movs	r2, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d012      	beq.n	8000a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00b      	beq.n	8000a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a82:	2201      	movs	r2, #1
 8000a84:	409a      	lsls	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a8e:	f043 0202 	orr.w	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d012      	beq.n	8000acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00b      	beq.n	8000acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab8:	2204      	movs	r2, #4
 8000aba:	409a      	lsls	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac4:	f043 0204 	orr.w	r2, r3, #4
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d043      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d03c      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aee:	2210      	movs	r2, #16
 8000af0:	409a      	lsls	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d018      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d108      	bne.n	8000b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d024      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	4798      	blx	r3
 8000b22:	e01f      	b.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d01b      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	4798      	blx	r3
 8000b34:	e016      	b.n	8000b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0208 	bic.w	r2, r2, #8
 8000b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b68:	2220      	movs	r2, #32
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 808f 	beq.w	8000c94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8087 	beq.w	8000c94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d136      	bne.n	8000c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0216 	bic.w	r2, r2, #22
 8000bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <HAL_DMA_IRQHandler+0x1da>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0208 	bic.w	r2, r2, #8
 8000bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be2:	223f      	movs	r2, #63	; 0x3f
 8000be4:	409a      	lsls	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d07e      	beq.n	8000d00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
        }
        return;
 8000c0a:	e079      	b.n	8000d00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d01d      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10d      	bne.n	8000c44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d031      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
 8000c38:	e02c      	b.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d023      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	4798      	blx	r3
 8000c54:	e01e      	b.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0210 	bic.w	r2, r2, #16
 8000c72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d032      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d022      	beq.n	8000cee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2205      	movs	r2, #5
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d307      	bcc.n	8000cdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f2      	bne.n	8000cc0 <HAL_DMA_IRQHandler+0x2cc>
 8000cda:	e000      	b.n	8000cde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000cdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
 8000cfe:	e000      	b.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000d00:	bf00      	nop
    }
  }
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b40      	cmp	r3, #64	; 0x40
 8000d34:	d108      	bne.n	8000d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d46:	e007      	b.n	8000d58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	3b10      	subs	r3, #16
 8000d74:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <DMA_CalcBaseAndBitshift+0x60>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d909      	bls.n	8000da6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	1d1a      	adds	r2, r3, #4
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	659a      	str	r2, [r3, #88]	; 0x58
 8000da4:	e007      	b.n	8000db6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dae:	f023 0303 	bic.w	r3, r3, #3
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	aaaaaaab 	.word	0xaaaaaaab
 8000dc8:	08001dac 	.word	0x08001dac

08000dcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d11f      	bne.n	8000e26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d856      	bhi.n	8000e9a <DMA_CheckFifoParam+0xce>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <DMA_CheckFifoParam+0x28>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e05 	.word	0x08000e05
 8000df8:	08000e17 	.word	0x08000e17
 8000dfc:	08000e05 	.word	0x08000e05
 8000e00:	08000e9b 	.word	0x08000e9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d046      	beq.n	8000e9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e14:	e043      	b.n	8000e9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e1e:	d140      	bne.n	8000ea2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e24:	e03d      	b.n	8000ea2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e2e:	d121      	bne.n	8000e74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d837      	bhi.n	8000ea6 <DMA_CheckFifoParam+0xda>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <DMA_CheckFifoParam+0x70>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e53 	.word	0x08000e53
 8000e44:	08000e4d 	.word	0x08000e4d
 8000e48:	08000e65 	.word	0x08000e65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e50:	e030      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d025      	beq.n	8000eaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e62:	e022      	b.n	8000eaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e6c:	d11f      	bne.n	8000eae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e72:	e01c      	b.n	8000eae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d903      	bls.n	8000e82 <DMA_CheckFifoParam+0xb6>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d003      	beq.n	8000e88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e80:	e018      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
      break;
 8000e86:	e015      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00e      	beq.n	8000eb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
      break;
 8000e98:	e00b      	b.n	8000eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8000e9a:	bf00      	nop
 8000e9c:	e00a      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e008      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e006      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8000ea6:	bf00      	nop
 8000ea8:	e004      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e002      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8000eae:	bf00      	nop
 8000eb0:	e000      	b.n	8000eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eb2:	bf00      	nop
    }
  } 
  
  return status; 
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e16b      	b.n	80011b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 815a 	bne.w	80011ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80b4 	beq.w	80011ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <HAL_GPIO_Init+0x308>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <HAL_GPIO_Init+0x308>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <HAL_GPIO_Init+0x308>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a5a      	ldr	r2, [pc, #360]	; (80011cc <HAL_GPIO_Init+0x30c>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <HAL_GPIO_Init+0x310>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_Init+0x314>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x318>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_GPIO_Init+0x31c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x21a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x320>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x216>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	; (80011e4 <HAL_GPIO_Init+0x324>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x212>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <HAL_GPIO_Init+0x328>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x20e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4a      	ldr	r2, [pc, #296]	; (80011ec <HAL_GPIO_Init+0x32c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x20a>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00e      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ca:	2308      	movs	r3, #8
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x228>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4934      	ldr	r1, [pc, #208]	; (80011cc <HAL_GPIO_Init+0x30c>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_GPIO_Init+0x330>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_GPIO_Init+0x330>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_GPIO_Init+0x330>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <HAL_GPIO_Init+0x330>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_GPIO_Init+0x330>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_GPIO_Init+0x330>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x330>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_GPIO_Init+0x330>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f ae90 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021c00 	.word	0x40021c00
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_RCC_GetHCLKFreq+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000008 	.word	0x20000008

08001208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800120c:	f7ff fff2 	bl	80011f4 <HAL_RCC_GetHCLKFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0a9b      	lsrs	r3, r3, #10
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	4903      	ldr	r1, [pc, #12]	; (800122c <HAL_RCC_GetPCLK1Freq+0x24>)
 800121e:	5ccb      	ldrb	r3, [r1, r3]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	08001dd4 	.word	0x08001dd4

08001230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001234:	f7ff ffde 	bl	80011f4 <HAL_RCC_GetHCLKFreq>
 8001238:	4602      	mov	r2, r0
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0b5b      	lsrs	r3, r3, #13
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4903      	ldr	r1, [pc, #12]	; (8001254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	08001dd4 	.word	0x08001dd4

08001258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e03f      	b.n	80012ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f837 	bl	80012f2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2224      	movs	r2, #36	; 0x24
 8001288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800129a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f9f9 	bl	8001694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2220      	movs	r2, #32
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2220      	movs	r2, #32
 80012e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b20      	cmp	r3, #32
 800131c:	d165      	bne.n	80013ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_UART_Transmit_DMA+0x26>
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e05e      	b.n	80013ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_UART_Transmit_DMA+0x38>
 8001338:	2302      	movs	r3, #2
 800133a:	e057      	b.n	80013ec <HAL_UART_Transmit_DMA+0xe8>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2221      	movs	r2, #33	; 0x21
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <HAL_UART_Transmit_DMA+0xf0>)
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_UART_Transmit_DMA+0xf4>)
 8001372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <HAL_UART_Transmit_DMA+0xf8>)
 800137a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	2200      	movs	r2, #0
 8001382:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3304      	adds	r3, #4
 8001398:	461a      	mov	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	f7ff fad2 	bl	8000944 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3314      	adds	r3, #20
 80013b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	e853 3f00 	ldrex	r3, [r3]
 80013c0:	617b      	str	r3, [r7, #20]
   return(result);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3314      	adds	r3, #20
 80013d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d2:	627a      	str	r2, [r7, #36]	; 0x24
 80013d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013d6:	6a39      	ldr	r1, [r7, #32]
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	e841 2300 	strex	r3, r2, [r1]
 80013de:	61fb      	str	r3, [r7, #28]
   return(result);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1e5      	bne.n	80013b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80013ea:	2302      	movs	r3, #2
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3730      	adds	r7, #48	; 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08001437 	.word	0x08001437
 80013f8:	080014d1 	.word	0x080014d1
 80013fc:	080014ed 	.word	0x080014ed

08001400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b090      	sub	sp, #64	; 0x40
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d137      	bne.n	80014c2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	2200      	movs	r2, #0
 8001456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3314      	adds	r3, #20
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	e853 3f00 	ldrex	r3, [r3]
 8001466:	623b      	str	r3, [r7, #32]
   return(result);
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3314      	adds	r3, #20
 8001476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001478:	633a      	str	r2, [r7, #48]	; 0x30
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800147c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001480:	e841 2300 	strex	r3, r2, [r1]
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e5      	bne.n	8001458 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	330c      	adds	r3, #12
 8001492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	e853 3f00 	ldrex	r3, [r3]
 800149a:	60fb      	str	r3, [r7, #12]
   return(result);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
 80014a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	330c      	adds	r3, #12
 80014aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ac:	61fa      	str	r2, [r7, #28]
 80014ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	e841 2300 	strex	r3, r2, [r1]
 80014b8:	617b      	str	r3, [r7, #20]
   return(result);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e5      	bne.n	800148c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80014c0:	e002      	b.n	80014c8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80014c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014c4:	f7ff ff9c 	bl	8001400 <HAL_UART_TxCpltCallback>
}
 80014c8:	bf00      	nop
 80014ca:	3740      	adds	r7, #64	; 0x40
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff ff97 	bl	8001412 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	2b80      	cmp	r3, #128	; 0x80
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b21      	cmp	r3, #33	; 0x21
 800151e:	d108      	bne.n	8001532 <UART_DMAError+0x46>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2200      	movs	r2, #0
 800152a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f000 f827 	bl	8001580 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b22      	cmp	r3, #34	; 0x22
 8001552:	d108      	bne.n	8001566 <UART_DMAError+0x7a>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2200      	movs	r2, #0
 800155e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 f834 	bl	80015ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001572:	68b8      	ldr	r0, [r7, #8]
 8001574:	f7ff ff56 	bl	8001424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	330c      	adds	r3, #12
 800158e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	e853 3f00 	ldrex	r3, [r3]
 8001596:	60bb      	str	r3, [r7, #8]
   return(result);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	330c      	adds	r3, #12
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	61ba      	str	r2, [r7, #24]
 80015aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ac:	6979      	ldr	r1, [r7, #20]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	e841 2300 	strex	r3, r2, [r1]
 80015b4:	613b      	str	r3, [r7, #16]
   return(result);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e5      	bne.n	8001588 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80015c4:	bf00      	nop
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b095      	sub	sp, #84	; 0x54
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	330c      	adds	r3, #12
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e0:	e853 3f00 	ldrex	r3, [r3]
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80015e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	330c      	adds	r3, #12
 80015f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015f6:	643a      	str	r2, [r7, #64]	; 0x40
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015fe:	e841 2300 	strex	r3, r2, [r1]
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1e5      	bne.n	80015d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3314      	adds	r3, #20
 8001610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	e853 3f00 	ldrex	r3, [r3]
 8001618:	61fb      	str	r3, [r7, #28]
   return(result);
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	64bb      	str	r3, [r7, #72]	; 0x48
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3314      	adds	r3, #20
 8001628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800162a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800162e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	e841 2300 	strex	r3, r2, [r1]
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1e5      	bne.n	800160a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	2b01      	cmp	r3, #1
 8001644:	d119      	bne.n	800167a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	330c      	adds	r3, #12
 800164c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	e853 3f00 	ldrex	r3, [r3]
 8001654:	60bb      	str	r3, [r7, #8]
   return(result);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f023 0310 	bic.w	r3, r3, #16
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	330c      	adds	r3, #12
 8001664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001666:	61ba      	str	r2, [r7, #24]
 8001668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800166a:	6979      	ldr	r1, [r7, #20]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	e841 2300 	strex	r3, r2, [r1]
 8001672:	613b      	str	r3, [r7, #16]
   return(result);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e5      	bne.n	8001646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001688:	bf00      	nop
 800168a:	3754      	adds	r7, #84	; 0x54
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001698:	b0c0      	sub	sp, #256	; 0x100
 800169a:	af00      	add	r7, sp, #0
 800169c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80016ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b0:	68d9      	ldr	r1, [r3, #12]
 80016b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	ea40 0301 	orr.w	r3, r0, r1
 80016bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4313      	orrs	r3, r2
 80016dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80016e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80016ec:	f021 010c 	bic.w	r1, r1, #12
 80016f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016fa:	430b      	orrs	r3, r1
 80016fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800170a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800170e:	6999      	ldr	r1, [r3, #24]
 8001710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	ea40 0301 	orr.w	r3, r0, r1
 800171a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800171c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b91      	ldr	r3, [pc, #580]	; (8001968 <UART_SetConfig+0x2d4>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d005      	beq.n	8001734 <UART_SetConfig+0xa0>
 8001728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b8f      	ldr	r3, [pc, #572]	; (800196c <UART_SetConfig+0x2d8>)
 8001730:	429a      	cmp	r2, r3
 8001732:	d104      	bne.n	800173e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001734:	f7ff fd7c 	bl	8001230 <HAL_RCC_GetPCLK2Freq>
 8001738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800173c:	e003      	b.n	8001746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800173e:	f7ff fd63 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001750:	f040 8110 	bne.w	8001974 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001758:	2200      	movs	r2, #0
 800175a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800175e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	1891      	adds	r1, r2, r2
 800176c:	65b9      	str	r1, [r7, #88]	; 0x58
 800176e:	415b      	adcs	r3, r3
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	4604      	mov	r4, r0
 800177c:	eb12 0804 	adds.w	r8, r2, r4
 8001780:	460c      	mov	r4, r1
 8001782:	eb43 0904 	adc.w	r9, r3, r4
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800179a:	4690      	mov	r8, r2
 800179c:	4699      	mov	r9, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	eb18 0303 	adds.w	r3, r8, r3
 80017a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80017a8:	460b      	mov	r3, r1
 80017aa:	eb49 0303 	adc.w	r3, r9, r3
 80017ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80017c6:	460b      	mov	r3, r1
 80017c8:	18db      	adds	r3, r3, r3
 80017ca:	653b      	str	r3, [r7, #80]	; 0x50
 80017cc:	4613      	mov	r3, r2
 80017ce:	eb42 0303 	adc.w	r3, r2, r3
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
 80017d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80017dc:	f7fe fd04 	bl	80001e8 <__aeabi_uldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <UART_SetConfig+0x2dc>)
 80017e6:	fba3 2302 	umull	r2, r3, r3, r2
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	011c      	lsls	r4, r3, #4
 80017ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80017fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001800:	4642      	mov	r2, r8
 8001802:	464b      	mov	r3, r9
 8001804:	1891      	adds	r1, r2, r2
 8001806:	64b9      	str	r1, [r7, #72]	; 0x48
 8001808:	415b      	adcs	r3, r3
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800180c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001810:	4645      	mov	r5, r8
 8001812:	eb12 0a05 	adds.w	sl, r2, r5
 8001816:	4640      	mov	r0, r8
 8001818:	4649      	mov	r1, r9
 800181a:	460d      	mov	r5, r1
 800181c:	eb43 0b05 	adc.w	fp, r3, r5
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800182c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001834:	4692      	mov	sl, r2
 8001836:	469b      	mov	fp, r3
 8001838:	4603      	mov	r3, r0
 800183a:	eb1a 0303 	adds.w	r3, sl, r3
 800183e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001842:	460b      	mov	r3, r1
 8001844:	eb4b 0303 	adc.w	r3, fp, r3
 8001848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800184c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800185c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001860:	460b      	mov	r3, r1
 8001862:	18db      	adds	r3, r3, r3
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
 8001866:	4613      	mov	r3, r2
 8001868:	eb42 0303 	adc.w	r3, r2, r3
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
 800186e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001876:	f7fe fcb7 	bl	80001e8 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4611      	mov	r1, r2
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <UART_SetConfig+0x2dc>)
 8001882:	fba3 2301 	umull	r2, r3, r3, r1
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2264      	movs	r2, #100	; 0x64
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	1acb      	subs	r3, r1, r3
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001896:	4b36      	ldr	r3, [pc, #216]	; (8001970 <UART_SetConfig+0x2dc>)
 8001898:	fba3 2302 	umull	r2, r3, r3, r2
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018a4:	441c      	add	r4, r3
 80018a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80018aa:	2200      	movs	r2, #0
 80018ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80018b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80018b8:	4642      	mov	r2, r8
 80018ba:	464b      	mov	r3, r9
 80018bc:	1891      	adds	r1, r2, r2
 80018be:	63b9      	str	r1, [r7, #56]	; 0x38
 80018c0:	415b      	adcs	r3, r3
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018c8:	4641      	mov	r1, r8
 80018ca:	1851      	adds	r1, r2, r1
 80018cc:	6339      	str	r1, [r7, #48]	; 0x30
 80018ce:	4649      	mov	r1, r9
 80018d0:	414b      	adcs	r3, r1
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80018e0:	4659      	mov	r1, fp
 80018e2:	00cb      	lsls	r3, r1, #3
 80018e4:	4655      	mov	r5, sl
 80018e6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80018ea:	4651      	mov	r1, sl
 80018ec:	00ca      	lsls	r2, r1, #3
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4642      	mov	r2, r8
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018fc:	464b      	mov	r3, r9
 80018fe:	460a      	mov	r2, r1
 8001900:	eb42 0303 	adc.w	r3, r2, r3
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800191c:	460b      	mov	r3, r1
 800191e:	18db      	adds	r3, r3, r3
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
 8001922:	4613      	mov	r3, r2
 8001924:	eb42 0303 	adc.w	r3, r2, r3
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800192a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800192e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001932:	f7fe fc59 	bl	80001e8 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <UART_SetConfig+0x2dc>)
 800193c:	fba3 1302 	umull	r1, r3, r3, r2
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	2164      	movs	r1, #100	; 0x64
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	3332      	adds	r3, #50	; 0x32
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <UART_SetConfig+0x2dc>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4422      	add	r2, r4
 8001962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001964:	e10a      	b.n	8001b7c <UART_SetConfig+0x4e8>
 8001966:	bf00      	nop
 8001968:	40011000 	.word	0x40011000
 800196c:	40011400 	.word	0x40011400
 8001970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001978:	2200      	movs	r2, #0
 800197a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800197e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001986:	4642      	mov	r2, r8
 8001988:	464b      	mov	r3, r9
 800198a:	1891      	adds	r1, r2, r2
 800198c:	6239      	str	r1, [r7, #32]
 800198e:	415b      	adcs	r3, r3
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001996:	4641      	mov	r1, r8
 8001998:	1854      	adds	r4, r2, r1
 800199a:	46cc      	mov	ip, r9
 800199c:	eb43 050c 	adc.w	r5, r3, ip
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	00eb      	lsls	r3, r5, #3
 80019aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ae:	00e2      	lsls	r2, r4, #3
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
 80019b4:	4640      	mov	r0, r8
 80019b6:	4649      	mov	r1, r9
 80019b8:	4603      	mov	r3, r0
 80019ba:	18e3      	adds	r3, r4, r3
 80019bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019c0:	460b      	mov	r3, r1
 80019c2:	eb45 0303 	adc.w	r3, r5, r3
 80019c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019e6:	4629      	mov	r1, r5
 80019e8:	008b      	lsls	r3, r1, #2
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	4604      	mov	r4, r0
 80019f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80019f4:	4601      	mov	r1, r0
 80019f6:	008a      	lsls	r2, r1, #2
 80019f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80019fc:	f7fe fbf4 	bl	80001e8 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4b60      	ldr	r3, [pc, #384]	; (8001b88 <UART_SetConfig+0x4f4>)
 8001a06:	fba3 2302 	umull	r2, r3, r3, r2
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	011c      	lsls	r4, r3, #4
 8001a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001a20:	4642      	mov	r2, r8
 8001a22:	464b      	mov	r3, r9
 8001a24:	1891      	adds	r1, r2, r2
 8001a26:	61b9      	str	r1, [r7, #24]
 8001a28:	415b      	adcs	r3, r3
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a30:	4641      	mov	r1, r8
 8001a32:	1851      	adds	r1, r2, r1
 8001a34:	6139      	str	r1, [r7, #16]
 8001a36:	4649      	mov	r1, r9
 8001a38:	414b      	adcs	r3, r1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a48:	4659      	mov	r1, fp
 8001a4a:	00cb      	lsls	r3, r1, #3
 8001a4c:	4655      	mov	r5, sl
 8001a4e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a52:	4651      	mov	r1, sl
 8001a54:	00ca      	lsls	r2, r1, #3
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	189b      	adds	r3, r3, r2
 8001a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a64:	464b      	mov	r3, r9
 8001a66:	460a      	mov	r2, r1
 8001a68:	eb42 0303 	adc.w	r3, r2, r3
 8001a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001a88:	4649      	mov	r1, r9
 8001a8a:	008b      	lsls	r3, r1, #2
 8001a8c:	4645      	mov	r5, r8
 8001a8e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001a92:	4641      	mov	r1, r8
 8001a94:	008a      	lsls	r2, r1, #2
 8001a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a9a:	f7fe fba5 	bl	80001e8 <__aeabi_uldivmod>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <UART_SetConfig+0x4f4>)
 8001aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2264      	movs	r2, #100	; 0x64
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	1acb      	subs	r3, r1, r3
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	3332      	adds	r3, #50	; 0x32
 8001ab8:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <UART_SetConfig+0x4f4>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac4:	441c      	add	r4, r3
 8001ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aca:	2200      	movs	r2, #0
 8001acc:	673b      	str	r3, [r7, #112]	; 0x70
 8001ace:	677a      	str	r2, [r7, #116]	; 0x74
 8001ad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001ad4:	4642      	mov	r2, r8
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	1891      	adds	r1, r2, r2
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	415b      	adcs	r3, r3
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae4:	4641      	mov	r1, r8
 8001ae6:	1851      	adds	r1, r2, r1
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	4649      	mov	r1, r9
 8001aec:	414b      	adcs	r3, r1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001afc:	4659      	mov	r1, fp
 8001afe:	00cb      	lsls	r3, r1, #3
 8001b00:	4655      	mov	r5, sl
 8001b02:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001b06:	4651      	mov	r1, sl
 8001b08:	00ca      	lsls	r2, r1, #3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4642      	mov	r2, r8
 8001b12:	189b      	adds	r3, r3, r2
 8001b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b16:	464b      	mov	r3, r9
 8001b18:	460a      	mov	r2, r1
 8001b1a:	eb42 0303 	adc.w	r3, r2, r3
 8001b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	663b      	str	r3, [r7, #96]	; 0x60
 8001b2a:	667a      	str	r2, [r7, #100]	; 0x64
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001b38:	4649      	mov	r1, r9
 8001b3a:	008b      	lsls	r3, r1, #2
 8001b3c:	4645      	mov	r5, r8
 8001b3e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8001b42:	4641      	mov	r1, r8
 8001b44:	008a      	lsls	r2, r1, #2
 8001b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b4a:	f7fe fb4d 	bl	80001e8 <__aeabi_uldivmod>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <UART_SetConfig+0x4f4>)
 8001b54:	fba3 1302 	umull	r1, r3, r3, r2
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	2164      	movs	r1, #100	; 0x64
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	3332      	adds	r3, #50	; 0x32
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <UART_SetConfig+0x4f4>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	f003 020f 	and.w	r2, r3, #15
 8001b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4422      	add	r2, r4
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b82:	46bd      	mov	sp, r7
 8001b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b88:	51eb851f 	.word	0x51eb851f

08001b8c <main>:

const uint8_t txbuffer[30]="hello this is DMA\n";


int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	HAL_Init();
 8001b90:	f7fe fca8 	bl	80004e4 <HAL_Init>
	UART1_DMA_Init();
 8001b94:	f000 f810 	bl	8001bb8 <UART1_DMA_Init>

	while(1)
	{
		HAL_UART_Transmit_DMA(&Uart1,txbuffer,30);
 8001b98:	221e      	movs	r2, #30
 8001b9a:	4902      	ldr	r1, [pc, #8]	; (8001ba4 <main+0x18>)
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <main+0x1c>)
 8001b9e:	f7ff fbb1 	bl	8001304 <HAL_UART_Transmit_DMA>
 8001ba2:	e7f9      	b.n	8001b98 <main+0xc>
 8001ba4:	08001db4 	.word	0x08001db4
 8001ba8:	2000002c 	.word	0x2000002c

08001bac <SysTick_Handler>:
//    /* Loop forever */
//	for(;;);
}

void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001bb0:	f7fe fcf0 	bl	8000594 <HAL_IncTick>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <UART1_DMA_Init>:


void UART1_DMA_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
	// Configure Clock for UART
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]

	//GPIO init typedef
	GPIO_InitTypeDef	GpioStruct;

	__HAL_RCC_USART1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
	// GPIO Configuration

	GpioStruct.Pin			=	GPIO_PIN_9 | GPIO_PIN_10;
 8001bf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfa:	60fb      	str	r3, [r7, #12]
	GpioStruct.Mode 		=	GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
	GpioStruct.Alternate	=	GPIO_AF7_USART1;
 8001c00:	2307      	movs	r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
	GpioStruct.Pull			= 	GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
	GpioStruct.Speed		= 	GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA,&GpioStruct);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4619      	mov	r1, r3
 8001c12:	482f      	ldr	r0, [pc, #188]	; (8001cd0 <UART1_DMA_Init+0x118>)
 8001c14:	f7ff f954 	bl	8000ec0 <HAL_GPIO_Init>

	// USART1 Configuration
	Uart1.Instance				=	USART1; // USART1 Base Address is given
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <UART1_DMA_Init+0x120>)
 8001c1c:	601a      	str	r2, [r3, #0]
	// Don't get confused between UART and USART there is just a bit difference
	// We are configuring USART2 as UART
	Uart1.Init.BaudRate			=	115200;
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
	Uart1.Init.WordLength		=	UART_WORDLENGTH_8B;
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
	Uart1.Init.StopBits			=	UART_STOPBITS_1;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
	Uart1.Init.Mode				=	UART_MODE_TX;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c34:	2208      	movs	r2, #8
 8001c36:	615a      	str	r2, [r3, #20]
	Uart1.Init.Parity			=	UART_PARITY_NONE;
 8001c38:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
	Uart1.Init.HwFlowCtl		=	UART_HWCONTROL_NONE;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
	Uart1.Init.OverSampling		=	UART_OVERSAMPLING_16;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&Uart1);
 8001c4a:	4822      	ldr	r0, [pc, #136]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001c4c:	f7ff fb04 	bl	8001258 <HAL_UART_Init>

	// DMA Coding

	__HAL_RCC_DMA2_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <UART1_DMA_Init+0x114>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]


	hdma2_uart1_tx.Instance						= DMA2_Stream7;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <UART1_DMA_Init+0x128>)
 8001c70:	601a      	str	r2, [r3, #0]
	hdma2_uart1_tx.Init.Channel					= DMA_CHANNEL_4;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c78:	605a      	str	r2, [r3, #4]
	hdma2_uart1_tx.Init.Direction				= DMA_MEMORY_TO_PERIPH;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	609a      	str	r2, [r3, #8]
	hdma2_uart1_tx.Init.PeriphInc				= DMA_PINC_DISABLE;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	hdma2_uart1_tx.Init.MemInc					= DMA_MINC_ENABLE;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8c:	611a      	str	r2, [r3, #16]
	hdma2_uart1_tx.Init.PeriphDataAlignment		= DMA_PDATAALIGN_BYTE;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
	hdma2_uart1_tx.Init.MemDataAlignment		= DMA_MDATAALIGN_BYTE;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
	hdma2_uart1_tx.Init.Mode					= DMA_CIRCULAR;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]
	hdma2_uart1_tx.Init.Priority				= DMA_PRIORITY_LOW;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]

	HAL_DMA_Init(&hdma2_uart1_tx);
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001caa:	f7fe fd9d 	bl	80007e8 <HAL_DMA_Init>

	// LINK UART_TX AND DMA2
	Uart1.hdmatx = &hdma2_uart1_tx;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <UART1_DMA_Init+0x11c>)
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <UART1_DMA_Init+0x124>)
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

	// Set priority and enable IRQ FOR STREAM 7 TX
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn,0,0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2046      	movs	r0, #70	; 0x46
 8001cba:	f7fe fd5e 	bl	800077a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001cbe:	2046      	movs	r0, #70	; 0x46
 8001cc0:	f7fe fd77 	bl	80007b2 <HAL_NVIC_EnableIRQ>
}
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	2000002c 	.word	0x2000002c
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	20000070 	.word	0x20000070
 8001ce0:	400264b8 	.word	0x400264b8

08001ce4 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma2_uart1_tx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA2_Stream7_IRQHandler+0x10>)
 8001cea:	f7fe fe83 	bl	80009f4 <HAL_DMA_IRQHandler>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000070 	.word	0x20000070

08001cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d02:	490d      	ldr	r1, [pc, #52]	; (8001d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <LoopForever+0xe>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d18:	4c0a      	ldr	r4, [pc, #40]	; (8001d44 <LoopForever+0x16>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d26:	f000 f811 	bl	8001d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d2a:	f7ff ff2f 	bl	8001b8c <main>

08001d2e <LoopForever>:

LoopForever:
  b LoopForever
 8001d2e:	e7fe      	b.n	8001d2e <LoopForever>
  ldr   r0, =_estack
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d3c:	08001dec 	.word	0x08001dec
  ldr r2, =_sbss
 8001d40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d44:	200000d0 	.word	0x200000d0

08001d48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <__libc_init_array>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	4d0d      	ldr	r5, [pc, #52]	; (8001d84 <__libc_init_array+0x38>)
 8001d50:	4c0d      	ldr	r4, [pc, #52]	; (8001d88 <__libc_init_array+0x3c>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	2600      	movs	r6, #0
 8001d58:	42a6      	cmp	r6, r4
 8001d5a:	d109      	bne.n	8001d70 <__libc_init_array+0x24>
 8001d5c:	4d0b      	ldr	r5, [pc, #44]	; (8001d8c <__libc_init_array+0x40>)
 8001d5e:	4c0c      	ldr	r4, [pc, #48]	; (8001d90 <__libc_init_array+0x44>)
 8001d60:	f000 f818 	bl	8001d94 <_init>
 8001d64:	1b64      	subs	r4, r4, r5
 8001d66:	10a4      	asrs	r4, r4, #2
 8001d68:	2600      	movs	r6, #0
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d105      	bne.n	8001d7a <__libc_init_array+0x2e>
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d74:	4798      	blx	r3
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7ee      	b.n	8001d58 <__libc_init_array+0xc>
 8001d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7e:	4798      	blx	r3
 8001d80:	3601      	adds	r6, #1
 8001d82:	e7f2      	b.n	8001d6a <__libc_init_array+0x1e>
 8001d84:	08001de4 	.word	0x08001de4
 8001d88:	08001de4 	.word	0x08001de4
 8001d8c:	08001de4 	.word	0x08001de4
 8001d90:	08001de8 	.word	0x08001de8

08001d94 <_init>:
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	bf00      	nop
 8001d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9a:	bc08      	pop	{r3}
 8001d9c:	469e      	mov	lr, r3
 8001d9e:	4770      	bx	lr

08001da0 <_fini>:
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	bf00      	nop
 8001da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001da6:	bc08      	pop	{r3}
 8001da8:	469e      	mov	lr, r3
 8001daa:	4770      	bx	lr
