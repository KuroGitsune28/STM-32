/*
 * stm3f407xx_spi_drivers.c
 *
 *  Created on: Oct 2, 2023
 *      Author: ARYAN
 */
#include "stm3f407xx_spi_drivers.h"


/*********************************************************
 *
 * @fn 			- SPI_PeriClockControl
 *
 * @brief		- it will enable peripheral clock for SPI
 *
 * @param[in] 	- SPI1/SPI2/SPI3/SPI4
 * @param[in] 	- ENABLE OR DISABLE
 * @param[in] 	-
 *
 * @return 		- none
 *
 * @Note		- none
 *
 * */

void SPI_PeriClockControl(SPI_RegDef_t* pSPIx , uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}

	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DIS();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DIS();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DIS();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DIS();
		}
	}
}

/*********************************************************
 *
 * @fn 			- SPI_Init
 *
 * @brief		- it will initialize spi
 *
 * @param[in] 	- spi handle address
 * @param[in] 	-
 * @param[in] 	-
 *
 * @return 		- none
 *
 * @Note		- none
 *
 * */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	uint32_t tempreg =0;

	// 1. Configure device mode
	tempreg |= (pSPIHandle->SPIConfig->SPI_DeviceMode << 2);

	// 2. Configure Bus config

	if(pSPIHandle->SPIConfig->SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		// BIDIMODE = 0
		tempreg &= ~(1 << 15);
	}
	else if(pSPIHandle->SPIConfig->SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// BIDIMODE = 1 and O/P EN accordingly
		tempreg |= (1 << 15);
	}
	else if(pSPIHandle->SPIConfig->SPI_BusConfig == SPI_BUS_CONFIG_SIM_RX)
	{
		// BIDIMODE = 0 and RXONLY should be set
		tempreg &= ~(1 << 15);
		tempreg |= (1 << 10);
	}

	// 3. Configure SCLK (baud rate)

	tempreg |= (pSPIHandle->SPIConfig->SPI_SclkSpeed << 3);

	// 4. Configure data frame format(DFF)

	tempreg |= (pSPIHandle->SPIConfig->SPI_DFF << 11);

	// 5. Configure Clock Phase(CPHA)

	tempreg |= (pSPIHandle->SPIConfig->SPI_CPHA << 0);

	// 6. Configure Clock polarity(CPOL)
	tempreg |= (pSPIHandle->SPIConfig->SPI_CPOL << 1);

	// 7. Configure SSM (software slave management)
	tempreg |= (pSPIHandle->SPIConfig->SPI_SSM << 9);

	// assign value to CR1 register
	pSPIHandle->pSPIx->CR1 = tempreg;
}

/*********************************************************
 *
 * @fn 			- SPI_DeInit
 *
 * @brief		- it will de-initialize spi
 *
 * @param[in] 	- SPI1/SPI2/SPI3/SPI4
 * @param[in] 	-
 * @param[in] 	-
 *
 * @return 		- none
 *
 * @Note		- none
 *
 * */


void SPI_DeInit(SPI_RegDef_t* pSPIx)
{

}
