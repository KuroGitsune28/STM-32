
002_UART2_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002754  08002754  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007f2c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000164c  00000000  00000000  00027fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a8  00000000  00000000  000295f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000518  00000000  00000000  00029ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc84  00000000  00000000  0002a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008b8d  00000000  00000000  00049e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1ad2  00000000  00000000  000529c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a38  00000000  00000000  0011449c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00115ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026f4 	.word	0x080026f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080026f4 	.word	0x080026f4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b089      	sub	sp, #36	; 0x24
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fa3d 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f82b 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8dd 	bl	80006a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 f8bb 	bl	8000660 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f88f 	bl	800060c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char txdata[30] = "Hello World!\r\n";
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x5c>)
 80004f0:	463c      	mov	r4, r7
 80004f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f4:	c407      	stmia	r4!, {r0, r1, r2}
 80004f6:	8023      	strh	r3, [r4, #0]
 80004f8:	3402      	adds	r4, #2
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	7023      	strb	r3, [r4, #0]
 80004fe:	f107 030f 	add.w	r3, r7, #15
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	f8c3 200b 	str.w	r2, [r3, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2,(uint8_t*)txdata,strlen(txdata),10);
 800050e:	463b      	mov	r3, r7
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe59 	bl	80001c8 <strlen>
 8000516:	4603      	mov	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	4639      	mov	r1, r7
 800051c:	230a      	movs	r3, #10
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x60>)
 8000520:	f001 fd47 	bl	8001fb2 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f000 fa88 	bl	8000a3c <HAL_Delay>
	  HAL_UART_Transmit(&huart2,(uint8_t*)txdata,strlen(txdata),10);
 800052c:	e7ef      	b.n	800050e <main+0x3a>
 800052e:	bf00      	nop
 8000530:	0800270c 	.word	0x0800270c
 8000534:	20000028 	.word	0x20000028

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f8a8 	bl	800269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005ac:	2332      	movs	r3, #50	; 0x32
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f813 	bl	80015e8 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f8ae 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fa74 	bl	8001ad8 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f6:	f000 f897 	bl	8000728 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000644:	f001 fc68 	bl	8001f18 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f86b 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40004400 	.word	0x40004400

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_DMA_Init+0x3c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <MX_DMA_Init+0x3c>)
 8000670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_DMA_Init+0x3c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2010      	movs	r0, #16
 8000688:	f000 fad7 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800068c:	2010      	movs	r0, #16
 800068e:	f000 faf0 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0x80>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_GPIO_Init+0x80>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0x80>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_GPIO_Init+0x80>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_GPIO_Init+0x80>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x84>)
 80006f6:	f000 ff5d 	bl	80015b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_GPIO_Init+0x84>)
 8000714:	f000 fdb2 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40020c00 	.word	0x40020c00

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_MspInit+0x4c>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000772:	2007      	movs	r0, #7
 8000774:	f000 fa56 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a30      	ldr	r2, [pc, #192]	; (8000864 <HAL_UART_MspInit+0xe0>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d159      	bne.n	800085a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a2e      	ldr	r2, [pc, #184]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a27      	ldr	r2, [pc, #156]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <HAL_UART_MspInit+0xe4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ee:	2307      	movs	r3, #7
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <HAL_UART_MspInit+0xe8>)
 80007fa:	f000 fd3f 	bl	800127c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000800:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <HAL_UART_MspInit+0xf0>)
 8000802:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800080a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_UART_MspInit+0xec>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0xec>)
 800081a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_UART_MspInit+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_UART_MspInit+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000840:	f000 fa32 	bl	8000ca8 <HAL_DMA_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800084a:	f7ff ff6d 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_UART_MspInit+0xec>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	2000006c 	.word	0x2000006c
 8000874:	40026088 	.word	0x40026088

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89a 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <DMA1_Stream5_IRQHandler+0x10>)
 80008d2:	f000 fa97 	bl	8000e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000006c 	.word	0x2000006c

080008e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800092e:	f7ff ffd7 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f001 febb 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fdcd 	bl	80004d4 <main>
  bx  lr    
 800093a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000948:	0800275c 	.word	0x0800275c
  ldr r2, =_sbss
 800094c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000950:	200000d0 	.word	0x200000d0

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f94f 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fed2 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f967 	bl	8000c8e <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f92f 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	200000cc 	.word	0x200000cc

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200000cc 	.word	0x200000cc

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_Delay+0x44>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff feb6 	bl	8000a24 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e099      	b.n	8000df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ce4:	e00f      	b.n	8000d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ce6:	f7ff fe9d 	bl	8000a24 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d908      	bls.n	8000d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e078      	b.n	8000df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e8      	bne.n	8000ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <HAL_DMA_Init+0x158>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d107      	bne.n	8000d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f023 0307 	bic.w	r3, r3, #7
 8000d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d117      	bne.n	8000dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00e      	beq.n	8000dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f9e9 	bl	8001184 <DMA_CheckFifoParam>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e016      	b.n	8000df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f9a0 	bl	8001118 <DMA_CalcBaseAndBitshift>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de0:	223f      	movs	r2, #63	; 0x3f
 8000de2:	409a      	lsls	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	f010803f 	.word	0xf010803f

08000e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e10:	4b8e      	ldr	r3, [pc, #568]	; (800104c <HAL_DMA_IRQHandler+0x248>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a8e      	ldr	r2, [pc, #568]	; (8001050 <HAL_DMA_IRQHandler+0x24c>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	0a9b      	lsrs	r3, r3, #10
 8000e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2e:	2208      	movs	r2, #8
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d01a      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0204 	bic.w	r2, r2, #4
 8000e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	2201      	movs	r2, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d012      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e92:	2201      	movs	r2, #1
 8000e94:	409a      	lsls	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9e:	f043 0202 	orr.w	r2, r3, #2
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eaa:	2204      	movs	r2, #4
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d012      	beq.n	8000edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00b      	beq.n	8000edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec8:	2204      	movs	r2, #4
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed4:	f043 0204 	orr.w	r2, r3, #4
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d043      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d03c      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efe:	2210      	movs	r2, #16
 8000f00:	409a      	lsls	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d018      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d108      	bne.n	8000f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d024      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	4798      	blx	r3
 8000f32:	e01f      	b.n	8000f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01b      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	4798      	blx	r3
 8000f44:	e016      	b.n	8000f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d107      	bne.n	8000f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0208 	bic.w	r2, r2, #8
 8000f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f78:	2220      	movs	r2, #32
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 808f 	beq.w	80010a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 8087 	beq.w	80010a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d136      	bne.n	800101c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0216 	bic.w	r2, r2, #22
 8000fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <HAL_DMA_IRQHandler+0x1da>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0208 	bic.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff2:	223f      	movs	r2, #63	; 0x3f
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100e:	2b00      	cmp	r3, #0
 8001010:	d07e      	beq.n	8001110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
        }
        return;
 800101a:	e079      	b.n	8001110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d01d      	beq.n	8001066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10d      	bne.n	8001054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	2b00      	cmp	r3, #0
 800103e:	d031      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
 8001048:	e02c      	b.n	80010a4 <HAL_DMA_IRQHandler+0x2a0>
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000
 8001050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
 8001064:	e01e      	b.n	80010a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10f      	bne.n	8001094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0210 	bic.w	r2, r2, #16
 8001082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d032      	beq.n	8001112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d022      	beq.n	80010fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2205      	movs	r2, #5
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d307      	bcc.n	80010ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f2      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x2cc>
 80010ea:	e000      	b.n	80010ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80010ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	4798      	blx	r3
 800110e:	e000      	b.n	8001112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001110:	bf00      	nop
    }
  }
}
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	3b10      	subs	r3, #16
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <DMA_CalcBaseAndBitshift+0x64>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <DMA_CalcBaseAndBitshift+0x68>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d909      	bls.n	800115a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	1d1a      	adds	r2, r3, #4
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	659a      	str	r2, [r3, #88]	; 0x58
 8001158:	e007      	b.n	800116a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	aaaaaaab 	.word	0xaaaaaaab
 8001180:	08002744 	.word	0x08002744

08001184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d11f      	bne.n	80011de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d856      	bhi.n	8001252 <DMA_CheckFifoParam+0xce>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <DMA_CheckFifoParam+0x28>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011cf 	.word	0x080011cf
 80011b4:	080011bd 	.word	0x080011bd
 80011b8:	08001253 	.word	0x08001253
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d046      	beq.n	8001256 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011cc:	e043      	b.n	8001256 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011d6:	d140      	bne.n	800125a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011dc:	e03d      	b.n	800125a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011e6:	d121      	bne.n	800122c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d837      	bhi.n	800125e <DMA_CheckFifoParam+0xda>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <DMA_CheckFifoParam+0x70>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001205 	.word	0x08001205
 80011f8:	0800120b 	.word	0x0800120b
 80011fc:	08001205 	.word	0x08001205
 8001200:	0800121d 	.word	0x0800121d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
      break;
 8001208:	e030      	b.n	800126c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d025      	beq.n	8001262 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800121a:	e022      	b.n	8001262 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001224:	d11f      	bne.n	8001266 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800122a:	e01c      	b.n	8001266 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d903      	bls.n	800123a <DMA_CheckFifoParam+0xb6>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d003      	beq.n	8001240 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001238:	e018      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
      break;
 800123e:	e015      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00e      	beq.n	800126a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
      break;
 8001250:	e00b      	b.n	800126a <DMA_CheckFifoParam+0xe6>
      break;
 8001252:	bf00      	nop
 8001254:	e00a      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;
 8001256:	bf00      	nop
 8001258:	e008      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;
 800125a:	bf00      	nop
 800125c:	e006      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;
 800125e:	bf00      	nop
 8001260:	e004      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;
 8001262:	bf00      	nop
 8001264:	e002      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;   
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <DMA_CheckFifoParam+0xe8>
      break;
 800126a:	bf00      	nop
    }
  } 
  
  return status; 
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e16b      	b.n	8001570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 815a 	bne.w	800156a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80b4 	beq.w	800156a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a5f      	ldr	r2, [pc, #380]	; (8001588 <HAL_GPIO_Init+0x30c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a5b      	ldr	r2, [pc, #364]	; (800158c <HAL_GPIO_Init+0x310>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x314>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x318>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x31c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x320>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x21a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x216>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x328>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x212>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x32c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x20e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x330>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x20a>
 8001482:	2307      	movs	r3, #7
 8001484:	e00e      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001486:	2308      	movs	r3, #8
 8001488:	e00c      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800148a:	2306      	movs	r3, #6
 800148c:	e00a      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800148e:	2305      	movs	r3, #5
 8001490:	e008      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001492:	2304      	movs	r3, #4
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 8001496:	2303      	movs	r3, #3
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x228>
 80014a2:	2300      	movs	r3, #0
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x310>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_GPIO_Init+0x334>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153a:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_GPIO_Init+0x334>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	f67f ae90 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40021400 	.word	0x40021400
 80015a8:	40021800 	.word	0x40021800
 80015ac:	40021c00 	.word	0x40021c00
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e267      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d075      	beq.n	80016f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b04      	cmp	r3, #4
 8001610:	d00c      	beq.n	800162c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161a:	2b08      	cmp	r3, #8
 800161c:	d112      	bne.n	8001644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800162a:	d10b      	bne.n	8001644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d05b      	beq.n	80016f0 <HAL_RCC_OscConfig+0x108>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d157      	bne.n	80016f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e242      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164c:	d106      	bne.n	800165c <HAL_RCC_OscConfig+0x74>
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a75      	ldr	r2, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e01d      	b.n	8001698 <HAL_RCC_OscConfig+0xb0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x98>
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6f      	ldr	r2, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6d      	ldr	r3, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6c      	ldr	r2, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0xb0>
 8001680:	4b69      	ldr	r3, [pc, #420]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a68      	ldr	r2, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9c0 	bl	8000a24 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff f9bc 	bl	8000a24 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e207      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0xc0>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9ac 	bl	8000a24 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff f9a8 	bl	8000a24 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1f3      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0xe8>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d063      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b44      	ldr	r3, [pc, #272]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x152>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e1c7      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4937      	ldr	r1, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_RCC_OscConfig+0x244>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff f961 	bl	8000a24 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff f95d 	bl	8000a24 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1a8      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4925      	ldr	r1, [pc, #148]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x244>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f940 	bl	8000a24 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff f93c 	bl	8000a24 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e187      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d036      	beq.n	8001840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d016      	beq.n	8001808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_RCC_OscConfig+0x248>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff f920 	bl	8000a24 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff f91c 	bl	8000a24 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e167      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x240>)
 80017fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x200>
 8001806:	e01b      	b.n	8001840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_OscConfig+0x248>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180e:	f7ff f909 	bl	8000a24 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	e00e      	b.n	8001834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff f905 	bl	8000a24 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d907      	bls.n	8001834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e150      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
 8001828:	40023800 	.word	0x40023800
 800182c:	42470000 	.word	0x42470000
 8001830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ea      	bne.n	8001816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8097 	beq.w	800197c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b81      	ldr	r3, [pc, #516]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10f      	bne.n	800187e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b7d      	ldr	r3, [pc, #500]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a7c      	ldr	r2, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b7a      	ldr	r3, [pc, #488]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x474>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <HAL_RCC_OscConfig+0x474>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x474>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7ff f8c5 	bl	8000a24 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7ff f8c1 	bl	8000a24 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e10c      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x474>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2ea>
 80018c4:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a63      	ldr	r2, [pc, #396]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	e01c      	b.n	800190c <HAL_RCC_OscConfig+0x324>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x30c>
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a5e      	ldr	r2, [pc, #376]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a5b      	ldr	r2, [pc, #364]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	e00b      	b.n	800190c <HAL_RCC_OscConfig+0x324>
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a57      	ldr	r2, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d015      	beq.n	8001940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff f886 	bl	8000a24 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	e00a      	b.n	8001932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f7ff f882 	bl	8000a24 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e0cb      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ee      	beq.n	800191c <HAL_RCC_OscConfig+0x334>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff f870 	bl	8000a24 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f86c 	bl	8000a24 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0b5      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195e:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ee      	bne.n	8001948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a1 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d05c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d141      	bne.n	8001a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_OscConfig+0x478>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff f840 	bl	8000a24 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f83c 	bl	8000a24 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e087      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	019b      	lsls	r3, r3, #6
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	491b      	ldr	r1, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x478>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff f815 	bl	8000a24 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f811 	bl	8000a24 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e05c      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x416>
 8001a1c:	e054      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x478>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe fffe 	bl	8000a24 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7fe fffa 	bl	8000a24 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e045      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x470>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x444>
 8001a4a:	e03d      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e038      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x4ec>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d028      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d121      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d11a      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	3b01      	subs	r3, #1
 8001aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0cc      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d90c      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d044      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d119      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e067      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4934      	ldr	r1, [pc, #208]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc8:	f7fe ff2c 	bl	8000a24 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7fe ff28 	bl	8000a24 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e04f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d20c      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fe8c 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	0800272c 	.word	0x0800272c
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b094      	sub	sp, #80	; 0x50
 8001caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cbc:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	f200 80e1 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x3a>
 8001cd6:	e0db      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001cdc:	e0db      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce2:	e0d8      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cee:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d16:	4622      	mov	r2, r4
 8001d18:	462b      	mov	r3, r5
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0159      	lsls	r1, r3, #5
 8001d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d28:	0150      	lsls	r0, r2, #5
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4621      	mov	r1, r4
 8001d30:	1a51      	subs	r1, r2, r1
 8001d32:	6139      	str	r1, [r7, #16]
 8001d34:	4629      	mov	r1, r5
 8001d36:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d48:	4659      	mov	r1, fp
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d52:	4651      	mov	r1, sl
 8001d54:	018a      	lsls	r2, r1, #6
 8001d56:	4651      	mov	r1, sl
 8001d58:	ebb2 0801 	subs.w	r8, r2, r1
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d76:	4690      	mov	r8, r2
 8001d78:	4699      	mov	r9, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	eb18 0303 	adds.w	r3, r8, r3
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	462b      	mov	r3, r5
 8001d84:	eb49 0303 	adc.w	r3, r9, r3
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d96:	4629      	mov	r1, r5
 8001d98:	024b      	lsls	r3, r1, #9
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da0:	4621      	mov	r1, r4
 8001da2:	024a      	lsls	r2, r1, #9
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001daa:	2200      	movs	r2, #0
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001db4:	f7fe fa10 	bl	80001d8 <__aeabi_uldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc0:	e058      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4611      	mov	r1, r2
 8001dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ddc:	4642      	mov	r2, r8
 8001dde:	464b      	mov	r3, r9
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	0159      	lsls	r1, r3, #5
 8001dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dee:	0150      	lsls	r0, r2, #5
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4641      	mov	r1, r8
 8001df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e14:	ebb2 040a 	subs.w	r4, r2, sl
 8001e18:	eb63 050b 	sbc.w	r5, r3, fp
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	00eb      	lsls	r3, r5, #3
 8001e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2a:	00e2      	lsls	r2, r4, #3
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	18e3      	adds	r3, r4, r3
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	464b      	mov	r3, r9
 8001e38:	eb45 0303 	adc.w	r3, r5, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	028b      	lsls	r3, r1, #10
 8001e4e:	4621      	mov	r1, r4
 8001e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e54:	4621      	mov	r1, r4
 8001e56:	028a      	lsls	r2, r1, #10
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	61fa      	str	r2, [r7, #28]
 8001e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e68:	f7fe f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3750      	adds	r7, #80	; 0x50
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	0800273c 	.word	0x0800273c

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	0800273c 	.word	0x0800273c

08001f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e03f      	b.n	8001faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fc20 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f929 	bl	80021b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b08a      	sub	sp, #40	; 0x28
 8001fb6:	af02      	add	r7, sp, #8
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d17c      	bne.n	80020cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_UART_Transmit+0x2c>
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e075      	b.n	80020ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_UART_Transmit+0x3e>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e06e      	b.n	80020ce <HAL_UART_Transmit+0x11c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002006:	f7fe fd0d 	bl	8000a24 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	88fa      	ldrh	r2, [r7, #6]
 8002010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	d108      	bne.n	8002034 <HAL_UART_Transmit+0x82>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e003      	b.n	800203c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002044:	e02a      	b.n	800209c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f840 	bl	80020d6 <UART_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e036      	b.n	80020ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	3302      	adds	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	e007      	b.n	800208e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3301      	adds	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1cf      	bne.n	8002046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f810 	bl	80020d6 <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e006      	b.n	80020ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e000      	b.n	80020ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
  }
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b090      	sub	sp, #64	; 0x40
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e6:	e050      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d04c      	beq.n	800218a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x30>
 80020f6:	f7fe fc95 	bl	8000a24 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002102:	429a      	cmp	r2, r3
 8002104:	d241      	bcs.n	800218a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	330c      	adds	r3, #12
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002126:	637a      	str	r2, [r7, #52]	; 0x34
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800212c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e5      	bne.n	8002106 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3314      	adds	r3, #20
 8002140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	613b      	str	r3, [r7, #16]
   return(result);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3314      	adds	r3, #20
 8002158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215a:	623a      	str	r2, [r7, #32]
 800215c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215e:	69f9      	ldr	r1, [r7, #28]
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	e841 2300 	strex	r3, r2, [r1]
 8002166:	61bb      	str	r3, [r7, #24]
   return(result);
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e5      	bne.n	800213a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e00f      	b.n	80021aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d09f      	beq.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3740      	adds	r7, #64	; 0x40
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b8:	b0c0      	sub	sp, #256	; 0x100
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	ea40 0301 	orr.w	r3, r0, r1
 80021dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800220c:	f021 010c 	bic.w	r1, r1, #12
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800221a:	430b      	orrs	r3, r1
 800221c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800222a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222e:	6999      	ldr	r1, [r3, #24]
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	ea40 0301 	orr.w	r3, r0, r1
 800223a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <UART_SetConfig+0x2cc>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d005      	beq.n	8002254 <UART_SetConfig+0xa0>
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <UART_SetConfig+0x2d0>)
 8002250:	429a      	cmp	r2, r3
 8002252:	d104      	bne.n	800225e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002254:	f7ff fe4c 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8002258:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800225c:	e003      	b.n	8002266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800225e:	f7ff fe33 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002262:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002270:	f040 810c 	bne.w	800248c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800227e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	1891      	adds	r1, r2, r2
 800228c:	65b9      	str	r1, [r7, #88]	; 0x58
 800228e:	415b      	adcs	r3, r3
 8002290:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002296:	4621      	mov	r1, r4
 8002298:	eb12 0801 	adds.w	r8, r2, r1
 800229c:	4629      	mov	r1, r5
 800229e:	eb43 0901 	adc.w	r9, r3, r1
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b6:	4690      	mov	r8, r2
 80022b8:	4699      	mov	r9, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	eb18 0303 	adds.w	r3, r8, r3
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022c4:	462b      	mov	r3, r5
 80022c6:	eb49 0303 	adc.w	r3, r9, r3
 80022ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022e2:	460b      	mov	r3, r1
 80022e4:	18db      	adds	r3, r3, r3
 80022e6:	653b      	str	r3, [r7, #80]	; 0x50
 80022e8:	4613      	mov	r3, r2
 80022ea:	eb42 0303 	adc.w	r3, r2, r3
 80022ee:	657b      	str	r3, [r7, #84]	; 0x54
 80022f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022f8:	f7fd ff6e 	bl	80001d8 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <UART_SetConfig+0x2d4>)
 8002302:	fba3 2302 	umull	r2, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	011c      	lsls	r4, r3, #4
 800230a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002314:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800231c:	4642      	mov	r2, r8
 800231e:	464b      	mov	r3, r9
 8002320:	1891      	adds	r1, r2, r2
 8002322:	64b9      	str	r1, [r7, #72]	; 0x48
 8002324:	415b      	adcs	r3, r3
 8002326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800232c:	4641      	mov	r1, r8
 800232e:	eb12 0a01 	adds.w	sl, r2, r1
 8002332:	4649      	mov	r1, r9
 8002334:	eb43 0b01 	adc.w	fp, r3, r1
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234c:	4692      	mov	sl, r2
 800234e:	469b      	mov	fp, r3
 8002350:	4643      	mov	r3, r8
 8002352:	eb1a 0303 	adds.w	r3, sl, r3
 8002356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800235a:	464b      	mov	r3, r9
 800235c:	eb4b 0303 	adc.w	r3, fp, r3
 8002360:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002370:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002378:	460b      	mov	r3, r1
 800237a:	18db      	adds	r3, r3, r3
 800237c:	643b      	str	r3, [r7, #64]	; 0x40
 800237e:	4613      	mov	r3, r2
 8002380:	eb42 0303 	adc.w	r3, r2, r3
 8002384:	647b      	str	r3, [r7, #68]	; 0x44
 8002386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800238a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800238e:	f7fd ff23 	bl	80001d8 <__aeabi_uldivmod>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4611      	mov	r1, r2
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <UART_SetConfig+0x2d4>)
 800239a:	fba3 2301 	umull	r2, r3, r3, r1
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2264      	movs	r2, #100	; 0x64
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <UART_SetConfig+0x2d4>)
 80023b0:	fba3 2302 	umull	r2, r3, r3, r2
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023bc:	441c      	add	r4, r3
 80023be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	1891      	adds	r1, r2, r2
 80023d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80023d8:	415b      	adcs	r3, r3
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023e0:	4641      	mov	r1, r8
 80023e2:	1851      	adds	r1, r2, r1
 80023e4:	6339      	str	r1, [r7, #48]	; 0x30
 80023e6:	4649      	mov	r1, r9
 80023e8:	414b      	adcs	r3, r1
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023f8:	4659      	mov	r1, fp
 80023fa:	00cb      	lsls	r3, r1, #3
 80023fc:	4651      	mov	r1, sl
 80023fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002402:	4651      	mov	r1, sl
 8002404:	00ca      	lsls	r2, r1, #3
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	4603      	mov	r3, r0
 800240c:	4642      	mov	r2, r8
 800240e:	189b      	adds	r3, r3, r2
 8002410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002414:	464b      	mov	r3, r9
 8002416:	460a      	mov	r2, r1
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800242c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002434:	460b      	mov	r3, r1
 8002436:	18db      	adds	r3, r3, r3
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	4613      	mov	r3, r2
 800243c:	eb42 0303 	adc.w	r3, r2, r3
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800244a:	f7fd fec5 	bl	80001d8 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <UART_SetConfig+0x2d4>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	3332      	adds	r3, #50	; 0x32
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <UART_SetConfig+0x2d4>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 0207 	and.w	r2, r3, #7
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4422      	add	r2, r4
 800247a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800247c:	e106      	b.n	800268c <UART_SetConfig+0x4d8>
 800247e:	bf00      	nop
 8002480:	40011000 	.word	0x40011000
 8002484:	40011400 	.word	0x40011400
 8002488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800248c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002490:	2200      	movs	r2, #0
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002496:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800249a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800249e:	4642      	mov	r2, r8
 80024a0:	464b      	mov	r3, r9
 80024a2:	1891      	adds	r1, r2, r2
 80024a4:	6239      	str	r1, [r7, #32]
 80024a6:	415b      	adcs	r3, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ae:	4641      	mov	r1, r8
 80024b0:	1854      	adds	r4, r2, r1
 80024b2:	4649      	mov	r1, r9
 80024b4:	eb43 0501 	adc.w	r5, r3, r1
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	00eb      	lsls	r3, r5, #3
 80024c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024d4:	464b      	mov	r3, r9
 80024d6:	eb45 0303 	adc.w	r3, r5, r3
 80024da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024fa:	4629      	mov	r1, r5
 80024fc:	008b      	lsls	r3, r1, #2
 80024fe:	4621      	mov	r1, r4
 8002500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002504:	4621      	mov	r1, r4
 8002506:	008a      	lsls	r2, r1, #2
 8002508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800250c:	f7fd fe64 	bl	80001d8 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <UART_SetConfig+0x4e4>)
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	011c      	lsls	r4, r3, #4
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800252c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	61b9      	str	r1, [r7, #24]
 8002538:	415b      	adcs	r3, r3
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002540:	4641      	mov	r1, r8
 8002542:	1851      	adds	r1, r2, r1
 8002544:	6139      	str	r1, [r7, #16]
 8002546:	4649      	mov	r1, r9
 8002548:	414b      	adcs	r3, r1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002558:	4659      	mov	r1, fp
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4651      	mov	r1, sl
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4642      	mov	r2, r8
 800256e:	189b      	adds	r3, r3, r2
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002574:	464b      	mov	r3, r9
 8002576:	460a      	mov	r2, r1
 8002578:	eb42 0303 	adc.w	r3, r2, r3
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	67bb      	str	r3, [r7, #120]	; 0x78
 800258a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002598:	4649      	mov	r1, r9
 800259a:	008b      	lsls	r3, r1, #2
 800259c:	4641      	mov	r1, r8
 800259e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025a2:	4641      	mov	r1, r8
 80025a4:	008a      	lsls	r2, r1, #2
 80025a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025aa:	f7fd fe15 	bl	80001d8 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <UART_SetConfig+0x4e4>)
 80025b6:	fba3 2301 	umull	r2, r3, r3, r1
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2264      	movs	r2, #100	; 0x64
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	1acb      	subs	r3, r1, r3
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	3332      	adds	r3, #50	; 0x32
 80025c8:	4a33      	ldr	r2, [pc, #204]	; (8002698 <UART_SetConfig+0x4e4>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d4:	441c      	add	r4, r3
 80025d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025da:	2200      	movs	r2, #0
 80025dc:	673b      	str	r3, [r7, #112]	; 0x70
 80025de:	677a      	str	r2, [r7, #116]	; 0x74
 80025e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	415b      	adcs	r3, r3
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025f4:	4641      	mov	r1, r8
 80025f6:	1851      	adds	r1, r2, r1
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	4649      	mov	r1, r9
 80025fc:	414b      	adcs	r3, r1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800260c:	4659      	mov	r1, fp
 800260e:	00cb      	lsls	r3, r1, #3
 8002610:	4651      	mov	r1, sl
 8002612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002616:	4651      	mov	r1, sl
 8002618:	00ca      	lsls	r2, r1, #3
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	4603      	mov	r3, r0
 8002620:	4642      	mov	r2, r8
 8002622:	189b      	adds	r3, r3, r2
 8002624:	66bb      	str	r3, [r7, #104]	; 0x68
 8002626:	464b      	mov	r3, r9
 8002628:	460a      	mov	r2, r1
 800262a:	eb42 0303 	adc.w	r3, r2, r3
 800262e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
 800263a:	667a      	str	r2, [r7, #100]	; 0x64
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002648:	4649      	mov	r1, r9
 800264a:	008b      	lsls	r3, r1, #2
 800264c:	4641      	mov	r1, r8
 800264e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002652:	4641      	mov	r1, r8
 8002654:	008a      	lsls	r2, r1, #2
 8002656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800265a:	f7fd fdbd 	bl	80001d8 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <UART_SetConfig+0x4e4>)
 8002664:	fba3 1302 	umull	r1, r3, r3, r2
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	2164      	movs	r1, #100	; 0x64
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	3332      	adds	r3, #50	; 0x32
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <UART_SetConfig+0x4e4>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4422      	add	r2, r4
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002692:	46bd      	mov	sp, r7
 8002694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002698:	51eb851f 	.word	0x51eb851f

0800269c <memset>:
 800269c:	4402      	add	r2, r0
 800269e:	4603      	mov	r3, r0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	f803 1b01 	strb.w	r1, [r3], #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4d0d      	ldr	r5, [pc, #52]	; (80026e4 <__libc_init_array+0x38>)
 80026b0:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	2600      	movs	r6, #0
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	4d0b      	ldr	r5, [pc, #44]	; (80026ec <__libc_init_array+0x40>)
 80026be:	4c0c      	ldr	r4, [pc, #48]	; (80026f0 <__libc_init_array+0x44>)
 80026c0:	f000 f818 	bl	80026f4 <_init>
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	2600      	movs	r6, #0
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	08002754 	.word	0x08002754
 80026e8:	08002754 	.word	0x08002754
 80026ec:	08002754 	.word	0x08002754
 80026f0:	08002758 	.word	0x08002758

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
