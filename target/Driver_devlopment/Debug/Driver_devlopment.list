
Driver_devlopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b00  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ca8  08000ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb4  08000cbc  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010cbc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ce6  2**0
                  CONTENTS, READONLY
 14 .debug_info   000011e6  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000456  00000000  00000000  00011f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  00012368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000e4  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002721  00000000  00000000  0001258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001916  00000000  00000000  00014cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000928a  00000000  00000000  000165c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000448  00000000  00000000  0001f850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0001fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c90 	.word	0x08000c90

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c90 	.word	0x08000c90

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_PeriClockControl>:
 *
 * @Note		- none
 *
 * */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx , uint8_t EnorDi)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d162      	bne.n	80002d0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a5b      	ldr	r2, [pc, #364]	; (800037c <GPIO_PeriClockControl+0x184>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000212:	4b5b      	ldr	r3, [pc, #364]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	4a5a      	ldr	r2, [pc, #360]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DIS();
		}
	}
}
 800021e:	e0a7      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOB)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a58      	ldr	r2, [pc, #352]	; (8000384 <GPIO_PeriClockControl+0x18c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000228:	4b55      	ldr	r3, [pc, #340]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a54      	ldr	r2, [pc, #336]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000234:	e09c      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOC)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a53      	ldr	r2, [pc, #332]	; (8000388 <GPIO_PeriClockControl+0x190>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800023e:	4b50      	ldr	r3, [pc, #320]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a4f      	ldr	r2, [pc, #316]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024a:	e091      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOD)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a4f      	ldr	r2, [pc, #316]	; (800038c <GPIO_PeriClockControl+0x194>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000254:	4b4a      	ldr	r3, [pc, #296]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a49      	ldr	r2, [pc, #292]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000260:	e086      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOE)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a4a      	ldr	r2, [pc, #296]	; (8000390 <GPIO_PeriClockControl+0x198>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800026a:	4b45      	ldr	r3, [pc, #276]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a44      	ldr	r2, [pc, #272]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000276:	e07b      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOF)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a46      	ldr	r2, [pc, #280]	; (8000394 <GPIO_PeriClockControl+0x19c>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000280:	4b3f      	ldr	r3, [pc, #252]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a3e      	ldr	r2, [pc, #248]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800028c:	e070      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOG)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a41      	ldr	r2, [pc, #260]	; (8000398 <GPIO_PeriClockControl+0x1a0>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000296:	4b3a      	ldr	r3, [pc, #232]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a39      	ldr	r2, [pc, #228]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a2:	e065      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOH)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a3d      	ldr	r2, [pc, #244]	; (800039c <GPIO_PeriClockControl+0x1a4>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002ac:	4b34      	ldr	r3, [pc, #208]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a33      	ldr	r2, [pc, #204]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b8:	e05a      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOI)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a38      	ldr	r2, [pc, #224]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d156      	bne.n	8000370 <GPIO_PeriClockControl+0x178>
			GPIOI_PCLK_EN();
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a2e      	ldr	r2, [pc, #184]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ce:	e04f      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		if(pGPIOx == GPIOA)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a2a      	ldr	r2, [pc, #168]	; (800037c <GPIO_PeriClockControl+0x184>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d104      	bne.n	80002e2 <GPIO_PeriClockControl+0xea>
			GPIOA_PCLK_DIS();
 80002d8:	4b29      	ldr	r3, [pc, #164]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e046      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOB)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a27      	ldr	r2, [pc, #156]	; (8000384 <GPIO_PeriClockControl+0x18c>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d104      	bne.n	80002f4 <GPIO_PeriClockControl+0xfc>
			GPIOB_PCLK_DIS();
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002ec:	4a24      	ldr	r2, [pc, #144]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f2:	e03d      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOC)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a24      	ldr	r2, [pc, #144]	; (8000388 <GPIO_PeriClockControl+0x190>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d104      	bne.n	8000306 <GPIO_PeriClockControl+0x10e>
			GPIOC_PCLK_DIS();
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <GPIO_PeriClockControl+0x188>)
 80002fe:	4a20      	ldr	r2, [pc, #128]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000304:	e034      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOD)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a20      	ldr	r2, [pc, #128]	; (800038c <GPIO_PeriClockControl+0x194>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d104      	bne.n	8000318 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DIS();
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000310:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e02b      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <GPIO_PeriClockControl+0x198>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d104      	bne.n	800032a <GPIO_PeriClockControl+0x132>
			GPIOE_PCLK_DIS();
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e022      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOF)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <GPIO_PeriClockControl+0x19c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d104      	bne.n	800033c <GPIO_PeriClockControl+0x144>
			GPIOF_PCLK_DIS();
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e019      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOG)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <GPIO_PeriClockControl+0x1a0>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d104      	bne.n	800034e <GPIO_PeriClockControl+0x156>
			GPIOG_PCLK_DIS();
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000346:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e010      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOH)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a12      	ldr	r2, [pc, #72]	; (800039c <GPIO_PeriClockControl+0x1a4>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d104      	bne.n	8000360 <GPIO_PeriClockControl+0x168>
			GPIOH_PCLK_DIS();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <GPIO_PeriClockControl+0x188>)
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e007      	b.n	8000370 <GPIO_PeriClockControl+0x178>
		else if(pGPIOx == GPIOI)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <GPIO_PeriClockControl+0x1a8>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d103      	bne.n	8000370 <GPIO_PeriClockControl+0x178>
			GPIOI_PCLK_DIS();
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <GPIO_PeriClockControl+0x188>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40020000 	.word	0x40020000
 8000380:	40023800 	.word	0x40023800
 8000384:	40020400 	.word	0x40020400
 8000388:	40020800 	.word	0x40020800
 800038c:	40020c00 	.word	0x40020c00
 8000390:	40021000 	.word	0x40021000
 8000394:	40021400 	.word	0x40021400
 8000398:	40021800 	.word	0x40021800
 800039c:	40021c00 	.word	0x40021c00
 80003a0:	40022000 	.word	0x40022000

080003a4 <GPIO_Init>:
 *
 * */

/* INITIALIZE N DEINITIALISZ */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

	// Enable peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff1e 	bl	80001f8 <GPIO_PeriClockControl>


	// 1. Configure the mode for GPIO
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d822      	bhi.n	800040a <GPIO_Init+0x66>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // resetting or clearing
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	2103      	movs	r1, #3
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	400a      	ands	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6819      	ldr	r1, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]

		temp=0;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	e0cb      	b.n	80005a2 <GPIO_Init+0x1fe>
	}
	else
	{
		/****************************************************************************************************************/
		// THIS WILL BE WRITTTEN LATER (INTERRUPT MODE)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d117      	bne.n	8000442 <GPIO_Init+0x9e>
		{
			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	4b4b      	ldr	r3, [pc, #300]	; (8000540 <GPIO_Init+0x19c>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a47      	ldr	r2, [pc, #284]	; (8000540 <GPIO_Init+0x19c>)
 8000424:	430b      	orrs	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
			//clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b45      	ldr	r3, [pc, #276]	; (8000540 <GPIO_Init+0x19c>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a41      	ldr	r2, [pc, #260]	; (8000540 <GPIO_Init+0x19c>)
 800043c:	400b      	ands	r3, r1
 800043e:	6093      	str	r3, [r2, #8]
 8000440:	e035      	b.n	80004ae <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d117      	bne.n	800047a <GPIO_Init+0xd6>
		{
			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <GPIO_Init+0x19c>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a39      	ldr	r2, [pc, #228]	; (8000540 <GPIO_Init+0x19c>)
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
			//clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <GPIO_Init+0x19c>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	43d2      	mvns	r2, r2
 8000470:	4611      	mov	r1, r2
 8000472:	4a33      	ldr	r2, [pc, #204]	; (8000540 <GPIO_Init+0x19c>)
 8000474:	400b      	ands	r3, r1
 8000476:	60d3      	str	r3, [r2, #12]
 8000478:	e019      	b.n	80004ae <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	795b      	ldrb	r3, [r3, #5]
 800047e:	2b06      	cmp	r3, #6
 8000480:	d115      	bne.n	80004ae <GPIO_Init+0x10a>
		{
			//configure Both RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <GPIO_Init+0x19c>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <GPIO_Init+0x19c>)
 8000494:	430b      	orrs	r3, r1
 8000496:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <GPIO_Init+0x19c>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a25      	ldr	r2, [pc, #148]	; (8000540 <GPIO_Init+0x19c>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	089b      	lsrs	r3, r3, #2
 80004b4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <GPIO_Init+0x1a0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d04e      	beq.n	8000568 <GPIO_Init+0x1c4>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a1e      	ldr	r2, [pc, #120]	; (8000548 <GPIO_Init+0x1a4>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d032      	beq.n	800053a <GPIO_Init+0x196>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1c      	ldr	r2, [pc, #112]	; (800054c <GPIO_Init+0x1a8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d02b      	beq.n	8000536 <GPIO_Init+0x192>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <GPIO_Init+0x1ac>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d024      	beq.n	8000532 <GPIO_Init+0x18e>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a19      	ldr	r2, [pc, #100]	; (8000554 <GPIO_Init+0x1b0>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d01d      	beq.n	800052e <GPIO_Init+0x18a>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a18      	ldr	r2, [pc, #96]	; (8000558 <GPIO_Init+0x1b4>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d016      	beq.n	800052a <GPIO_Init+0x186>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <GPIO_Init+0x1b8>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d00f      	beq.n	8000526 <GPIO_Init+0x182>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a15      	ldr	r2, [pc, #84]	; (8000560 <GPIO_Init+0x1bc>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d008      	beq.n	8000522 <GPIO_Init+0x17e>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <GPIO_Init+0x1c0>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d101      	bne.n	800051e <GPIO_Init+0x17a>
 800051a:	2308      	movs	r3, #8
 800051c:	e025      	b.n	800056a <GPIO_Init+0x1c6>
 800051e:	2300      	movs	r3, #0
 8000520:	e023      	b.n	800056a <GPIO_Init+0x1c6>
 8000522:	2307      	movs	r3, #7
 8000524:	e021      	b.n	800056a <GPIO_Init+0x1c6>
 8000526:	2306      	movs	r3, #6
 8000528:	e01f      	b.n	800056a <GPIO_Init+0x1c6>
 800052a:	2305      	movs	r3, #5
 800052c:	e01d      	b.n	800056a <GPIO_Init+0x1c6>
 800052e:	2304      	movs	r3, #4
 8000530:	e01b      	b.n	800056a <GPIO_Init+0x1c6>
 8000532:	2303      	movs	r3, #3
 8000534:	e019      	b.n	800056a <GPIO_Init+0x1c6>
 8000536:	2302      	movs	r3, #2
 8000538:	e017      	b.n	800056a <GPIO_Init+0x1c6>
 800053a:	2301      	movs	r3, #1
 800053c:	e015      	b.n	800056a <GPIO_Init+0x1c6>
 800053e:	bf00      	nop
 8000540:	40013c00 	.word	0x40013c00
 8000544:	40020000 	.word	0x40020000
 8000548:	40020400 	.word	0x40020400
 800054c:	40020800 	.word	0x40020800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	40021000 	.word	0x40021000
 8000558:	40021400 	.word	0x40021400
 800055c:	40021800 	.word	0x40021800
 8000560:	40021c00 	.word	0x40021c00
 8000564:	40022000 	.word	0x40022000
 8000568:	2300      	movs	r3, #0
 800056a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800056c:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <GPIO_Init+0x33c>)
 800056e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000570:	4a5b      	ldr	r2, [pc, #364]	; (80006e0 <GPIO_Init+0x33c>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = (portcode << (temp2 * 4));
 8000578:	7c7a      	ldrb	r2, [r7, #17]
 800057a:	7cbb      	ldrb	r3, [r7, #18]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f103 	lsl.w	r1, r2, r3
 8000582:	4a58      	ldr	r2, [pc, #352]	; (80006e4 <GPIO_Init+0x340>)
 8000584:	7cfb      	ldrb	r3, [r7, #19]
 8000586:	3302      	adds	r3, #2
 8000588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <GPIO_Init+0x344>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a52      	ldr	r2, [pc, #328]	; (80006e8 <GPIO_Init+0x344>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]

	}
	// 2. Configure the ospeed for GPIO

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	799b      	ldrb	r3, [r3, #6]
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); ///****************************************************IMP NOTE***************************************************************************
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	400a      	ands	r2, r1
 80005d0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6899      	ldr	r1, [r3, #8]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	430a      	orrs	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]

	temp=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	// 3. Configure the pupd for GPIO

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	79db      	ldrb	r3, [r3, #7]
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	68da      	ldr	r2, [r3, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2103      	movs	r1, #3
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	400a      	ands	r2, r1
 8000614:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68d9      	ldr	r1, [r3, #12]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	430a      	orrs	r2, r1
 8000624:	60da      	str	r2, [r3, #12]

	temp=0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
	// 4. Configure the otype for GPIO

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7a1b      	ldrb	r3, [r3, #8]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	4619      	mov	r1, r3
 8000646:	2301      	movs	r3, #1
 8000648:	408b      	lsls	r3, r1
 800064a:	43db      	mvns	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	400a      	ands	r2, r1
 8000654:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6859      	ldr	r1, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	430a      	orrs	r2, r1
 8000664:	605a      	str	r2, [r3, #4]

	temp=0;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
	// 5. Configure the alt functionality for GPIO

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ATLFN)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d131      	bne.n	80006d6 <GPIO_Init+0x332>
	{
		uint8_t temp1,temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8 ;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	743b      	strb	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8 ;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2) );
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7c3a      	ldrb	r2, [r7, #16]
 800068a:	3208      	adds	r2, #8
 800068c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	220f      	movs	r2, #15
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7c3a      	ldrb	r2, [r7, #16]
 80006a4:	4001      	ands	r1, r0
 80006a6:	3208      	adds	r2, #8
 80006a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAFMode << (4 * temp2) );
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	7c3a      	ldrb	r2, [r7, #16]
 80006b2:	3208      	adds	r2, #8
 80006b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	461a      	mov	r2, r3
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	7c3a      	ldrb	r2, [r7, #16]
 80006ce:	4301      	orrs	r1, r0
 80006d0:	3208      	adds	r2, #8
 80006d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40013800 	.word	0x40013800
 80006e8:	40013c00 	.word	0x40013c00

080006ec <GPIO_ReadFromInputPin>:
 * */


/* DATA READ AND WRITE */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]

	return value;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <GPIO_WriteToOutputPin>:
 * @Note		- none
 *
 * */

void GPIO_WriteToOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
 8000722:	4613      	mov	r3, r2
 8000724:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000726:	78bb      	ldrb	r3, [r7, #2]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d109      	bne.n	8000740 <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx ->ODR |= (1 << PinNumber) ;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	78fa      	ldrb	r2, [r7, #3]
 8000732:	2101      	movs	r1, #1
 8000734:	fa01 f202 	lsl.w	r2, r1, r2
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx ->ODR &= ~(1 << PinNumber) ;
	}
}
 800073e:	e009      	b.n	8000754 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx ->ODR &= ~(1 << PinNumber) ;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	78fa      	ldrb	r2, [r7, #3]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	615a      	str	r2, [r3, #20]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <SPI_PeriClockControl>:
 * @Note		- none
 *
 * */

void SPI_PeriClockControl(SPI_RegDef_t* pSPIx , uint8_t EnorDi)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d12b      	bne.n	80007ca <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <SPI_PeriClockControl+0xbc>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d106      	bne.n	8000788 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <SPI_PeriClockControl+0xc0>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <SPI_PeriClockControl+0xc0>)
 8000780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DIS();
		}
	}
}
 8000786:	e043      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a26      	ldr	r2, [pc, #152]	; (8000824 <SPI_PeriClockControl+0xc4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <SPI_PeriClockControl+0xc0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <SPI_PeriClockControl+0xc0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800079c:	e038      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI3)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SPI_PeriClockControl+0xc8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007b2:	e02d      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI4)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <SPI_PeriClockControl+0xcc>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d129      	bne.n	8000810 <SPI_PeriClockControl+0xb0>
			SPI4_PCLK_EN();
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007c8:	e022      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		if(pSPIx == SPI1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <SPI_PeriClockControl+0xbc>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d104      	bne.n	80007dc <SPI_PeriClockControl+0x7c>
			SPI1_PCLK_DIS();
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007da:	e019      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <SPI_PeriClockControl+0xc4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d104      	bne.n	80007ee <SPI_PeriClockControl+0x8e>
			SPI2_PCLK_DIS();
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ec:	e010      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <SPI_PeriClockControl+0xc8>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d104      	bne.n	8000800 <SPI_PeriClockControl+0xa0>
			SPI3_PCLK_DIS();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <SPI_PeriClockControl+0xc0>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fe:	e007      	b.n	8000810 <SPI_PeriClockControl+0xb0>
		else if(pSPIx == SPI4)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SPI_PeriClockControl+0xcc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d103      	bne.n	8000810 <SPI_PeriClockControl+0xb0>
			SPI4_PCLK_DIS();
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SPI_PeriClockControl+0xc0>)
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <SPI_PeriClockControl+0xc0>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40013000 	.word	0x40013000
 8000820:	40023800 	.word	0x40023800
 8000824:	40003800 	.word	0x40003800
 8000828:	40003c00 	.word	0x40003c00
 800082c:	40013400 	.word	0x40013400

08000830 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t* pSPIx,uint32_t Flagname)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & Flagname)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4013      	ands	r3, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <SPI_Init>:
 * @Note		- none
 *
 * */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	uint32_t tempreg =0;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff79 	bl	8000760 <SPI_PeriClockControl>


	// 1. Configure device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << 2);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

	// 2. Configure Bus config

	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	795b      	ldrb	r3, [r3, #5]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <SPI_Init+0x38>
	{
		// BIDIMODE = 0
		tempreg &= ~(1 << 15);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e014      	b.n	80008b8 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d104      	bne.n	80008a0 <SPI_Init+0x4a>
	{
		// BIDIMODE = 1 and O/P EN accordingly
		tempreg |= (1 << 15);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e00b      	b.n	80008b8 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIM_RX)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d107      	bne.n	80008b8 <SPI_Init+0x62>
	{
		// BIDIMODE = 0 and RXONLY should be set
		tempreg &= ~(1 << 15);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008ae:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure SCLK (baud rate)

	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << 3);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]

	// 4. Configure data frame format(DFF)

	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << 11);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	79db      	ldrb	r3, [r3, #7]
 80008ca:	02db      	lsls	r3, r3, #11
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

	// 5. Configure Clock Phase(CPHA)

	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << 0);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	461a      	mov	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

	// 6. Configure Clock polarity(CPOL)
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << 1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7a5b      	ldrb	r3, [r3, #9]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]

	// 7. Configure SSM (software slave management)
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << 9);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7a9b      	ldrb	r3, [r3, #10]
 80008f2:	025b      	lsls	r3, r3, #9
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

	// assign value to CR1 register
	pSPIHandle->pSPIx->CR1 = tempreg;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <SPI_SendData>:
 * @Note		- This is called blocking or Polling as while loop can run forever
 *
 * */

void SPI_SendData(SPI_RegDef_t* pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000918:	e027      	b.n	800096a <SPI_SendData+0x5e>
	{
		// 1. Check if TXBUFFER is empty
		while(! SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG));
 800091a:	bf00      	nop
 800091c:	2102      	movs	r1, #2
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff ff86 	bl	8000830 <SPI_GetFlagStatus>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f8      	beq.n	800091c <SPI_SendData+0x10>

		// 2. Check if DFF is 0 or 1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00e      	beq.n	8000954 <SPI_SendData+0x48>
		{
			// 16 bits DFF
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	60da      	str	r2, [r3, #12]
			Len--;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
			Len--;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3b01      	subs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	e00a      	b.n	800096a <SPI_SendData+0x5e>
		}
		else
		{
			//8-bit DFF
			pSPIx->DR = *pTxBuffer;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	60da      	str	r2, [r3, #12]
			Len--;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3b01      	subs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3301      	adds	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1d4      	bne.n	800091a <SPI_SendData+0xe>
		}
	}


}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <SPI_PeripheralControl>:
 * @Note		-
 *
 * */

void SPI_PeripheralControl(SPI_RegDef_t* pSPIx, uint8_t EnOrDi)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]

	if (EnOrDi == ENABLE)
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d106      	bne.n	800099a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000998:	e005      	b.n	80009a6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SPI_SSOEConfig>:
 * 1:--->SS output is enabled in master mode and when the cell is enabled. The cell cannot work in a multimaster environment
 *
 * */

void SPI_SSOEConfig(SPI_RegDef_t* pSPIx, uint8_t EnOrDi)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d106      	bne.n	80009d0 <SPI_SSOEConfig+0x20>
		{
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f043 0204 	orr.w	r2, r3, #4
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	605a      	str	r2, [r3, #4]
		}
		else
		{
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
		}
}
 80009ce:	e005      	b.n	80009dc <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f023 0204 	bic.w	r2, r3, #4
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	605a      	str	r2, [r3, #4]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <delay>:
 *      Author: ARYAN
 */
#include <string.h>
#include "stm3f407xx.h"

void delay(void){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
	for(uint32_t i =0;i<500000/2;i++);
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	e002      	b.n	80009fa <delay+0x12>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <delay+0x28>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d9f8      	bls.n	80009f4 <delay+0xc>
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	0003d08f 	.word	0x0003d08f

08000a14 <SPI2_GPIOInint>:
 * PB 15 --> MOSI
 *
 * */

void SPI2_GPIOInint(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;

	SPI_Pins.pGPIOx = GPIOB;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <SPI2_GPIOInint+0x60>)
 8000a1c:	607b      	str	r3, [r7, #4]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ATLFN;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAFMode = 5;
 8000a22:	2305      	movs	r3, #5
 8000a24:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000a26:	2300      	movs	r3, #0
 8000a28:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HI;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a32:	230d      	movs	r3, #13
 8000a34:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fcb3 	bl	80003a4 <GPIO_Init>
	// MISO
	//SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPI_Pins);

	// MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fcad 	bl	80003a4 <GPIO_Init>

	//NSS
	SPI_Pins.pGPIOx = GPIOB;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <SPI2_GPIOInint+0x60>)
 8000a4c:	607b      	str	r3, [r7, #4]
	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000a52:	2300      	movs	r3, #0
 8000a54:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a56:	2300      	movs	r3, #0
 8000a58:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_MED;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	72bb      	strb	r3, [r7, #10]
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fc9d 	bl	80003a4 <GPIO_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40020400 	.word	0x40020400

08000a78 <SPI2_Inint>:

void SPI2_Inint(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI_Handle;

	SPI_Handle.pSPIx = SPI2;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SPI2_Inint+0x38>)
 8000a80:	607b      	str	r3, [r7, #4]

	SPI_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000a82:	2301      	movs	r3, #1
 8000a84:	727b      	strb	r3, [r7, #9]
	SPI_Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000a86:	2301      	movs	r3, #1
 8000a88:	723b      	strb	r3, [r7, #8]
	SPI_Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; // to provide 2MHz clock
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	72bb      	strb	r3, [r7, #10]
	SPI_Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Software slave management mode as we dont actually need NSS
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
	SPI_Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72fb      	strb	r3, [r7, #11]
	SPI_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	733b      	strb	r3, [r7, #12]
	SPI_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	737b      	strb	r3, [r7, #13]


	SPI_Init(&SPI_Handle);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fed8 	bl	8000856 <SPI_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <GPIO_Buttoninit>:

/* FOR BUTTON */
void GPIO_Buttoninit()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpiobut;

	Gpiobut.pGPIOx = GPIOA;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <GPIO_Buttoninit+0x2c>)
 8000abc:	607b      	str	r3, [r7, #4]
	Gpiobut.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	723b      	strb	r3, [r7, #8]
	Gpiobut.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	727b      	strb	r3, [r7, #9]
	Gpiobut.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HI;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	72bb      	strb	r3, [r7, #10]
//	Gpiobut.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
	Gpiobut.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]

//	GPIO_PeriClockControl(GPIOA,ENABLE); NO NEED AS WE ARE ENABLING IN INIT FUNCTION

	GPIO_Init(&Gpiobut);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fc67 	bl	80003a4 <GPIO_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <GPIO_Led>:

void GPIO_Led()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	GPIO_Handle_t Gpioled;

	Gpioled.pGPIOx = GPIOD;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <GPIO_Led+0x30>)
 8000aec:	607b      	str	r3, [r7, #4]
	Gpioled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000aee:	230c      	movs	r3, #12
 8000af0:	723b      	strb	r3, [r7, #8]
	Gpioled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000af2:	2301      	movs	r3, #1
 8000af4:	727b      	strb	r3, [r7, #9]
	Gpioled.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_HI;
 8000af6:	2302      	movs	r3, #2
 8000af8:	72bb      	strb	r3, [r7, #10]
	Gpioled.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000afa:	2300      	movs	r3, #0
 8000afc:	733b      	strb	r3, [r7, #12]
	Gpioled.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000afe:	2300      	movs	r3, #0
 8000b00:	72fb      	strb	r3, [r7, #11]

//	GPIO_PeriClockControl(GPIOD,ENABLE);

	GPIO_Init(&Gpioled);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc4d 	bl	80003a4 <GPIO_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <main>:

int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
	char Userdata[] = "Hello World";
 8000b1e:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <main+0xc8>)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Enable GPIOB
	SPI2_GPIOInint();
 8000b28:	f7ff ff74 	bl	8000a14 <SPI2_GPIOInint>

	GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	210c      	movs	r1, #12
 8000b30:	482c      	ldr	r0, [pc, #176]	; (8000be4 <main+0xcc>)
 8000b32:	f7ff fdf0 	bl	8000716 <GPIO_WriteToOutputPin>
	// Enable SPI2
	SPI2_Inint();
 8000b36:	f7ff ff9f 	bl	8000a78 <SPI2_Inint>

	GPIO_Buttoninit();
 8000b3a:	f7ff ffbb 	bl	8000ab4 <GPIO_Buttoninit>

	GPIO_Led();
 8000b3e:	f7ff ffd1 	bl	8000ae4 <GPIO_Led>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	210c      	movs	r1, #12
 8000b46:	4828      	ldr	r0, [pc, #160]	; (8000be8 <main+0xd0>)
 8000b48:	f7ff fde5 	bl	8000716 <GPIO_WriteToOutputPin>

	// This will enable SSI and make NSS High internally and avoid MODF Error
//	SPI_SSIConfig(SPI2,ENABLE);

	SPI_SSOEConfig(SPI2,ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4827      	ldr	r0, [pc, #156]	; (8000bec <main+0xd4>)
 8000b50:	f7ff ff2e 	bl	80009b0 <SPI_SSOEConfig>

//		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == ENABLE){
//			delay(); // To avoid pin bouncing
//			GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
//		}
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 8000b54:	bf00      	nop
 8000b56:	2100      	movs	r1, #0
 8000b58:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <main+0xd8>)
 8000b5a:	f7ff fdc7 	bl	80006ec <GPIO_ReadFromInputPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f8      	beq.n	8000b56 <main+0x3e>

		delay();
 8000b64:	f7ff ff40 	bl	80009e8 <delay>


		// Enable SPI in CR1 register
		SPI_PeripheralControl(SPI2,ENABLE);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <main+0xd4>)
 8000b6c:	f7ff ff05 	bl	800097a <SPI_PeripheralControl>

		// Slave need to know LENGTH INFO (1BYTE)
		uint8_t datalen = strlen(Userdata);
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb38 	bl	80001e8 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	70fb      	strb	r3, [r7, #3]

		GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210c      	movs	r1, #12
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <main+0xcc>)
 8000b84:	f7ff fdc7 	bl	8000716 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <main+0xd0>)
 8000b8e:	f7ff fdc2 	bl	8000716 <GPIO_WriteToOutputPin>

		SPI_SendData(SPI2,&datalen,1);
 8000b92:	1cfb      	adds	r3, r7, #3
 8000b94:	2201      	movs	r2, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <main+0xd4>)
 8000b9a:	f7ff feb7 	bl	800090c <SPI_SendData>

		SPI_SendData(SPI2,(uint8_t*)Userdata,strlen(Userdata));
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb21 	bl	80001e8 <strlen>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	480f      	ldr	r0, [pc, #60]	; (8000bec <main+0xd4>)
 8000bae:	f7ff fead 	bl	800090c <SPI_SendData>

		// Cannot disable abruptly
		// So check if SPI is busy or not using STATUS REGISTER
		while(SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG));
 8000bb2:	bf00      	nop
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <main+0xd4>)
 8000bb8:	f7ff fe3a 	bl	8000830 <SPI_GetFlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f8      	bne.n	8000bb4 <main+0x9c>

		SPI_PeripheralControl(SPI2,DISABLE);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <main+0xd4>)
 8000bc6:	f7ff fed8 	bl	800097a <SPI_PeripheralControl>

		GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NO_12, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	210c      	movs	r1, #12
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <main+0xcc>)
 8000bd0:	f7ff fda1 	bl	8000716 <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	210c      	movs	r1, #12
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <main+0xd0>)
 8000bda:	f7ff fd9c 	bl	8000716 <GPIO_WriteToOutputPin>
	while(1){
 8000bde:	e7b9      	b.n	8000b54 <main+0x3c>
 8000be0:	08000ca8 	.word	0x08000ca8
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40003800 	.word	0x40003800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c22:	f000 f811 	bl	8000c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff ff77 	bl	8000b18 <main>

08000c2a <LoopForever>:

LoopForever:
  b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c38:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 8000c3c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c40:	2000001c 	.word	0x2000001c

08000c44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	4d0d      	ldr	r5, [pc, #52]	; (8000c80 <__libc_init_array+0x38>)
 8000c4c:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__libc_init_array+0x3c>)
 8000c4e:	1b64      	subs	r4, r4, r5
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	2600      	movs	r6, #0
 8000c54:	42a6      	cmp	r6, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	4d0b      	ldr	r5, [pc, #44]	; (8000c88 <__libc_init_array+0x40>)
 8000c5a:	4c0c      	ldr	r4, [pc, #48]	; (8000c8c <__libc_init_array+0x44>)
 8000c5c:	f000 f818 	bl	8000c90 <_init>
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	10a4      	asrs	r4, r4, #2
 8000c64:	2600      	movs	r6, #0
 8000c66:	42a6      	cmp	r6, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c70:	4798      	blx	r3
 8000c72:	3601      	adds	r6, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7a:	4798      	blx	r3
 8000c7c:	3601      	adds	r6, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08000cb4 	.word	0x08000cb4
 8000c84:	08000cb4 	.word	0x08000cb4
 8000c88:	08000cb4 	.word	0x08000cb4
 8000c8c:	08000cb8 	.word	0x08000cb8

08000c90 <_init>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr

08000c9c <_fini>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr
